//## begin module.cm preserve=no
//	  %X% %Q% %Z% %W%
//## end module.cm

//## begin module.cp preserve=no
//## end module.cp

//## Module: Residual; Pseudo Package body
//## Subsystem: Tracking::Fitting
//## Source file: C:\Models\Tracking\Fitting\Residual.cc


//## begin module.additionalIncludes preserve=no
//## end module.additionalIncludes

//## begin module.includes preserve=yes
//## end module.includes

// Residual
#include "CDFFitting/inc/Residual.hh"
#ifndef DEFECT_OLD_IOSTREAM_HEADERS
#include <iostream>
#else
#include <iostream>
#endif

#ifndef DEFECT_NO_IOSTREAM_NAMESPACES
using std::cerr;
using std::endl;
#endif


//## begin module.additionalDeclarations preserve=yes
//## end module.additionalDeclarations


// Class Residual

inline Residual::Residual(const Residual &right)
  //## begin Residual::Residual%copy.hasinit preserve=no
  //## end Residual::Residual%copy.hasinit
  //## begin Residual::Residual%copy.initialization preserve=yes
  :_magnitude(right._magnitude),
   _error(right._error)
  //## end Residual::Residual%copy.initialization
{
  //## begin Residual::Residual%copy.body preserve=yes
  //## end Residual::Residual%copy.body
}

inline Residual::Residual(const HepVector &magnitude, const HepSymMatrix &error)
  //## begin Residual::Residual%869346324.hasinit preserve=no
  //## end Residual::Residual%869346324.hasinit
  //## begin Residual::Residual%869346324.initialization preserve=yes
  :_magnitude(magnitude),
   _error(error)
  //## end Residual::Residual%869346324.initialization
{
  //## begin Residual::Residual%869346324.body preserve=yes
  if (_magnitude.num_row() != _error.num_row()) {
    std::cerr << "Ominous warning in construction of Residual:  residual and error matrix do not have same dimension" << std::endl;
  }
  //## end Residual::Residual%869346324.body
}


inline Residual::~Residual()
{
  //## begin Residual::~Residual%.body preserve=yes
  //## end Residual::~Residual%.body
}


inline const Residual & Residual::operator=(const Residual &right)
{
  //## begin Residual::operator=%.body preserve=yes
  if (this != &right) {
    _magnitude=right._magnitude;
    _error    =right._error;
  }
  return *this;
  //## end Residual::operator=%.body
}



//## Other Operations (implementation)
inline const HepVector & Residual::getDisplacement() const
{
  //## begin Residual::getDisplacement%869346314.body preserve=yes
  return _magnitude;
  //## end Residual::getDisplacement%869346314.body
}

inline const HepSymMatrix & Residual::getErrorMatrix() const
{
  //## begin Residual::getErrorMatrix%869346315.body preserve=yes
  return _error;
  //## end Residual::getErrorMatrix%869346315.body
}

inline unsigned int Residual::getDimensionality() const
{
  //## begin Residual::getDimensionality%869346316.body preserve=yes
  return _magnitude.num_row();
  //## end Residual::getDimensionality%869346316.body
}

inline double Residual::getDeltaChiSquared() const
{
  //## begin Residual::getDeltaChiSquared%869346317.body preserve=yes
  return (_magnitude.T()*_error*_magnitude)[0];
  //## end Residual::getDeltaChiSquared%869346317.body
}


// Additional Declarations
//## begin Residual.declarations preserve=yes
inline Residual::Residual() :
_magnitude(HepVector()),
_error(HepSymMatrix())
{}
//## end Residual.declarations





