
template <class Measureable>
Fit<Measureable>::Fit()
  :_chiSquared(0.0),
   _degreesOfFreedom(0),
   _derivativeMatrix(Measureable::getParameterSpaceSize(),1)
{
}

template <class Measureable>
Fit<Measureable>::Fit(const Fit<Measureable> &right)
  :_chiSquared(right._chiSquared),
   _degreesOfFreedom(right._degreesOfFreedom),
   _estimate(right._estimate),
   _covariance(right._covariance),
   _derivativeMatrix(Measureable::getParameterSpaceSize(),1)
{
}

template <class Measureable>
Fit<Measureable>::~Fit()
{
}

template <class Measureable>
const Fit<Measureable> & Fit<Measureable>::operator=(const Fit<Measureable> &right)
{
  if (this != &right) {
    _degreesOfFreedom=right._degreesOfFreedom;
    _chiSquared=right._chiSquared;
    _estimate=right._estimate;
    _covariance=right._covariance;
    _derivativeMatrix=right._derivativeMatrix;
  }
  return *this;
}


template <class Measureable>
const HepVector & Fit<Measureable>::getParameters() const
{
  return _estimate;
}

template <class Measureable>
HepVector & Fit<Measureable>::parameters()
{
  return _estimate;
}

template <class Measureable>
unsigned int Fit<Measureable>::getNumDegreesOfFreedom() const
{
  return _degreesOfFreedom;
}

template <class Measureable>
unsigned int & Fit<Measureable>::numDegreesOfFreedom()
{
  return _degreesOfFreedom;
}

template <class Measureable>
double Fit<Measureable>::getChiSquared() const
{
  return _chiSquared;
}

template <class Measureable>
double & Fit<Measureable>::chiSquared()
{
  return _chiSquared;
}

template <class Measureable>
double Fit<Measureable>::getProbability() const
{
  return ConfidenceLevelComputer::getConfidenceLevel(_chiSquared,_degreesOfFreedom);
}

template <class Measureable>
HepVector Fit<Measureable>::getDisplacementFrom(const Measureable &measureable) const
{
  return measureable.getParameters()-_estimate;
}

template <class Measureable>
HepSymMatrix Fit<Measureable>::getErrorMatrix(const Measureable &measureable) const
{
  return _covariance;
}

template <class Measureable>
const HepSymMatrix & Fit<Measureable>::getErrorMatrix() const
{
  return _covariance;
}

template <class Measureable>
HepSymMatrix & Fit<Measureable>::errorMatrix()
{
  return _covariance;
}

template <class Measureable>
HepMatrix Fit<Measureable>::getDerivativeMatrix(const Measureable &measureable) const
{
  return _derivativeMatrix;
}

template <class Measureable>
unsigned int Fit<Measureable>::getDimensionality() const
{
  return Measureable::getParameterSpaceSize();
}

template <class Measureable>
Measureable Fit<Measureable>::getMeasureable() const
{
  return Measureable::create(_estimate);
}




template <class Measureable>
Fit<Measureable>::Fit(double chiSquared,
                      unsigned  int degreesOfFreedom,
                      const HepVector     &estimate,
                      const HepSymMatrix &covariance)
  :
  _chiSquared(chiSquared),
  _degreesOfFreedom(degreesOfFreedom),
  _estimate(estimate),
  _covariance(covariance),
  _derivativeMatrix(Measureable::getParameterSpaceSize(),1)
{
}


