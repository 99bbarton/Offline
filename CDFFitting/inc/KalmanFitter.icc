

template <class Measureable>
KalmanFitter<Measureable>::KalmanFitter()
  :_validDepth(0)
{
}

template <class Measureable>
KalmanFitter<Measureable>::KalmanFitter(const KalmanFitter<Measureable> &right)
  :
  _FilteredEstimate(right._FilteredEstimate),
  _FilteredCovariance(right._FilteredCovariance),
  _FilteredResidual(right._FilteredResidual),
  _FilteredResidualCovariance(right._FilteredResidualCovariance),
  _SmootherGain(right._SmootherGain),
  _DerivativeMatrix(right._DerivativeMatrix),
  _MeasurementArray(right._MeasurementArray),
  _SmoothedEstimate(right._SmoothedEstimate),
  _SmoothedCovariance(right._SmoothedCovariance),
  _SmoothedResidual(right._SmoothedResidual),
  _SmoothedResidualCovariance(right._SmoothedResidualCovariance),
  _FitArray(right._FitArray),
  _ResidualArray(right._ResidualArray),
  _validDepth(right._validDepth)

{
}


template <class Measureable>
KalmanFitter<Measureable>::~KalmanFitter()
{
}

template <class Measureable>
void KalmanFitter<Measureable>::resetFit() {
  ProgressiveFitter<Measureable>::resetFit();
  _FilteredEstimate.erase(_FilteredEstimate.begin(),_FilteredEstimate.end()),
  _FilteredCovariance.erase(_FilteredCovariance.begin(),_FilteredCovariance.end());
  _FilteredResidual.erase(_FilteredResidual.begin(),_FilteredResidual.end());
  _FilteredResidualCovariance.erase(_FilteredResidualCovariance.begin(),_FilteredResidualCovariance.end());
  _SmootherGain.erase(_SmootherGain.begin(),_SmootherGain.end());
  _DerivativeMatrix.erase(_DerivativeMatrix.begin(),_DerivativeMatrix.end());
  _MeasurementArray.erase(_MeasurementArray.begin(),_MeasurementArray.end());
  _SmoothedEstimate.erase(_SmoothedEstimate.begin(),_SmoothedEstimate.end());
  _SmoothedCovariance.erase(_SmoothedCovariance.begin(),_SmoothedCovariance.end());
  _SmoothedResidual.erase(_SmoothedResidual.begin(),_SmoothedResidual.end());
  _SmoothedResidualCovariance.erase(_SmoothedResidualCovariance.begin(),_SmoothedResidualCovariance.end());
  _FitArray.erase(_FitArray.begin(),_FitArray.end());
  _ResidualArray.erase(_ResidualArray.begin(),_ResidualArray.end());
  _validDepth=0;
}

template <class Measureable>
const KalmanFitter<Measureable> & KalmanFitter<Measureable>::operator=(const KalmanFitter<Measureable> &right)
{
  if (this != &right) {
    ProgressiveFitter<Measureable>::operator=(right);
    _FilteredEstimate=right._FilteredEstimate;
    _FilteredCovariance=right._FilteredCovariance;
    _FilteredResidual=right._FilteredResidual;
    _FilteredResidualCovariance=right._FilteredResidualCovariance;
    _SmootherGain=right._SmootherGain;
    _DerivativeMatrix=right._DerivativeMatrix;
    _MeasurementArray=right._MeasurementArray;
    _SmoothedEstimate=right._SmoothedEstimate;
    _SmoothedCovariance=right._SmoothedCovariance;
    _SmoothedResidual=right._SmoothedResidual;
    _SmoothedResidualCovariance=right._SmoothedResidualCovariance;
    _FitArray=right._FitArray;
    _ResidualArray=right._ResidualArray;
    _validDepth=right._validDepth;
  }
  return *this;
}

template <class Measureable>
void KalmanFitter<Measureable>::apply(const FitAction<Measureable> *action)
{
  std::cerr << "Warning: Kalman fitter ignoring unknown fit action!" << std::endl;
}


template <class Measureable>
void KalmanFitter<Measureable>::apply(const Constraint<Measureable> *constraint)
{
  ProgressiveFitter<Measureable>::apply(constraint);
}

template <class Measureable>
void KalmanFitter<Measureable>::apply(const Measurement<Measureable> *measurement)
{

  ProgressiveFitter<Measureable>::apply(measurement);
  if (ProgressiveFitter<Measureable>::failed()) return;

  int error;
  HepSymMatrix cinv=ProgressiveFitter<Measureable>::_covariance.inverse(error);
  if (error) {
    std::cerr << "Ominous Warning in KalmanFitter::apply(Measurement):  matrix inversion failure " << std::endl;
    resetFit();
    return;
  }
  //
  _FilteredEstimate.push_back(ProgressiveFitter<Measureable>::_estimate);
  _FilteredCovariance.push_back(ProgressiveFitter<Measureable>::_covariance);
  _FilteredResidual.push_back(ProgressiveFitter<Measureable>::_residual)  ;
  _FilteredResidualCovariance.push_back(ProgressiveFitter<Measureable>::_residualCov);
  if (_SmootherGain.size()>0) _SmootherGain.back()        = _SmootherGain.back()*cinv;
  _SmootherGain.push_back(ProgressiveFitter<Measureable>::_covariance);
  _DerivativeMatrix.push_back(ProgressiveFitter<Measureable>::_derivativeMatrix);
  _MeasurementArray.push_back(measurement);
  _SmoothedEstimate.push_back(ProgressiveFitter<Measureable>::_estimate);
  _SmoothedCovariance.push_back(ProgressiveFitter<Measureable>::_covariance);
  _SmoothedResidual.push_back(ProgressiveFitter<Measureable>::_residual);
  _SmoothedResidualCovariance.push_back(ProgressiveFitter<Measureable>::_residualCov);
  _FitArray.push_back(Fit<Measureable>(ProgressiveFitter<Measureable>::_chiSquared,
	ProgressiveFitter<Measureable>::_degreesOfFreedom,
	ProgressiveFitter<Measureable>::_estimate,
	ProgressiveFitter<Measureable>::_covariance));
  _ResidualArray.push_back(Residual(ProgressiveFitter<Measureable>::_residual,
	ProgressiveFitter<Measureable>::_residualCov));
  _validDepth=_FitArray.size();
}

template <class Measureable> void KalmanFitter<Measureable>::smooth(unsigned int depth){
  int j=_SmoothedEstimate.size()-1;
  while (j>depth) {
    j--;
    _SmoothedEstimate[j]   = _FilteredEstimate[j] +
                            _SmootherGain[j]*_SmoothedEstimate[j+1]-
			    _SmootherGain[j]*_FilteredEstimate[j];
    _SmoothedCovariance[j].assign( _FilteredCovariance[j] +
                            _SmootherGain[j]*_SmoothedCovariance[j+1]*_SmootherGain[j].T() -
			    _SmootherGain[j]*_FilteredCovariance[j]*_SmootherGain[j].T());
    _SmoothedResidual[j]   = _FilteredResidual[j]-_DerivativeMatrix[j]*(_SmoothedEstimate[j]-_FilteredEstimate[j]);
    _SmoothedResidualCovariance[j].assign(_FilteredResidualCovariance[j]-
                            _DerivativeMatrix[j]*_SmoothedCovariance[j]*_DerivativeMatrix[j].T());

    _FitArray[j]           = Fit<Measureable>(ProgressiveFitter<Measureable>::_chiSquared,
	ProgressiveFitter<Measureable>::_degreesOfFreedom,
	ProgressiveFitter<Measureable>::_estimate,
	ProgressiveFitter<Measureable>::_covariance);
    _ResidualArray[j]      = Residual(_SmoothedResidual[j],_SmoothedResidualCovariance[j]);
  }
  _validDepth=depth;
}

template <class Measureable>
void KalmanFitter<Measureable>::apply(const Scatter<Measureable> *scatter)
{
  ProgressiveFitter<Measureable>::apply(scatter);
}

template <class Measureable>
void KalmanFitter<Measureable>::apply(const Transport<Measureable> *transport)
{
  ProgressiveFitter<Measureable>::apply(transport);
}

template <class Measureable>
void KalmanFitter<Measureable>::apply(const StartingPoint<Measureable> *startingPoint)
{
  ProgressiveFitter<Measureable>::apply(startingPoint);
}

template <class Measureable>
const Fit<Measureable> * KalmanFitter<Measureable>::getFit() const
{
  if (_FitArray.size()>0) return &_FitArray.back();
  return NULL;

}

template <class Measureable>
const Fit<Measureable> * KalmanFitter<Measureable>::getFit(const FitAction<Measureable> *action)
{
  //
  // Locate the proper measurement.
  //
  for (int i=0;i<_MeasurementArray.size();i++) {
    if (_MeasurementArray[i]==action) {
      int depth=i;
      //
      // Smooth if necessary
      //
      if (_validDepth>depth) smooth(depth);
      //
      // Return a fit.
      //
      return &_FitArray[depth];
    }
  }
  return NULL;
}

template <class Measureable>
const Residual * KalmanFitter<Measureable>::newResidual(const Measurement<Measureable> *measurement)
{
  //
  // Locate the proper measurement.
  //
  for (int i=0;i<_MeasurementArray.size();i++) {
    if (_MeasurementArray[i]==measurement) {
      int depth=i;
      //
      // Smooth if necessary
      //
      if (_validDepth>depth) smooth(depth);
      //
      // Return a fit.
      //
      return new Residual(_ResidualArray[depth]);
    }
  }
  return NULL;
}
