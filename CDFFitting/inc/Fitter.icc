

template <class Measureable>
Fitter<Measureable>::Fitter()
  :_reference(NULL),_failed(false)
{
}

template <class Measureable>
Fitter<Measureable>::Fitter(const Fitter<Measureable> &right)
  :_fitActionSet(right._fitActionSet),_reference(right._reference),_failed(right._failed)
{
}


template <class Measureable>
Fitter<Measureable>::~Fitter()
{
}


template <class Measureable>
const Fitter<Measureable> & Fitter<Measureable>::operator=(const Fitter<Measureable> &right)
{
  if (this != &right) {
    _reference=right._reference;
    _fitActionSet=right._fitActionSet;
    _failed=right._failed;
  }
  return *this;
}



template <class Measureable>
void Fitter<Measureable>::addFitAction(const FitAction<Measureable> *action)
{
  _fitActionSet.push_back(action);
}

template <class Measureable>
unsigned int Fitter<Measureable>::getNumFitActions() const
{
  return _fitActionSet.size();
}

template <class Measureable>
const FitAction<Measureable> * Fitter<Measureable>::getFitAction(unsigned int index) const
{
  return _fitActionSet[index];
}

template <class Measureable>
void Fitter<Measureable>::setReference(Measureable *reference)
{
  _reference=reference;
}

template <class Measureable>
const Measureable * Fitter<Measureable>::getReference() const
{
  return _reference;
}

template <class Measureable>
Measureable * Fitter<Measureable>::getReference()
{
  return _reference;
}

template <class Measureable>
void Fitter<Measureable>::apply(const FitAction<Measureable> *theFitterAction)
{
  std::cerr << "Fitter: an unrecognized fit action has been applied" << std::endl;
}

template <class Measureable>
void Fitter<Measureable>::apply(const Measurement<Measureable> *theFitterAction)
{
  std::cerr << "Fitter: Specialization does not handle Measurements" << std::endl;
}

template <class Measureable>
void Fitter<Measureable>::apply(const Constraint<Measureable> *theFitterAction)
{
  std::cerr << "Fitter: Specialization does not handle Constraints" << std::endl;
}

template <class Measureable>
void Fitter<Measureable>::apply(const Scatter<Measureable> *theFitterAction)
{
  std::cerr << "Fitter: Specialization does not handle Scatters" << std::endl;
}

template <class Measureable>
void Fitter<Measureable>::apply(const Transport<Measureable> *theFitterAction)
{
  std::cerr << "Fitter: Specialization does not handle Tranports" << std::endl;
}

template <class Measureable>
void Fitter<Measureable>::apply(const StartingPoint<Measureable> *theFitterAction)
{
  std::cerr << "Fitter: Specialization does not handle StargingPoints" << std::endl;
}






