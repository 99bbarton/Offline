#include "minimalMessageService.fcl"
#include "standardServices.fcl"
#include "CRVResponse/fcl/prolog.fcl"

process_name : CRVResponse

source :
{
  module_type : RootInput
}

services :
{
  RandomNumberGenerator: { }
  TFileService           : { fileName: "test.root" }
  GeometryService        : { inputFile : "Mu2eG4/geom/geom_common.txt" }
  ConditionsService      : { conditionsfile : "Mu2eG4/test/conditions_01.txt" }
  GlobalConstantsService : { inputFile : "Mu2eG4/test/globalConstants_01.txt" }
  SeedService            : @local::automaticSeeds
}

physics :
{
  producers:
  {
    protonTimeMap: { module_type : GenerateProtonTimes }
    muonTimeMap: { module_type : GenerateMuonLife }

    @table::CrvResponsePackage.producers
  }

  analyzers:
  {
    CrvPlot:
    {
      module_type                    : CrvPlot
      crvPhotonArrivalsModuleLabel   : CrvPhotonArrivals
      crvSiPMResponsesModuleLabel    : CrvSiPMResponses
      crvWaveformsModuleLabel        : CrvWaveforms
      crvRecoPulsesModuleLabel       : CrvRecoPulses
      crvBarIndex                    : 4768
      timeStart                      : 0
      timeEnd                        : 1600
    }
  }

  an : [protonTimeMap, muonTimeMap, @sequence::CrvResponsePackage.CrvResponseSequence]
  out: [CrvPlot]

  end_paths: [an, out]
}

physics.producers.CrvPhotonArrivals.startTime  : 0.0 
physics.producers.CrvSiPMResponses.blindTime   : 0.0
physics.producers.CrvWaveforms.minVoltage      : 0.0

services.SeedService.baseSeed         :  773651
services.SeedService.maxUniqueEngines :  20
