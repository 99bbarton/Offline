//Example fcl file to produce the clustering, track calo matching and analyzer modules associated with them

#include "fcl/minimalMessageService.fcl"
#include "fcl/standardProducers.fcl"
#include "fcl/standardServices.fcl"

process_name: TrackCaloMatchProd

source: 
{ 
   module_type: RootInput
   maxEvents : 1000
}

services : 
{

    message                : @local::default_message
    
    TFileService           : { fileName : "testCaloMatch.root" }

    RandomNumberGenerator  : { }    
    GeometryService        : { inputFile      : "Mu2eG4/geom/geom_common_cd3_s4p2.txt" }
    ConditionsService      : { conditionsfile : "Mu2eG4/test/conditions_01.txt"      }
    GlobalConstantsService : { inputFile      : "Mu2eG4/test/globalConstants_01.txt" }
    G4Helper               : { }
    SeedService            : @local::automaticSeeds
    BTrkHelper             : @local::BTrkHelperDefault  

}


physics: {

     producers :
     {
        protonTimeMap        : { module_type : GenerateProtonTimes }
        muonTimeMap          : { module_type : GenerateMuonLife }
        @table::Tracking.producers

        @table::CaloDigiMC.producers
        @table::CaloReco.producers
        @table::CaloDigiMC.producersMC
        @table::CaloCluster.producers
        @table::CaloCluster.producersMC
        @table::TrackCaloMatchingExt.producers
        @table::TrackCaloMatchingMVA.producers
    }


    analyzers: {

	ReadTrackCaloMatchingMVADeM: 
	{
            module_type                 : ReadTrackCaloMatchingMVA
            caloCrystalModuleLabel      : CaloCrystalHitFromHit
            caloClusterModuleLabel      : CaloClusterFromProtoCluster
            caloReadoutModuleLabel      : CaloCrystalHitFromHit
            caloClusterTruthModuleLabel : CaloClusterTruthMatch
	    trkIntersectModuleLabel     : TrackCaloIntersectionDeM
	    trkCaloMatchModuleLabel     : TrkCaloMatcherMVADeM
  	    fitterModuleLabel           : KFFDeM
	    g4ModuleLabel               : detectorFilter
	    virtualDetectorName         : virtualdetector	    
	}

	ReadTrackCaloMatchingExtDeM: 
	{
            module_type                 : ReadTrackCaloMatchingMVA
            caloCrystalModuleLabel      : CaloCrystalHitFromHit
            caloClusterModuleLabel      : CaloClusterFromProtoCluster
            caloReadoutModuleLabel      : CaloCrystalHitFromHit
            caloClusterTruthModuleLabel : CaloClusterTruthMatch
	    trkIntersectModuleLabel     : TrackCaloIntersectionDeM
	    trkCaloMatchModuleLabel     : TrkCaloMatcherExtDeM
  	    fitterModuleLabel           : KFFDeM
	    g4ModuleLabel               : detectorFilter
	    virtualDetectorName         : virtualdetector	    
	}


	CaloMini: 
	{
            module_type             : CaloMini
            caloCrystalModuleLabel  : CaloCrystalHitFromHit
            caloClusterModuleLabel  : CaloClusterFromProtoCluster
	}

   }

    p1: [ @sequence::EventMixing.TimeMaps,
          @sequence::Tracking.DigiSim,
          @sequence::CaloDigiMC.DigiSim,
          @sequence::Tracking.TPRDeM,
          @sequence::Tracking.TPRDmuM,
          @sequence::CaloReco.Reco,
          @sequence::CaloDigiMC.TruthMatch,
          @sequence::CaloCluster.Reco,
          @sequence::CaloCluster.TruthMatch,
          @sequence::TrackCaloMatchingMVA.TrkCaloMatchMVA,
          @sequence::TrackCaloMatchingExt.TrkCaloMatchExt]

    trigger_paths: [p1]

    e1: [ReadTrackCaloMatchingMVADeM,  ReadTrackCaloMatchingExtDeM, CaloMini]
    end_paths: [e1]
}



services.SeedService.baseSeed         :  99
services.SeedService.maxUniqueEngines :  20
