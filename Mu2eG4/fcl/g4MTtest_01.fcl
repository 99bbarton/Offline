# Configuration file for G4Test03
#
#  - Generate 200 events including one conversion electron plus
#    some number of background processes.
#  - Run these through G4.
#  - No event display.
#  - Form StrawHits from StepPointMC objects
#  - Write event data to an output file
#  - Save state of random numbers to the event-data output file
#

#include "minimalMessageService.fcl"
#include "standardProducers.fcl"
#include "standardServices.fcl"

# Give this job a name.
process_name : G4MTTest01

# Start form an empty source
source : {
  module_type : EmptyEvent
  maxEvents : 500
}

services : {

  message               : @local::default_message
  TFileService          : { fileName : "g4MTtest_01.root" }
  RandomNumberGenerator : { }

  GeometryService        : { inputFile      : "Mu2eG4/test/geom_01.txt"            }
  ConditionsService      : { conditionsfile : "Mu2eG4/test/conditions_01.txt"      }
  GlobalConstantsService : { inputFile      : "Mu2eG4/test/globalConstants_01.txt" }
  BTrkHelper             : @local::BTrkHelperDefault
  G4Helper               : { }
  SeedService            : @local::automaticSeeds
}

physics : {

  producers: {

    # Generate the event.
#    generate: @local::StoppedMuonConversionGun

    generate: {
      @table::EventGenerator.producers.StoppedMuonConversionGunN
      stashSize : 100
    }


    # Run G4 and add its output to the event.
    g4run : {
      @table::g4run
      numberOfEventsToProcess : 100 	# THIS MUST BE EQUAL TO stashSize!
      runinMTMode : true
      numberOfThreads : 2

      Mu2eG4CommonCut: {
	          type: inVolume
		  #pars: [HallAir,TS5Vacuum,TS5InnerCryoShell, TS5OuterCryoShell, TS5CryoInsVac]
                  pars:	[HallAir, TS5Vacuum, TS5InnerCryoShell, TS5OuterCryoShell]
         }

    }

    protonTimeMap        : { module_type : GenerateProtonTimes }
    muonTimeMap          : { module_type : GenerateMuonLife }

    # Form StrawHits (SH).
    makeSD               : @local::makeSD
    makeSH               : @local::makeSHfromSD

    # Calorimeter sequence    
    @table::CaloDigiMC.producers
    @table::CaloReco.producers

    # Save state of the random number engines.
    randomsaver : @local::randomsaver

  }

  analyzers: {

    readGens: {
      module_type : GenParticlesAnalyzer
      inputs      : "generate"
    }

    checkhits: {
      module_type            : ReadBack
      generatorModuleLabel   : generate
      g4ModuleLabel          : g4run
      diagLevel              : 0
      minimumEnergy          : 0.000
      maxFullPrint           : 0
#      maxFullPrint           : 201
    }

    readStrawHits: {
      module_type      : ReadStrawHit
      makerModuleLabel : makeSH
      diagLevel        : 0
      maxFullPrint     : 0
#      maxFullPrint     : 100
    }

    checkMT: {
      module_type            : MTVerification
      generatorModuleLabel   : generate
      g4ModuleLabel          : g4run

    }


  }

  p1 : [generate, g4run, protonTimeMap, muonTimeMap, makeSD, makeSH, @sequence::CaloDigiMC.DigiSim,
         @sequence::CaloReco.Reco,randomsaver ]
  e1 : [readGens, checkhits, readStrawHits, checkMT, outfile]

  trigger_paths  : [p1]
  end_paths      : [e1]

}

outputs: {

  outfile : {
    module_type : RootOutput
    fileName    : "data_g4MTtest_01.root"
  }

}

// Initialze seeding of random engines: do not put these lines in base .fcl files for grid jobs.
services.SeedService.baseSeed         :  0
services.SeedService.maxUniqueEngines :  20

# physics.producers.g4run.SDConfig.enableAllSDs : true
#physics.producers.g4run.SDConfig.enableSD     : [tracker, calorimeter, calorimeterRO, CRV, virtualdetector, stoppingtarget ]
physics.producers.g4run.SDConfig.enableSD     : [tracker, calorimeter, calorimeterRO, stoppingtarget ]
# physics.producers.g4run.BirksConsts : { G4_POLYSTYRENE : 0.07943 } // {string : mm/MeV }



// Enable diagnsotic printout for pedagogical purposes.
physics.producers.makeSH.diagLevel : 0
#physics.producers.makeSH.maxFullPrint : 5
physics.producers.makeSH.maxFullPrint : 0
#physics.producers.g4run.visualization.initMacro : "Mu2eG4/test/vismqt.mac"
physics.producers.CaloShowerStepFromStepPt.physVolInfoInput : "g4run"
#physics.producers.g4run.physics.turnOffRadioactiveDecay: true
#physics.producers.g4run.debug.writeGDML: true

// Print out sim particles
physics.producers.g4run.SimParticlePrinter : {
   enabled : true
   primariesOnly : false
   prefix : ""
}
