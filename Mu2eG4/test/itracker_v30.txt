//
// Warning:  do not write 10000. as 10,000.; it will be read as two numbers (10., 0.).

//For both v30 and v31

bool hasITracker      = true;

string itracker.extFile          =    "";   //"ITrackerGeom/ITrackerGeom.gdml";
string itracker.extWireFile      =    "";   //"ITrackerGeom/ITrackerWireData.root";

double itracker.r0               = 400.0;   //388.48435399; // Lengths in mm
double itracker.z0               =10200.;
double itracker.zHalfLength      =1000.0;   //1300.0;
double itracker.rOut             = 840.0;   //870.0;
double itracker.drop             =  20.0;

int    itracker.geomType         =    30;   //decimal digit:magior version, unit digit:minor version  20:Hexagonal, 30:Square with constant cell dimension, 
                                            //                                         31:Like 30 but with base fw in both directions and shared between two consecutive layers, and layers staggered
                                            //                                         41:Like 31 but with cell dimension that increases with radius
int    itracker.endCapType       =     0;   //EndCap shape type: 0 plane, 1 spherical
double itracker.voxelization     =     0;   //Choose voxelization method for the gas volumes that contain wires, negative: default computation, 0: voxelization off, positive: smartless value
bool   itracker.displayGasLayer  = false;   //Allow to display the gas inside the chamber. It is recommended to switch on it only for debug, it makes the display slow.
bool   itracker.displayWires     = false;   //Allow to display every wires inside gas inside the chamber. It is recommended to switch on it only for debug, it makes the display very slow.


// Cell parameter needed only for the square cell case

double itracker.cellDimension    =  10.0;
double itracker.FWireStep        =   1.0;
int    itracker.nLayer           =    40;
int    itracker.nVerticalFWire   =     2;
int    itracker.StoFWireRation   =    12;


// Materials and elements compositions
string         itracker.fillMaterial    = "ITGasHe_90Isob_10"; //"ITGasMix";

bool   itracker.usePhysicalStep  =  false; //Use the physical calculation of the path length, if false a fixed step distance is used by using the freePath variable 
double itracker.freePath         =   1.0; // free Path length in mm

// Field wires description
int    itracker.nFieldWireShells =      2;
vector<string> itracker.fieldWireMaterials = { "CarbonFiber", "G4_Ag" };
//vector<double> itracker.fieldWireShellsThicknesses = { 0.033, 0.001 };
vector<double> itracker.fieldWireShellsThicknesses = { 0.0795, 0.0005 };

// Sense wires description
int    itracker.nSenseWireShells =      2;
vector<string> itracker.senseWireMaterials = { "CarbonFiber", "G4_Ag" };
//vector<double> itracker.senseWireShellsThicknesses = { 0.033, 0.001 };
vector<double> itracker.senseWireShellsThicknesses = { 0.0145, 0.0005 };

// Inner Wall description
//int    itracker.nInnerWallShells =      4;
//vector<string> itracker.innerWallMaterials = { "CarbonFiber", "PolypropyleneFoam", "CarbonFiber" , "G4_Cu" };
//vector<double> itracker.innerWallShellsThicknesses = { 0.125, 0.48, 0.125, 0.002 };
int    itracker.nInnerWallShells =      1;
vector<string> itracker.innerWallMaterials = { "CarbonFiber"};
vector<double> itracker.innerWallShellsThicknesses = { 1.0 };

// Outer Wall description
int    itracker.nOuterWallShells =      2;
vector<string> itracker.outerWallMaterials = { "G4_Cu" , "CarbonFiber" };
vector<double> itracker.outerWallShellsThicknesses = { 0.002, 10.0 };

// End Cap description
int    itracker.nEndCapWallShells =     2;
vector<string> itracker.endcapWallMaterials = { "CarbonFiber", "G4_Cu" };
vector<double> itracker.endcapWallShellsThicknesses = { 0.002, 5.0 };

//
// This tells emacs to view this file in c++ mode.
// Local Variables:
// mode:c++
// End:
