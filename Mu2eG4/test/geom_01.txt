//
// Main geometry file for Mu2e.
//
// $Id: geom_01.txt,v 1.117 2012/02/16 05:00:15 gandr Exp $
// $Author: gandr $
// $Date: 2012/02/16 05:00:15 $
//
// Original author Rob Kutschke
//
// Warning:  do not write 10000. as 10,000.; it will be read as two numbers (10., 0.).

string detector.name  = "g4geom_v00";

bool hasHall            = true;
bool hasTarget          = true;
bool hasProtonAbsorber  = true;
bool hasNeutronAbsorber = true;
bool hasCalorimeter     = true;
bool hasBFieldManager   = true;
bool hasBeamline        = true;
bool hasVirtualDetector = true; // some components, e.g. ProtonAbsorber assume vd presence now
bool hasCosmicRayShield = true;
bool hasMBS             = true; // MBS assumes the presence of CosmicRayShield(Steel) & NeutronAbsorber

// Write mu2e geometry into a GDML file
bool   writeGDML        = false;
string GDMLFileName     = "mu2e.gdml";

// Uncomment exactly one tracker.
#include "Mu2eG4/test/ttracker_v2.txt"
//#include "Mu2eG4/test/ttracker_meco.txt"
//#include "Mu2eG4/test/ltracker_v0.txt"
//#include "Mu2eG4/test/itracker_v41.txt"
//#include "Mu2eG4/test/dummytracker.txt"

// Uncomment to enable debug printout on a per event or per track basis.
//vector<int> g4.steppingActionEventList = { 0, 1 };
//vector<int> g4.steppingActionTrackList = { 1 };
//vector<int> g4.strawSDEventList        = { 0, 1, 2, 3 };
//vector<int> g4.itgaslayerSDEventList   = { 0, 1, 2, 3 };
//vector<int> g4.trackingActionEventList = { 0, 1, 2, 3, 4, 5};

// Some G4 controls which does not allow it to consume all the memory
// or to spend all the time tracking one bad particle
int g4.steppingActionMaxSteps = 10000;
int g4.stepsSizeLimit = 10000;
int g4.particlesSizeLimit = 10000;

// If the following number is not zero, G4 will kill all particles alive
// at that time.
double g4.steppingActionMaxGlobalTime = 0; //ns

// The information (location, momentum) of all particles will be
// recorded in the output files for particular moments in time
//vector<double> g4.steppingActionTimeVD = { 500, 700, 1000 }; //ns

// Enable/disable code that kills uninteresting tracks in SteppingAction,
// Put a list of G4 volume names where the tracks should be killed,
// for example { "HallAir" }.
vector<string> g4SteppingAction.killInTheseVolumes = {};
bool   g4SteppingAction.killerVerbose = false;

// These are used in both SteppingAction and StackingAction.
bool   g4.killLowEKine  = false;
double g4.eKineMin      = 0.0;    // Kinetic energy in MeV

// One can set this limit particle-specific:
// vector<int>    g4.killLowEKinePDG = {211, -211,   13,  -13,   11,  -11};
// vector<double> g4.eKineMinPDG     = {9.0,  9.0, 20.0, 20.0, 95.0, 95.0};

// This setting is used for special studies (stored muons)
// bool g4.killPitchToLowToStore = false;

// current G4 stepper choices are shown below, extend Mu2eWorld.cc if more are needed
// G4ClassicalRK4
// G4ImplicitEuler
// G4ExplicitEuler
// G4SimpleRunge
// G4SimpleHeum
// G4HelixImplicitEuler
// G4HelixSimpleRunge
string g4.stepper = "G4ClassicalRK4";

// Enable the Mu2e written version of the decay of muonic atoms.
bool g4.doMuMinusConversionAtRest = false;

// List of PDG ids of particles for which to switch off decay.
vector<int> g4.noDecay = {};

// Print a copy of this file to the job log.
bool printConfig = false;

//  Print statistics about this file to the job log.
bool printConfigStats = false;

// Choose a PhysicsList
string g4.physicsListName = "QGSP_BERT";

// Enable the code to kill low p secondaries from cosmics.
bool g4.doCosmicKiller = false;
double g4.cosmicPcut = 0.;
double g4.yaboveDirtYmin = 0.;

// Load other materials defined specifically for Mu2e.
vector<string> mu2e.materials =
  { "ShieldingConcrete", "IsoButane", "StrawGas",
    "Kapton", "Scintillator", "WAGVacuum", "DSVacuum", "MBOverburden",
    "ITGasHe_90Isob_10", "ITGasHe_90CF4_10", "ITGasMix",
    "CarbonFiber", "PolypropyleneFoam", "CFoam_480", "CFoam_100",
    "CFoam_080", "Polyethylene092B050d095", "Polyethylene092B300d119",
    "Polyethylene092Li075d106", "Polyethylene092", "StainlessSteel", "Lyso_01"
};

// Control printout of element and material lists.
bool g4.printElements  = false;
bool g4.printMaterials = false;

// make detector volume structure visible where enabled
bool g4.forceAuxEdgeVisible = true;
// invoke volume overlap check where enabled (draws random numbers)
bool g4.doSurfaceCheck = false;

// The world volume should enclose the everything.
// The margins are
double world.margin.top = 3398; // above the dirt cap
double world.margin.bottom = 0; // below the bottom of the hall floor
double world.margin.xmin = 10400; // outsize of the hall walls
double world.margin.xmax = 13450; // outsize of the hall walls
double world.margin.zmin = 3000; // outside the ExtMon room
double world.margin.zmax =  3700; // outside the hall wall

string         world.materialName = "G4_AIR";
bool           world.boxVisible   = true;
bool           world.boxSolid     = false;
int            world.verbosityLevel = 0;

// Overburden above the detector: 20 ft in proposal.
// I have arbitrarily split it into a flat part and a dome.
double dirt.overburdenDepth = 6000.;
double dirt.capHalfHeight   = 1.; // small numbers make it "almost" invisible (mm)
double dirt.capBottomRadius = 2.;
double dirt.capTopRadius    = 1.;
string dirt.overburdenMaterialName = "MBOverburden";
bool   dirt.visible         = true;
bool   dirt.solid           = false;
bool   dirt.capVisible      = true;
bool   dirt.capSolid        = false;

// Positions of the hall walls
double hall.insideXmin = -9300;
double hall.insideXmax = +6250;
double hall.insideZmax = +20000;
double hall.insideZBeamDumpWall = -12000;
double hall.insideZExtMonUCIWall = -22000; // -17129;
double hall.insideFullHeight = 10000.;

// Hall wall details
double hall.floorThick   = 300.;
double hall.ceilingThick = 300.;
double hall.wallThick    = 300.;
double hall.wallExtMonUCIThick  = 600.;
string hall.wallMaterialName = "G4_CONCRETE";
string hall.insideMaterialName = "G4_AIR";

bool   hall.formalBoxVisible        = false;

bool   hall.floorVisible            = true;
bool   hall.floorSolid              = true;
bool   hall.ceilingVisible          = false;
bool   hall.ceilingSolid            = false;
bool   hall.wallsVisible            = true;
bool   hall.wallsSolid              = false;

// These three numbers define the position of the hall air volume in mu2e coordinates
double mu2e.origin.heightAboveHallFloor = 2550.;

// X-offset of the PS(+x) and DS(-x) from the Mu2e origin.
// The origin of the detector coordinate system is on the DS axis at the specified z.
double mu2e.solenoidOffset   =  3904.;   // mm
double mu2e.detectorSystemZ0 = 10200.;   // mm  G4BL: (17730-7292=9801 mm)

// A toy model of the DS, cyrostats+coils, vacuum
double toyDS.rIn                = 1000;
double toyDS.rOut               = 1300;
double toyDS.halfLength         = 6000.;
double toyDS.z0                 = 9226.;
double toyDS1.halfLength        =  150.;
double toyDS2.halfLength        = 2350.;
double toyDS3.halfLength        = 3400.5.;
double toyDS.frontHalfLength    =  150.;
string toyDS.materialName       = "G4_Al";
string toyDS.insideMaterialName = "DSVacuum";

int    toyDS.verbosityLevel     = 0;
bool   toyDS.visible            = true;
bool   toyDS.solid              = false;

// A toy model of the PS, coils, cryo and vaccum.
double toyPS.rIn            =   880.;
double toyPS.rOut           =  1300.;
double toyPS1.vacHalfLength =  2580.; //2700.;
double toyPS.CryoHalfLength =  2580.;
string toyPS.materialName   = "G4_Al";
bool   toyPS.visible        = true;
bool   toyPS.solid          = false;

// For g4beamline comparison: close the PS vacuum with a thin disk.
// A non-positive thickness (default in .cc) means don't create the G4 volume.
// The disk matches the outside radius of the cryostat.
// 
// NB: docdb-1944 uses 2.84mm Titanium disk.
double toyPS.toyEnclosure.Thickness = 2.84; // mm
string toyPS.toyEnclosure.materialName = "G4_Ti";

// Parameters for TS volumes.
double toyTS.rVac        =  240.;          // Outer radius of vacuum volume
double toyTS.rCryo       =  700.;          // Outer radius of cryostat
double toyTS.rTorus      = 2929.;          // Bend radius of the torus
double toyTS1.halfLength =  500.;
double toyTS5.halfLength =  500.;
bool   toyTS.visible        = true;
bool   toyTS.solid          = false;

// PBAR Absorber

double pbar.halfLength = 180.0e-3;
string pbar.materialName = "G4_Be";

// Collimators

bool   coll.visible        = true;
bool   coll.solid          = false;

double coll1.halfLength = 500.0;
double coll1.innerRadius1 = 150.0;
double coll1.innerRadius2 = 170.0;
string coll1.materialName = "G4_Cu";

double coll3.halfLength       = 400.0;
double coll3.hole             = 50.0;
string coll3.materialName     = "G4_Cu";
double coll3.rotationAngle    = 0.0;
double coll3.holeRadius       = 150.0;
double coll3.holeHalfHeight   = 100.0;
double coll3.holeDisplacement = 90.0;

double coll5.halfLength   = 500.0;
double coll5.innerRadius  = 128.0;
string coll5.materialName = "G4_Cu";

// Virtual detectors

double vd.halfLength     = 0.01; //mm
int    vd.verbosityLevel = 0;
bool   vd.visible        = true;
bool   vd.solid          = false;

// Production Target in PS:

// Position in the Mu2e coordinate system
vector<double> productionTarget.position = { 3904., 0., -6164.5};

double targetPS_halfLength        =     80.;  // mm.
double targetPS_rOut              =      3.15;// mm
double targetPS_positionX         =      0.;  // mm
double targetPS_positionY         =      0.;  // mm
double targetPS_positionZ         =   -35.5;  // mm
double targetPS_rotX              =      0.;  // degree. Active rotation.
double targetPS_rotY              =   13.65;  // degree.
string targetPS_materialName      = "G4_Au";
bool   targetPS.visible           = true;
bool   targetPS.solid             = false;

#include "Mu2eG4/test/protonBeamDump_v01.txt"

#include "Mu2eG4/test/extmon_fnal_v01.txt"
#include "Mu2eG4/test/extmon_uci_v01.txt"

// Describe dummy stopping target that is just one big G4TUBS.
double dummyStoppingTarget.rIn        =     0.;
double dummyStoppingTarget.rOut       =   100.;
double dummyStoppingTarget.halfLength =   400.;
double dummyStoppingTarget.z0         =  5900.;
string dummyStoppingTarget.material   = "WAGVacuum";

//
// Describe targets.
//

// material around the targets
string         target.fillMaterial    = "DSVacuum";

// All dimensions in mm in the detector coordinate system.
// (0,0,0) = on axis in the DS at z=12000. mm
double target.z0             = -6129.0;    // 12000-(13800.00-7929) = -6129. was -6100
double target.deltaZ         =    50.0;
bool   target.visible        = true;
bool   target.solid          = false;

// all radii must be specified, i.e., nFoils is determined from the size
// of the radii vector.
vector<double> target.radii  =
    {  83.00,  81.89,  80.79,  79.68,  78.58,
       77.47,  76.36,  75.26,  74.15,  73.04,
       71.94,  70.83,  69.73,  68.62,  67.51,
       66.41,  65.30 };

// last material given will be repeated up to number radii.size()
vector<string> target.materials =
    { "G4_Al"};

// Variation of locations of foil centers
// z: variations from equal spacings according to z0 and deltaZ
// last will be repeated...
vector<double> target.zVars  =
    { 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0.,
      0., 0. };

// x: relative to beam axis
// last will be repeated...
vector<double> target.xVars  =
    { 0.};

// y: relative to beam axis
// last will be repeated...
vector<double> target.yVars  =
    { 0. };

// last thickness given will be repeated up to number radii.size()
vector<double> target.halfThicknesses  =
    {0.1};

// last x directional cosine given will be repeated up to number radii.size()
vector<double> target.xCos  =
    { 0.};

// last y directional cosine given will be repeated up to number radii.size()
vector<double> target.yCos  =
    { 0.};

// Crystal calorimeter

vector<double> calorimeter.calorimeterCenter               = {0.,0.,12700.};   // G4BL: 20729-7929=12800.
double calorimeter.rInscribed                              = 360.;
string calorimeter.calorimeterFillMaterial                 = "DSVacuum";

int    calorimeter.numberOfVanes    =  4;
int    calorimeter.nCrystalRSlices  =  12;
int    calorimeter.nCrystalZSlices  =  44;

double calorimeter.crystalHalfLong  = 65.;
double calorimeter.crystalHalfTrans = 15.;
string calorimeter.crystalMaterial                         = "Lyso_01"; //"G4_PbWO4";

string calorimeter.crystalWrapper                          = "Polyethylene092";
double calorimeter.crystalWrapperHalfThickness             = 0.01 ;

string calorimeter.crystalReadoutMaterial                  = "G4_Si";
double calorimeter.crystalReadoutHalfTrans                 = 5.;
double calorimeter.crystalReadoutHalfThickness             = 5.;
int    calorimeter.crystalReadoutChannelCount              = 2; // APDs per crystal
int    calorimeter.crystalReadoutSide                      = 1; // +1 or -1

double calorimeter.crystalNonUniformity  = 0.0; // -2 to 2
                                                // (A(ro)-A(front))/A(middle)
double calorimeter.timeGap               = 100.0;  // ns
double calorimeter.electronDepositionAPD = 1000.0; // MeV
double calorimeter.electronMinEnergyAPD  = 0.1;    // MeV

// Control display and debug printout.
bool calorimeter.vaneBoxVisible = true;
bool calorimeter.vaneBoxSolid   = true;
bool calorimeter.crystalVisible = false;
bool calorimeter.crystalSolid   = true;
int  calorimeter.verbosityLevel = 0;

// Dimensions of steel, assuming constant thickness all around, and square shape.
double fluxcrv.HallSteelHalfThick    = 250.;  // newer drawings seem to have it at 150 in the D/U ends
double fluxcrv.HallSteelHalfLengthXY = 2048.;
double fluxcrv.HallSteelHalfLengthZ  = 7150.; // newer drawings have it at 6830; there is also End Cap
double fluxcrv.HallSteelEndCapHalfLengthZ  = 1085;
double fluxcrv.HallSteelEndCapHalfThick    =  250.;
string fluxcrv.HallSteelMaterialName = "G4_Fe";
double fluxcrv.HallSteelHoleRadius   = 850;
vector<double> fluxcrv.HallSteelOffset  = {0.,0., -80.}; // mm
bool   fluxcrv.visible          = true;
bool   fluxcrv.solid            = false;

// Parameters of the CRS Scintillator Modules (length in mm)
// data based mainly on Mu2e Document 388-v1 Mu2e Proposal, fig 11.6,
// p174 11.9 p.179 and fig 4.6.9/text in 1330v2

int            crs.scintillatorLayersPerModule              = 3;
int            crs.scintillatorBarsPerFullLayer             = 20;
vector<double> crs.scintillatorBarHalfLengths               = { 5.,  2475., 50.};
string         crs.scintillatorBarMaterialName              = "G4_POLYSTYRENE";
double         crs.scintillatorLayerShift                   = 25.0;
double         crs.scintillatorLayerGap                     = 0.0;
double         crs.scintillatorBarPigmentationHalfThickness = 0.125; // not used for now
string         crs.scintillatorBarPigmentationMaterialName  = "G4_TITANIUM_DIOXIDE";
vector<double> crs.scintillatorModuleOuterSheetHalfLengths  = { 0.8, 2475., 1045.}; // 0.063"=1.6mm;
string         crs.scintillatorModuleOuterSheetMaterial     = "G4_Al";
string         crs.scintillatorModuleInterLayerSheetMaterialName  = "G4_POLYSTYRENE";
double         crs.scintillatorModuleInterLayerSheetHalfThickness = 6.0; // 0.125"=3.175mm; or 57.2-30-3.2/4
vector<double> crs.moduleUnistrutHalfLengths                = {28.,  2475., 157.}; // fig 11.9 p.179
double         crs.wallUnistrutHalfThickness                = 28.;  // (154 - 41)/4 = 28.25 ~28
// assume the unistrut on the steel to be of the same thickness as the one on the modules
double         crs.scintillatorOverlap                      = 100.; // fig 11.5

// full, half modules, more specific numbers TBD
vector<int>    crs.shieldR_NumberOfModules  = {10,  1};
vector<int>    crs.shieldL_NumberOfModules  = { 8,  1};
vector<int>    crs.shieldD_NumberOfModules  = { 2,  1};
vector<int>    crs.shieldU_NumberOfModules  = { 3,  1};
vector<int>    crs.shieldT_NumberOfModules  = {10,  1};
vector<int>    crs.shieldB_NumberOfModules  = {10,  1};
vector<int>    crs.shieldTS_NumberOfModules = { 2,  6}; // not implemented yet

// additional relative offsets wrt the center of the shields in their local reference frame before rotation

vector<double> crs.shieldR_Offset  = {   0., 75.,1419.};
vector<double> crs.shieldL_Offset  = {   0., 75.,-531.};
vector<double> crs.shieldD_Offset  = {1670.,  0.,   0.};
vector<double> crs.shieldU_Offset  = {4508.,  0., 925.};
vector<double> crs.shieldT_Offset  = {   0., 75.,1419.};
vector<double> crs.shieldB_Offset  = {   0., 75.,1419.};
vector<double> crs.shieldTS_Offset = {   0.,  0., 0.};

bool   crs.vetoVisible    = false;
bool   crs.vetoSolid      = false;
int    crs.verbosityLevel = 0;


// Magnetic field
//
// Default setting is to use the full field everywhere, except the
// upstream part of DS, where uniform field is used.

// Form of DS field: 0 is full field;
//                   1 is full upstream, const downstream;
//                   2 is const throughout
int detSolFieldForm = 1;

// Value of the uniform magnetic field with the DS volume.
double toyDS.bz            = 1.0;

// Gradient of field in DS2 volume. Applied only in the case
// of detSolFieldForm=1 or detSolFieldForm=2.
double toyDS.gradient      = 0.0; // Tesla/m

// This is recommended field map. See geom_mecofield.txt to use the meco field.
string bfield.format  = "G4BL";
vector<string> bfield.files = {
  "BFieldMaps/Mau7/Mu2e_DSMap.header",
  "BFieldMaps/Mau7/Mu2e_PSMap.header",
  "BFieldMaps/Mau7/Mu2e_TSuMap.header",
  "BFieldMaps/Mau7/Mu2e_TSdMap.header"
};

// This scale factor is of limited use.
// It can make approximate sense to scale the PS field to get a rough
// answer; the answer will be wrong in detail.
// It never makes sense to scale the TS field.
// Not sure if it ever makes sense to scale the PS field.
double bfield.scaleFactor = 1.0;

// Proton Absorber
string protonabsorber.materialName = "Polyethylene092";
double protonabsorber.OutRadius1   =  380.0;
double protonabsorber.OutRadius0   =  335.2;
double protonabsorber.halfLength   = 1250.0;
double protonabsorber.thickness    =    0.5;
int    protonabsorber.verbosityLevel = 0;
bool   protonabsorber.visible      = true;
bool   protonabsorber.solid        = false;

// Neutron Absorber (document draft dated 2010-07-16)
string neutronabsorber.materialName          = "Polyethylene092Li075d106";
double neutronabsorber.internalOuterRadius   =  940.0;
double neutronabsorber.internalInnerRadius0  =  460.0;
double neutronabsorber.internalInnerRadius1  =  710.0;
double neutronabsorber.internalInnerRadius2  =  850.0;
double neutronabsorber.internalHalfLengthZ01 = 2197.5;
double neutronabsorber.internalHalfLengthZ02 = 3515.0;
double neutronabsorber.internalZ01           = 6202.5; // 4005+8400/2
double neutronabsorber.externalHalfLengthZ   = 6220.0;
double neutronabsorber.externalHalfLengthXY  = 1475.0;
double neutronabsorber.externalHalfThickness =   75.0;
double neutronabsorber.externalZ0            = 9219.0; // 2999+15439/2

int    neutronabsorber.verbosityLevel = 0;
bool   neutronabsorber.visible      = true;
bool   neutronabsorber.solid        = false;

// Muon Beam Dump/Stop

// except for one of the Z offset values the rest is computable from the other values

// the Z values were adjusted from mu2e doc-1351 based on doc-1186 also to
// fit with the previously implemented components

// the initial implementation is described in doc-1519

double mbs.BSTSInnerRadius  =   410.0;
double mbs.BSTSOuterRadius  =   430.0;
double mbs.BSTSHLength      =  1700.0;
string mbs.BSTSMaterialName = "StainlessSteel";
double mbs.BSTSZ            = 15150.0;
double mbs.SPBSInnerRadius  =   430.0;
double mbs.SPBSOuterRadius  =   452.0;
double mbs.SPBSHLength      =  1320.0;
string mbs.SPBSMaterialName = "G4_Pb";
double mbs.BSTCInnerRadius  =   390.0;
double mbs.BSTCOuterRadius  =   410.0;
double mbs.BSTCHLength      =   375.0;
string mbs.BSTCMaterialName = "Polyethylene092B300d119";
double mbs.BSBSInnerRadius  =   320.0;
double mbs.BSBSOuterRadius  =   410.0;
string mbs.BSBSMaterialName = "Polyethylene092B300d119";
double mbs.CLV2InnerRadius  =    50.0;
double mbs.CLV2OuterRadius  =   320.0;
double mbs.CLV2HLength      =    50.0;
string mbs.CLV2MaterialName = "Polyethylene092B300d119";
double mbs.CryoSealHLength    = 150.0;
string mbs.CryoSealMaterialName = "StainlessSteel";
string mbs.EndPlugMaterialName  = "StainlessSteel";
double mbs.EndPlugDiskHLength   = 50.0;

int    mbs.verbosityLevel = 0;
bool   mbs.visible      = true;
bool   mbs.solid        = false;

#include "Mu2eG4/test/visualization_regions.txt"

//
//
// End notes:
//
// 1) Sources of information:
//
//
//
// This tells emacs to view this file in c++ mode.
// Local Variables:
// mode:c++
// End:
