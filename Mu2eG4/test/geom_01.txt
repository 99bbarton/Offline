//
// Geometry description for the Mu2e detector and hall. 
// See Mu2e-doc-???? for details.
//
// $Id: geom_01.txt,v 1.27 2010/05/13 19:41:05 rhbob Exp $
// $Author: rhbob $
// $Date: 2010/05/13 19:41:05 $
//
// Original author Rob Kutschke

string detector.name  = "g4geom_v00";

//
// Warning:  do not write 10000. as 10,000.; it will be read as two numbers (10., 0.).

bool hasHall        = true;
bool hasTarget      = true;
bool hasLTracker    = true;
bool hasTTracker    = false;
bool hasITracker    = false;
bool hasCalorimeter = true;

// Uncomment to enable debug printout on a per event basis.
//vector<int> g4.steppingActionEventList = { 0, 1 };
//vector<int> g4.strawSDEventList        = { 0, 1, 2, 3 };
//vector<int> g4.trackingActionEventList = { 0, 1, 2, 3, 4, 5};

//form of DS field: 0 is full field; 1 is full upstream, const downstream; 2 is const throughout
int detSolFieldForm = 2;


// Print a copy of this file to the job log.
bool printConfig = false;

// Choose a PhysicsList
string g4.physicsListName = "N02";

// Enable the code to kill low p secondaries from cosmics.
bool g4.doCosmicKiller = false;

// Tell G4 to load these predefined elements.
vector<string> g4.elements =
  { "H",  "He", "C",  "N",  "O",  "F", "Na", "Al", "Si", "Ar",
    "Ca", "Ti", "Fe", "Cu", "Ta", "W", "Pt", "Au", "Pb", "Ag" };
 
// Tell G4 to load these predefined materials.
vector<string> g4.materials =
  { "G4_H",     "G4_He",  "G4_C",  "G4_N",  "G4_O", 
    "G4_F",     "G4_Na",  "G4_Al", "G4_Si", "G4_Ar",
    "G4_Ca",    "G4_Ti",  "G4_Fe", "G4_Cu", "G4_Ta",
    "G4_W",     "G4_Pt",  "G4_Au", "G4_Pb", "G4_WATER",
    "G4_PbWO4", "G4_AIR", "G4_Ag"
  };

// Load other materials defined specifically for Mu2e.
vector<string> mu2e.materials =
  { "ShieldingConcrete", "Polyethylene", "IsoButane", "StrawGas", 
    "Kapton", "Scintillator", "WAGVacuum", "MBOverburden", 
    "ITGasMix",  "CarbonFiber", "PolypropyleneFoam" };

// Control printout of element and material lists.
bool g4.printElements  = false;
bool g4.printMaterials = false;

// Half lengths of the world box, (x,y,z) in mm.
vector<double> world.halfLengths = { 20000., 10000., 20000.};
string         world.materialName = "G4_AIR";

// Position of the origin of the Mu2e origin system at the 
//  x: mid-point between TSu and TSd.
//  y: given as height above the floor
//  z: offset from the world origin.
double world.mu2eOrigin.xoffset =     0.;
double world.mu2eOrigin.height  =  2350.;
double world.mu2eOrigin.zoffset = -4000.;

double world.prodSolXoff = 3904.;

// Overburden above the detector: 20 ft in proposal.
// I have arbitrarily split it into a flat part and a dome.
double dirt.overburdenDepth = 6000.;  
double dirt.capHalfHeight   = 1.;
double dirt.capBottomRadius = 2.;
double dirt.capTopRadius    = 1.;
string dirt.overburdenMaterialName = "MBOverburden";

// Inside dimensions of the hall.  Order is: (x,y,z) = width, height, length.
// Thicknesses of the hall walls.
vector<double> hall.insideHalfLengths = { 7775., 5000., 16000.};
double hall.floorThick   = 300.;
double hall.ceilingThick = 300.;
double hall.wallThick    = 300.;
string hall.wallMaterialName = "G4_CONCRETE";
string hall.insideMaterialName = "G4_AIR";

// Offset of the hall from its standard position within the world:
//   - Centered in x and z.
//   - At the bottom in y.
vector<double> hall.offset = { -1525., 0., 0. };

// Concrete shielding 
double shieldCon.xspace             = 1300.;
double shieldCon.insideHeight       = 5050.;
double shieldCon.Thick              = 1000.;
double shieldCon.insideHalfLength   = 7735.;
string shieldCon.materialName       = "ShieldingConcrete";
string shieldCon.insideMaterialName = "G4_AIR";

// The iron Cosmic Ray shield.
double shieldFe.thick              =  508.;
double shieldFe.outerHalfWidth     = 2048.;
double shieldFe.zextra             = 1000.;
string shieldFe.materialName       = "G4_Fe";
string shieldFe.insideMaterialName = "G4_AIR";

// A toy model of the DS, coils cryo and vacuum.
//  - it is centered on the cosmic ray shield in (x,y).
//  - middle of the volume is at z0, expressed in MECO system.
double toyDS.rIn           = 1000;
double toyDS.rOut          = 1300;
double toyDS.halfLength    = 5940.;
double toyDS.halfLengthVac = 6000.;
double toyDS.z0            = 9229.;
string toyDS.materialName       = "G4_Al";
string toyDS.insideMaterialName = "WAGVacuum";

// Use a uniform magnetic field with the DS volume.
double toyDS.bz            = -1.0;

// A toy model of the PS, coils, cryo and vaccum.
double toyPS.rIn           =   880.;
double toyPS.rOut          =  1300.;
double toyPS.halfLength    =  2580.;
double toyPS.halfLengthVac =  2700.;
double toyPS.z0            = -6529.;
string toyPS.materialName       = "G4_Al";
string toyPS.insideMaterialName = "WAGVacuum";



// Proton Target in PS 
double targetPS_halfLength        =     80.;  // mm.I use this length to move PrimaryProtonGun in PrimaryProtonGun.cc
double targetPS_rOut              =      3.;  // mm
double targetPS_positionX         =      0.;  // mm
double targetPS_positionY         =      0.;  // mm
double targetPS_positionZ         =   -35.5;  // mm
double targetPS_rotX              =     1.8;  // degree
double targetPS_rotY              =   12.22;  // degree
string targetPS_materialName      = "G4_Au";


// LTracker: Positioning infor is relative to DS.
int    ltracker.nSides           =     8;
double ltracker.r0               =   388.55;      // Lengths in mm
double ltracker.z0               = 10200.;        // In Mu2e coordinate system.
double ltracker.zHalfLength      =  1310.0;       // Includes a little extra space.
double ltracker.rOut             =   880.0;
double ltracker.strawHalfLength  =  1300.0;
double ltracker.rStrawOut        =     2.5;
double ltracker.phi0             =     0.0;       // radians
double ltracker.tiltY            =     0.015;     // radians
double ltracker.tiltX            =     0.0138563; // radians
double ltracker.strawThickness   =     0.025;     // mm
double ltracker.rWire            =     0.010;     // mm
double ltracker.carbonThick      =     1.e-4;     // mm =100 nm

vector<int> ltracker.nStrawsSide   = { 63, 64, 65 };
vector<int> ltracker.nStrawsVane   = { 51, 50, 51 };
vector<double> ltracker.vaneOffset = { 572., 10., 0.};  // mm

// Materials in the two types of straws; the same for now.
string         ltracker.fillMaterial    = "WAGVacuum";
vector<string> ltracker.strawMaterials0 = { "Kapton", "StrawGas", "G4_W" };
vector<string> ltracker.strawMaterials1 = { "Kapton", "StrawGas", "G4_W" };


// Tubs parameters of assembly volume for the full LTracker.
//    ( z halfLength, r Inner, r Outer )
// I should really compute this from the above info.
vector<double> ltracker.tubs     = { 1400., 380., 750. };

// ITracker: Positioning infor is relative to DS.
string itracker.extFile          =    "";   //"ITrackerGeom/ITrackerGeom.gdml";
string itracker.extWireFile      =    "";   //"ITrackerGeom/ITrackerWireData.root";

double itracker.r0               = 400.0;   //388.48435399; // Lengths in mm
double itracker.z0               =10200.;
double itracker.zHalfLength      =1000.0;   //1300.0;
double itracker.rOut             = 840.0;   //870.0;
double itracker.drop             =  20.0;

int    itracker.geomType         =     3;   //2:Hexagonal, 3:Square, 4:Square with base fw in both directions
int    itracker.endCapType       =     0;   //EndCap shape type: 0 plane, 1 spherical
double itracker.voxelization     =     0;   //Choose voxelization method for the gas volumes that contain wires, negative: default computation, 0: voxelization off, positive: smartless value
bool   itracker.displayGasLayer  = false;   //Allow to display the gas inside the chamber. It is recommended to switch on it only for debug, it makes the display slow.
bool   itracker.displayWires     = false;   //Allow to display every wires inside gas inside the chamber. It is recommended to switch on it only for debug, it makes the display very slow.


// Cell parameter needed only for the hexagonal cell case

int    itracker.nSWire           =   140;
int    itracker.nSDeltaWire      =    12;
int    itracker.nSuperLayer      =     8;
int    itracker.nRing            =     7;

// Cell parameter needed only for the square cell case

double itracker.cellDimension    =  10.0;
double itracker.FWireStep        =   1.0;
int    itracker.nLayer           =    40;
int    itracker.nVerticalFWire   =     2;
int    itracker.StoFWireRation   =    12;


// Materials and elements compositions
string         itracker.fillMaterial    = "ITGasMix";

// Field wires description
int    itracker.nFieldWireShells =      2;
vector<string> itracker.fieldWireMaterials = { "CarbonFiber", "G4_Ag" };
//vector<double> itracker.fieldWireShellsThicknesses = { 0.033, 0.001 };
vector<double> itracker.fieldWireShellsThicknesses = { 0.0795, 0.0005 };

// Sense wires description
int    itracker.nSenseWireShells =      2;
vector<string> itracker.senseWireMaterials = { "CarbonFiber", "G4_Ag" };
//vector<double> itracker.senseWireShellsThicknesses = { 0.033, 0.001 };
vector<double> itracker.senseWireShellsThicknesses = { 0.0145, 0.0005 };

// Inner Wall description
//int    itracker.nInnerWallShells =      4;
//vector<string> itracker.innerWallMaterials = { "CarbonFiber", "PolypropyleneFoam", "CarbonFiber" , "G4_Cu" };
//vector<double> itracker.innerWallShellsThicknesses = { 0.125, 0.48, 0.125, 0.002 };
int    itracker.nInnerWallShells =      1;
vector<string> itracker.innerWallMaterials = { "CarbonFiber"};
vector<double> itracker.innerWallShellsThicknesses = { 1.0 };

// Outer Wall description
int    itracker.nOuterWallShells =      2;
vector<string> itracker.outerWallMaterials = { "G4_Cu" , "CarbonFiber" };
vector<double> itracker.outerWallShellsThicknesses = { 0.002, 10.0 };

// End Cap description
int    itracker.nEndCapWallShells =     2;
vector<string> itracker.endcapWallMaterials = { "CarbonFiber", "G4_Cu" };
vector<double> itracker.endcapWallShellsThicknesses = { 0.002, 5.0 };

// Describe dummy tracker that is just one big G4TUBS.
double dummytracker.rIn        =     0.;
double dummytracker.rOut       =   800.;
double dummytracker.halfLength =  1300.;
double dummytracker.z0         = 10200.;
string dummytracker.material   = "WAGVacuum";

// Describe dummy stopping target that is just one big G4TUBS.
double dummyStoppingTarget.rIn        =     0.;
double dummyStoppingTarget.rOut       =   100.;
double dummyStoppingTarget.halfLength =   400.;
double dummyStoppingTarget.z0         =  5900.;
string dummyStoppingTarget.material   = "WAGVacuum";

// TTracker
int    ttracker.numDevices         =   54;
int    ttracker.sectorsPerDevice   =    4;
int    ttracker.layersPerSector    =    1;
int    ttracker.manifoldsPerEnd    =    4;
int    ttracker.strawsPerManifold  =   16;
int    ttracker.rotationPattern    =    0;

double ttracker.z0                   = 10200.0;
double ttracker.envelopeInnerRadius  =   380.0;
double ttracker.strawOuterRadius     =     2.5;
double ttracker.strawWallThickness   =     0.015;
double ttracker.deviceSeparation     =    57.;
double ttracker.deviceRotation       =    60.;
double ttracker.outerSupportRadius   =   830.0;
double ttracker.innerSupportRadius   =   700.0;
double ttracker.supportHalfThickness =    10.0;
double ttracker.wireRadius           =     0.0125;
double ttracker.manifoldYOffset      =    10.;

vector<double> ttracker.manifoldHalfLengths  = { 40.0, 35.0, 5.25};
vector<string> ttracker.strawMaterials       = { "Kapton", "StrawGas", "G4_W" };

string ttracker.mat.vacuum    = "WAGVacuum";
string ttracker.mat.strawgas  = "StrawGas";
string ttracker.mat.strawwall = "Kapton";
string ttracker.mat.wire      = "G4_W";
string ttracker.mat.manifold  = "G4_Al";
string ttracker.mat.support   = "CarbonFiber";

// Debug control for TTracker; uncomment to make only a selected sector.
//int    ttracker.devDraw  =  -1;
//int    ttracker.secDraw  =  -1;

//
double tracker.rMagnet       = 850.; 

//
// Describe targets.  
//

// material around the targets
string         target.fillMaterial    = "WAGVacuum";

// All dimensions in mm in the detector coordinate system.
// (0,0,0) = on axis in the DS at z=12000. mm
double target.z0             = -6100.0;
double target.deltaZ         =    50.0;

// all radii must be specified, i.e., nFoils is determined from the size 
// of the radii vector.
vector<double> target.radii  = 
    { 100.000, 82.168, 81.288, 80.378, 79.438,
       78.467, 77.463, 76.425, 75.352, 74.241,
       73.093, 71.904, 70.674, 69.401, 68.082,
       66.716, 65.300 };

// last material given will be repeated up to number radii.size()
vector<string> target.materials =
    { "G4_Al"};

// Variation of locations of foil centers 
// z: variations from equal spacings according to z0 and deltaZ
// last will be repeated...
vector<double> target.zVars  =    
    { 0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0.,
      0., 0., 0., 0., 0.,
      0., 0. };

// x: relative to beam axis
// last will be repeated...
vector<double> target.xVars  =    
    { 0.};

// y: relative to beam axis
// last will be repeated...
vector<double> target.yVars  =    
    { 0. };

// last thickness given will be repeated up to number radii.size()
vector<double> target.halfThicknesses  =    
    {0.1};

// last x directional cosine given will be repeated up to number radii.size()
vector<double> target.xCos  =    
    { 0.};

// last y directional cosine given will be repeated up to number radii.size()
vector<double> target.yCos  =    
    { 0.};

// Crystal calorimeter - MECO style.
double calorimeter.innerRadius  = 360.;
double calorimeter.outerRadius  = 720.;
double calorimeter.halfLength   = 770.;
string calorimeter.fillMaterial = "WAGVacuum";
double calorimeter.z0           = 12700.;


// calorimeter 
int    calorimeter.numberOfVanes                           =  4;
double calorimeter.crystalHalfTrans                        = 15.; 
double calorimeter.crystalHalfLong                         = 60.;
int    calorimeter.nCrystalRSlices                         =  2;
int    calorimeter.nCrystalZSlices                         =  2;
vector<double> calorimeter.calorimeterCenter               = {0.,0.,12700.};
vector<double> calorimeter.calorimeterCenterOffset         = {0.,0.,0.};
double calorimeter.rInscribed                              = 360.;
double calorimeter.phi0                                    =  0.;
double calorimeter.theta0                                  =  0.;
vector<double> calorimeter.calorimeterVaneRotationsPhi     = {0.,0.,0.,0.};
vector<double> calorimeter.calorimeterVaneRotationsTheta   = {0.,0.,0.,0.};
vector<double> calorimeter.calorimeterVaneRotationsPsi     = {0.,0.,0.,0.};
vector<double> calorimeter.calorimeterVaneOffsetsX         = {0.,0.,0.,0.};
vector<double> calorimeter.calorimeterVaneOffsetsY         = {0.,0.,0.,0.};
vector<double> calorimeter.calorimeterVaneOffsetsZ         = {0.,0.,0.,0.};
string calorimeter.crystalMaterial                         = "G4_PbWO4";
string calorimeter.crystalWrapper                          = "G4_POLYETHYLENE"; // until I get around to defining Tyvek with Ti02.
double calorimeter.crystalWrapperHalfThickness             = 0.01 ;             // totally made up


//
//
// End notes:
// 
// 1) Sources of information:
//    
//
//
// This tells emacs to view this file in c++ mode.
// Local Variables:
// mode:c++
// End:
