//
// Geometry description for the Mu2e detector and hall. 
// See Mu2e-doc-???? for details.
//
// $Id: geom_01.txt,v 1.1 2009/09/30 22:57:47 kutschke Exp $
// $Author: kutschke $
// $Date: 2009/09/30 22:57:47 $
//
// Original author Rob Kutschke

string detector.name  = "g4geom_v00";

//
// Warning:  do not write 10000. as 10,000.; it will be read as two numbers (10., 0.).

bool hasHall     = true;
bool hasTarget   = true;
bool hasLTracker = true;

// Control graphics: null string or absent means no graphics.
string graphics.macrofile = "Mu2eG4/test/visxy.mac";

// Print a copy of this file to the job log.
bool printConfig = false;

// Tell G4 to load these predefined elements.
vector<string> g4.elements =
  { "H",  "He", "C",  "N",  "O",  "F", "Na", "Al", "Si", "Ar",
    "Ca", "Ti", "Fe", "Cu", "Ta", "W", "Pt", "Au", "Pb" };
 
// Tell G4 to load these predefined materials.
vector<string> g4.materials =
  { "G4_H",     "G4_He",  "G4_C",  "G4_N",  "G4_O", 
    "G4_F",     "G4_Na",  "G4_Al", "G4_Si", "G4_Ar",
    "G4_Ca",    "G4_Ti",  "G4_Fe", "G4_Cu", "G4_Ta",
    "G4_W",     "G4_Pt",  "G4_Au", "G4_Pb", "G4_WATER",
    "G4_PbWO4", "G4_AIR"
  };

// Load other materials defined specifically for Mu2e.
vector<string> mu2e.materials =
  { "ShieldingConcrete", "Polyethylene", "IsoButane", "StrawGas", 
    "Kapton", "Scintillator", "WAGVacuum", "MBOverburden" };

// Control printout of element and material lists.
bool g4.printElements  = false;
bool g4.printMaterials = false;

// Half lengths of the world box, (x,y,z) in mm.
vector<double> world.halfLengths = { 20000., 10000., 20000.};
string         world.materialName = "G4_AIR";

// Position of the origin of the Mu2e origin system at the 
//  x: mid-point between TSu and TSd.
//  y: given as height above the floor
//  z: offset from the world origin.
double world.mu2eOrigin.xoffset =     0.;
double world.mu2eOrigin.height  =  2350.;
double world.mu2eOrigin.zoffset = -4000.;

double world.prodSolXoff = 3904.;

// Overburden above the detector: 20 ft in proposal.
// I have arbitrarily split it into a flat part and a dome.
double dirt.overburdenDepth = 4000.;  
double dirt.capHalfHeight   = 1500.;
double dirt.capBottomRadius = 6000.;
double dirt.capTopRadius    = 1000.;
string dirt.overburdenMaterialName = "MBOverburden";

// Inside dimensions of the hall.  Order is: (x,y,z) = width, height, length.
// Thicknesses of the hall walls.
vector<double> hall.insideHalfLengths = { 7775., 5000., 16000.};
double hall.floorThick   = 300.;
double hall.ceilingThick = 300.;
double hall.wallThick    = 300.;
string hall.wallMaterialName = "G4_CONCRETE";
string hall.insideMaterialName = "G4_AIR";

// Offset of the hall from its standard position within the world:
//   - Centered in x and z.
//   - At the bottom in y.
vector<double> hall.offset = { -1525., 0., 0. };

// Concrete shielding 
double shieldCon.xspace             = 1300.;
double shieldCon.insideHeight       = 5050.;
double shieldCon.Thick              = 1000.;
double shieldCon.insideHalfLength   = 7735.;
string shieldCon.materialName       = "ShieldingConcrete";
string shieldCon.insideMaterialName = "G4_AIR";

// The iron Cosmic Ray shield.
double shieldFe.thick              =  508.;
double shieldFe.outerHalfWidth     = 2048.;
double shieldFe.zextra             = 1000.;
string shieldFe.materialName       = "G4_Fe";
string shieldFe.insideMaterialName = "G4_AIR";

// A toy model of the DS, coils cryo and vacuum.
//  - it is centered on the cosmic ray shield in (x,y).
//  - middle of the volume is at z0, expressed in MECO system.
double toyDS.rOut          = 1000;
double toyDS.rIn           = 1300;
double toyDS.halfLength    = 5940.;
double toyDS.halfLengthVac = 6000.;
double toyDS.z0            = 9229.;
string toyDS.materialName       = "G4_Al";
string toyDS.insideMaterialName = "WAGVacuum";

// Use a uniform magnetic field with the DS volume.
double toyDS.bz            = -1.0;

// A toy model of the PS, coils, cryo and vaccum.
double toyPS.rOut          =  1300.;
double toyPS.rIn           =   880.;
double toyPS.halfLength    =  2580.;
double toyPS.halfLengthVac =  2700.;
double toyPS.z0            = -6529.;
string toyPS.materialName       = "G4_Al";
string toyPS.insideMaterialName = "WAGVacuum";

// LTracker: Positioning infor is relative to DS.
int    ltracker.nSides           =     8;
double ltracker.r0               =   388.48435399; // Lengths in mm
double ltracker.z0               = 10200.;
double ltracker.zHalfLength      =  1300.0;
double ltracker.rOut             =   870.0;
double ltracker.rStrawOut        =     2.5; 
double ltracker.phi0             =     0.0;    // radians
double ltracker.tilt             =     0.015;  // radians
double ltracker.strawThickness   =     0.025;  // mm
double ltracker.rWire            =     0.010;
double ltracker.carbonThick      =     1.e-4;  // 100 nm

vector<int> ltracker.nStrawsSide   = { 63, 64, 65 };
vector<int> ltracker.nStrawsVane   = { 51, 50, 51 };
vector<double> ltracker.vaneOffset = { 572., 10., 0.};  // mm

double tracker.rMagnet       = 850.; 

// Materials in the two types of straws; the same for now.
string         ltracker.fillMaterial    = "WAGVacuum";
vector<string> ltracker.strawMaterials0 = { "Kapton", "StrawGas", "G4_W" };
vector<string> ltracker.strawMaterials1 = { "Kapton", "StrawGas", "G4_W" };


// Tubs parameters of assembly volume for the full LTracker.
//    ( z halfLength, r Inner, r Outer )
// I should really compute this from the above info.
vector<double> ltracker.tubs     = { 1400., 380., 750. };

// Describe targets.  
// All dimensions in mm in the detector coordinate system.
// (0,0,0) = on axis in the DS at z=12000. mm
double target.z0             = -6100.0;
double target.deltaZ         =    50.0;
double target.halfThickness  =     0.1;
vector<double> target.radii  = 
    { 100.000, 82.168, 81.288, 80.378, 79.438,
       78.467, 77.463, 76.425, 75.352, 74.241,
       73.093, 71.904, 70.674, 69.401, 68.082,
       66.716, 65.300 };

//
//
// End notes:
// 
// 1) Sources of information:
//    
//
//
