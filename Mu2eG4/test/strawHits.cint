//
// Root script to test MakeStrawHit_module
// 
// $Id: strawHits.cint,v 1.1 2012/08/22 22:22:34 genser Exp $
// $Author: genser $
// $Date: 2012/08/22 22:22:34 $
// 
// Original author KLG based on Rob Kutschke's example
//
// 1) Retrieve histograms and ntuples from the file that was created
//    by mixExample01.fcl
//
// 2) Draw the histograms to the screen (called a canvas).
//
// 3) Split a canvas into multiple pads and draw a different histogram
//    in each pad.
//
// 4) Save the canvas in a format suitable for printing ( postscript )
//    or in a format suitable for inclusion in other documents
//    ( png, jpg, gif ).
//

{

  // With this you can reinvoke the script without exiting root.
  gROOT->Reset();

  // Get rid of grey background (ugly for print out).
  gROOT->SetStyle("Plain");

  // Statistics box for histograms should include all of:
  // number of Entries, Mean, Rms, Underflows, Overflows
  gStyle->SetOptStat("emruo");

  // Base name of input file and of all plot files.
  TString basename("strawHits_01");

  // Open the input file that contains histograms and ntuples
  // made by Read

  const int nfiles = 6;
  TFile* file[nfiles];

  file[0] = new TFile("mixExample01_2000_before_xtalk_off.root");
  file[1] = new TFile("mixExample01_2000_after_xtalk_off_e2a_off.root");
  file[2] = new TFile("mixExample01_2000_after_xtalk_on2p_e2a_off.root");
  file[3] = new TFile("mixExample01_2000_after_xtalk_off_e2a_on.root");
  file[4] = new TFile("mixExample01_2000_after_xtalk_on2p_e2a_on.root");
  file[5] = new TFile("mixExample01_2000_after_xtalk_on1p_e2a_on.root");

  // Name of the output pdf file.
  // Postscript is the only graphics format for which root supports multi-page output files.
  TString psfile( basename + ".pdf");

  TH1F* _hHitTime[nfiles];      
  TH1F* _hHitDeltaTime[nfiles]; 
  TH1F* _hHitAmplitude[nfiles]; 
  TH1F* _hHitEnergy[nfiles];    
  TH1F* _hNHits[nfiles];        
  TH1F* _hNHitsPerWire[nfiles]; 
  TH1F* _hDriftTime[nfiles];    
  TH1F* _hDriftDistance[nfiles];
  TH1F* _hDistanceToMid[nfiles];
  TH1F* _hNG4Steps[nfiles];     
  TH1F* _hG4StepLength[nfiles]; 
  TH1F* _hG4StepEdep[nfiles];   

  for (int ii=0; ii!=nfiles; ++ii) {
    file[ii]->GetObject("readStrawHits/hHitTime",       _hHitTime[ii]);
    file[ii]->GetObject("readStrawHits/hHitDeltaTime",  _hHitDeltaTime[ii]);
    file[ii]->GetObject("readStrawHits/hHitAmplitude",  _hHitAmplitude[ii]);
    file[ii]->GetObject("readStrawHits/hHitEnergy",     _hHitEnergy[ii]);
    file[ii]->GetObject("readStrawHits/hNHits",         _hNHits[ii]);
    file[ii]->GetObject("readStrawHits/hNHitsPerWire",  _hNHitsPerWire[ii]);
    file[ii]->GetObject("readStrawHits/hDriftTime",     _hDriftTime[ii]);
    file[ii]->GetObject("readStrawHits/hDriftDistance", _hDriftDistance[ii]);
    file[ii]->GetObject("readStrawHits/hDistanceToMid", _hDistanceToMid[ii]);
    file[ii]->GetObject("readStrawHits/hNG4Steps",      _hNG4Steps[ii]);
    file[ii]->GetObject("readStrawHits/hG4StepLength",  _hG4StepLength[ii]);
    file[ii]->GetObject("readStrawHits/hG4StepEdep",    _hG4StepEdep[ii]);
  }

  const int nplots = 12;

  // Get a pointer to the ntuple.
  // TNtuple* nt; file]->GetObject("readStrawHit/ntup",nt);

  // Open a new canvas on the screen.
  // The last two arguments are the size of the window.
  TCanvas *canvas = new TCanvas("c", "Plots from " + basename, 900, 900 );

  // Open a multi-page output pdf file .
  canvas->Print( psfile+"[");

  // Split the canvas into 6 pads.
  canvas->Divide(2,3);

  // Draw some histograms, one per pad.
  // cd(n): move to graphics pad number "n".
  // "H9": draw outline histogram ("H") in high resolution mode (9)

  for (int ii=0; ii!=nfiles; ++ii) {
    canvas->cd(ii+1); _hHitTime[ii]->Draw("H9");
  }

  // Flush page to screen
  canvas->Update();

  // Add this canvas to the pdf file.
  canvas->Print(psfile);

  // Prompt and wait for response before continuing.
  cerr << "Double click in the last active pad to continue: " ;
  gPad->WaitPrimitive();
  cerr << endl;

  // Clear canvas in preparation for next page.
  canvas->cd(0);
  canvas->Clear();
  canvas->Divide(2,3);

  for (int ii=0; ii!=nfiles; ++ii) {
    canvas->cd(ii+1); _hHitDeltaTime[ii]->Draw("H9");
  }

  // Flush page to screen
  canvas->Update();

  // Add this canvas to the pdf file.
  canvas->Print(psfile);

  // Prompt and wait for response before continuing.
  cerr << "Double click in the last active pad to continue: " ;
  gPad->WaitPrimitive();
  cerr << endl;

  // Clear canvas in preparation for next page.
  canvas->cd(0);
  canvas->Clear();
  canvas->Divide(2,3);

  for (int ii=0; ii!=nfiles; ++ii) {
    canvas->cd(ii+1); _hHitEnergy[ii]->Draw("H9");
  }
  // Flush page to screen
  canvas->Update();

  // Add this canvas to the pdf file.
  canvas->Print(psfile);

  // Prompt and wait for response before continuing.
  cerr << "Double click in the last active pad to continue: " ;
  gPad->WaitPrimitive();
  cerr << endl;

  // Clear canvas in preparation for next page.
  canvas->cd(0);
  canvas->Clear();
  canvas->Divide(2,3);

  for (int ii=0; ii!=nfiles; ++ii) {
    canvas->cd(ii+1); _hNHits[ii]->Draw("H9");
  }

  // Flush page to screen
  canvas->Update();

  // Add this canvas to the pdf file.
  canvas->Print(psfile);

  // Prompt and wait for response before continuing.
  cerr << "Double click in the last active pad to continue: " ;
  gPad->WaitPrimitive();
  cerr << endl;

  // Clear canvas in preparation for next page.
  canvas->cd(0);
  canvas->Clear();
  canvas->Divide(2,3);

  for (int ii=0; ii!=nfiles; ++ii) {
    canvas->cd(ii+1); _hNHitsPerWire[ii]->Draw("H9");
  }

  // Flush page to screen
  canvas->Update();

  // Add this canvas to the pdf file.
  canvas->Print(psfile);

  // Prompt and wait for response before continuing.
  cerr << "Double click in the last active pad to continue: " ;
  gPad->WaitPrimitive();
  cerr << endl;

  // Clear canvas in preparation for next page.
  canvas->cd(0);
  canvas->Clear();
  canvas->Divide(2,3);

  for (int ii=0; ii!=nfiles; ++ii) {
    canvas->cd(ii+1); _hDriftTime[ii]->Draw("H9");
  }

  // Flush page to screen
  canvas->Update();

  // Add this canvas to the pdf file.
  canvas->Print(psfile);

  // Prompt and wait for response before continuing.
  cerr << "Double click in the last active pad to continue: " ;
  gPad->WaitPrimitive();
  cerr << endl;

  // Clear canvas in preparation for next page.
  canvas->cd(0);
  canvas->Clear();
  canvas->Divide(2,3);

  for (int ii=0; ii!=nfiles; ++ii) {
    canvas->cd(ii+1); _hDriftDistance[ii]->Draw("H9");
  }
  // Flush page to screen
  canvas->Update();

  // Add this canvas to the pdf file.
  canvas->Print(psfile);

  // Prompt and wait for response before continuing.
  cerr << "Double click in the last active pad to continue: " ;
  gPad->WaitPrimitive();
  cerr << endl;

  // Clear canvas in preparation for next page.
  canvas->cd(0);
  canvas->Clear();
  canvas->Divide(2,3);

  for (int ii=0; ii!=nfiles; ++ii) {
    canvas->cd(ii+1); _hDistanceToMid[ii]->Draw("H9");
  }

  // Flush page to screen
  canvas->Update();

  // Add this canvas to the pdf file.
  canvas->Print(psfile);

  // Prompt and wait for response before continuing.
  cerr << "Double click in the last active pad to continue: " ;
  gPad->WaitPrimitive();
  cerr << endl;

  // Clear canvas in preparation for next page.
  canvas->cd(0);
  canvas->Clear();
  canvas->Divide(2,3);

  for (int ii=0; ii!=nfiles; ++ii) {
    canvas->cd(ii+1); _hNG4Steps[ii]->Draw("H9");
  }
  // Flush page to screen
  canvas->Update();

  // Add this canvas to the pdf file.
  canvas->Print(psfile);

  // Prompt and wait for response before continuing.
  cerr << "Double click in the last active pad to continue: " ;
  gPad->WaitPrimitive();
  cerr << endl;

  // Clear canvas in preparation for next page.
  canvas->cd(0);
  canvas->Clear();
  canvas->Divide(2,3);

  for (int ii=0; ii!=nfiles; ++ii) {
    canvas->cd(ii+1); _hG4StepLength[ii]->Draw("H9");
  }
  // Flush page to screen
  canvas->Update();

  // Add this canvas to the pdf file.
  canvas->Print(psfile);

  // Prompt and wait for response before continuing.
  cerr << "Double click in the last active pad to continue: " ;
  gPad->WaitPrimitive();
  cerr << endl;

  // Clear canvas in preparation for next page.
  canvas->cd(0);
  canvas->Clear();
  canvas->Divide(2,3);

  for (int ii=0; ii!=nfiles; ++ii) {
    canvas->cd(ii+1); _hG4StepEdep[ii]->Draw("H9");
  }

  // Flush page to screen
  canvas->Update();

  // Add this canvas to the pdf file.
  canvas->Print(psfile);

  // Prompt and wait for response before continuing.
  cerr << "Double click in the last active pad to save/close the graphics file " ;
  gPad->WaitPrimitive();
  cerr << endl;

  // Uncomment this line to save this canvas as a png file (slow)
  //canvas->Print( basename + "_1.png" );

  // Close the pdf file.
  canvas->Print(psfile+"]");

}
// This tells emacs to view this file in c++ mode.
// Local Variables:
// mode:c++
// End:
