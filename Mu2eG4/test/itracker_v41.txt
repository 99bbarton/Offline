//
// Warning:  do not write 10000. as 10,000.; it will be read as two numbers (10., 0.).

bool hasITracker      = true;

string itracker.extFile          =    "";   //"ITrackerGeom/ITrackerGeom.gdml";
string itracker.extWireFile      =    "";   //"ITrackerGeom/ITrackerWireData.root";
double itracker.r0               =  379.559800638;   //To be consistent check that is = nSWire*cellDimension/2pi -cellDimension/2 -InnerWall_thickness -fieldWireDiameter -1.0e-2 -1.0e-3  // Lengths in mm
double itracker.z0               =10200.0;
double itracker.zHalfLength      = 1000.0;   //1300.0;
double itracker.rOut             =  745.0;   //must be greater than the radius of the outer most filed wire +fieldWireDiameter +OuterWall_thickness
double itracker.drop             =   15.0;

int    itracker.geomType         =    41;   //decimal digit:magior version, unit digit:minor version  20:Hexagonal, 30:Square with constant cell dimension, 
                                            //                                         31:Like 30 but with base fw in both directions and shared between two consecutive layers, and layers staggered
                                            //                                         41:Like 31 but with cell dimension that increases with radius
int    itracker.endCapType       =     0;   //EndCap shape type: 0 plane, 1 spherical
double itracker.voxelization     =     0;   //Choose voxelization method for the gas volumes that contain wires, negative: default computation, 0: voxelization off, positive: smartless value
bool   itracker.displayGasLayer  = false;   //Allow to display the gas inside the chamber. It is recommended to switch on it only for debug, it makes the display slow.
bool   itracker.displayWires     = false;   //Allow to display every wires inside gas inside the chamber. It is recommended to switch on it only for debug, it makes the display very slow.


// Cell parameter needed only for the square cell case

int    itracker.nSWire           =   408;
double itracker.cellDimension    =   6.0;  //of the innermost layer
int    itracker.nLayer           =    38;
int    itracker.nVerticalFWire   =     1;
int    itracker.StoFWireRation   =     5;


// Materials and elements compositions
string         itracker.fillMaterial    = "ITGasHe_90Isob_10"; //"ITGasMix";
//string         itracker.fillMaterial    = "WAGVacuum";

bool   itracker.usePhysicalStep  =  false; //Use the physical calculation of the path length, if false a fixed step distance is used by using the freePath variable 
double itracker.freePath         =    1.0; // free Path length in mm
bool   itracker.changeMSC        =   true;

// Field wires description
int    itracker.nFieldWireShells =      2;
vector<string> itracker.fieldWireMaterials = { "G4_Al", "G4_Ag" };
//vector<string> itracker.fieldWireMaterials = { "WAGVacuum", "WAGVacuum" };
vector<double> itracker.fieldWireShellsThicknesses = { 0.0194, 0.0006 };

// Sense wires description
int    itracker.nSenseWireShells =      2;
vector<string> itracker.senseWireMaterials = { "G4_Mo", "G4_Ag" };
//vector<string> itracker.senseWireMaterials = { "WAGVacuum", "WAGVacuum" };
vector<double> itracker.senseWireShellsThicknesses = { 0.0097, 0.0003 };

// Inner Wall description
int    itracker.nInnerWallShells =      4;
vector<string> itracker.innerWallMaterials = { "CarbonFiber", "CFoam_080", "CarbonFiber" , "G4_Cu" };
//vector<string> itracker.innerWallMaterials = { "WAGVacuum", "WAGVacuum", "WAGVacuum" , "WAGVacuum" };
vector<double> itracker.innerWallShellsThicknesses = { 0.120, 6.760, 0.120, 0.0005 };

// Outer Wall description
int    itracker.nOuterWallShells =      2;
vector<string> itracker.outerWallMaterials = { "G4_Cu" , "CarbonFiber" };
vector<double> itracker.outerWallShellsThicknesses = { 0.001, 10.0 };

// End Cap description
int    itracker.nEndCapWallShells =     4;
int    itracker.structShellsAreLast = 2;  //Which shells of the endcap wall shells vector are the structural ones
vector<string> itracker.endcapWallMaterials = { "CarbonFiber", "ITGasHe_90Isob_10", "G4_Cu", "CarbonFiber" };
vector<double> itracker.endcapWallShellsThicknesses = { 0.300, 100.000, 0.001, 0.240 };

//
// This tells emacs to view this file in c++ mode.
// Local Variables:
// mode:c++
// End:
