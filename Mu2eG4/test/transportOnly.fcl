# Variant of g4test_03 but with transport only.
#
#
# $Id: transportOnly.fcl,v 1.10 2012/02/24 21:34:21 genser Exp $
# $Author: genser $
# $Date: 2012/02/24 21:34:21 $

#include "minimalMessageService.fcl"
#include "standardProducers.fcl"
#include "standardServices.fcl"

# Give this job a name.
process_name : transportOnly

# Start form an empty source
source : {
  module_type : EmptyEvent
  maxEvents : 100
}

services : {

  message               : @local::default_message
  TFileService          : { fileName : "transportOnly.root" }
  RandomNumberGenerator : { }


# Uncomment to enable memory use profiling
# SimpleMemoryCheck :
# {
#   oncePerEventMode : false
#   showMallocInfo   : false
#   ignoreTotal      : 5
# }
#
# Uncomment to enable per module timing
#   Timing :
#   {
#    useJobReport : true
#   }

# Uncomment to enable trace printout to show what the framework calls when.
#  scheduler: { wantTracer : true }


  user : {
    GeometryService   : { inputFile      : "Mu2eG4/test/transportOnlyGeom.txt" }
    ConditionsService : { conditionsfile : "Mu2eG4/test/conditions_01.txt"  }
    G4Helper          : { }
    SeedService       : @local::automaticSeeds
  }

}

physics : {

  producers:  {

    # Generate Event
    generate:
    {
      module_type   : EventGenerator
      inputfile     : "Mu2eG4/test/genconfig_tonly.txt"
    }

    # Run G4 and add its output to the event
    g4run :
    {
      module_type          : G4
      diagLevel            : 1
      generatorModuleLabel : generate
#      visMacro             : "Mu2eG4/test/visxy.mac"
#      visMacro             : "Mu2eG4/test/visxz.mac"
#      visMacro             : "Mu2eG4/test/visyz.mac"
#      visMacro             : "Mu2eG4/test/vis45.mac"
#      visMacro             : "Mu2eG4/test/visTree.mac"
    }

    # Form StrawHits (SH).
    makeSH : @local::makeSH

    # Form CaloHits (APD hits)
    CaloReadoutHitsMaker : @local::CaloReadoutHitsMaker

    # Form CaloCrystalHits (reconstruct crystals from APDs)
    CaloCrystalHitsMaker : @local::CaloCrystalHitsMaker

    # Save state of the random number engines.
    randomsaver : @local::randomsaver

  }


  analyzers: {

    checkhits: {
      module_type          : ReadBack
      generatorModuleLabel : generate
      g4ModuleLabel        : g4run
      diagLevel            : 0
      minimumEnergy        : 0.000
      maxFullPrint         : 201
    }

    # Look at the hits from TTrackerDeviceSupport Sensitive Detectors
    checksdd: {
      module_type          : ReadTTrackerDSDetectors
      diagLevel            : 0
      hitMakerModuleLabel  : g4run
      sddStepPoints        : ttrackerDS
      maxFullPrint         : 201
    }
    # Look at the hits from virtualdetectors
    readvd: {
      module_type      : ReadVirtualDetector
      vdStepPoints     : virtualdetector
      savePDG          : [13 , -211]
      maxPrint         : 200
    }

  }

  p1 : [generate , g4run , makeSH, CaloReadoutHitsMaker, CaloCrystalHitsMaker, randomsaver]
  e1 : [checkhits, checksdd, readvd, outfile]

  trigger_paths  : [p1]
  end_paths      : [e1]

}

outputs:  {

  outfile : {
    module_type   :   RootOutput
    fileName      :   "data_06.root"
    outputCommands:   [ "keep *_*_*_*"
#                       "drop mu2eSimParticles_*_*_*" # Uncomment this line to reduce file size.
                      ]
  }

}

// Initialze seeding of random engines: do not put these lines in base .fcl files for grid jobs.
services.user.SeedService.baseSeed         :  0
services.user.SeedService.maxUniqueEngines :  20

// Enable diagnsotic printout for pedagogical purposes.
physics.producers.makeSH.diagLevel : 0
physics.producers.makeSH.maxFullPrint : 5
physics.producers.CaloReadoutHitsMaker.diagLevel : 0
physics.producers.CaloReadoutHitsMaker.maxFullPrint : 201
physics.producers.CaloCrystalHitsMaker.diagLevel : 0
physics.producers.CaloCrystalHitsMaker.maxFullPrint : 201
