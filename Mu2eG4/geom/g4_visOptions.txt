// FIXME: work in progress.  As Mu2eG4_module control parameters are
// migrated from SimpleConfig to fcl they will be moved from this
// file into g4_userOptions.txt

//-----------------------
// Physics lists
//-----------------------
string g4.physicsListName = "Shielding_MU2E01";
double g4.minRangeCut     = 0.01;  // mm

bool   g4.printPhysicsProcessSummary = false;

//-----------------------
// Surface checker
//-----------------------

// invoke volume overlap check where enabled (draws random numbers)
bool g4.doSurfaceCheck = false;
vector<string> g4.doSurfaceCheck.drop  = {};
vector<string> g4.doSurfaceCheck.keep  = {};
vector<string> g4.doSurfaceCheck.order = { "g4.doSurfaceCheck.drop",
                                           "g4.doSurfaceCheck.keep" };

// number of random points on the volume surface
int  g4.nSurfaceCheckPointsPercmsq =   1;
int  g4.minSurfaceCheckPoints      = 100; // per volume
int  g4.maxSurfaceCheckPoints = 10000000; // per volume

//-----------------------
// Other options
//-----------------------

bool g4.isSolid   = false;
vector<string> g4.isSolid.drop  = {};
vector<string> g4.isSolid.keep  = {};
vector<string> g4.isSolid.order = { "g4.isSolid.drop",
                                    "g4.isSolid.keep" };

bool g4.isVisible = true;
vector<string> g4.isVisible.drop  = {};
vector<string> g4.isVisible.keep  = {};
vector<string> g4.isVisible.order = { "g4.isVisible.drop",
                                      "g4.isVisible.keep" };

bool g4.placePV   = true;
vector<string> g4.placePV.drop  = {};
vector<string> g4.placePV.keep  = {};
vector<string> g4.placePV.order = { "g4.placePV.drop",
                                    "g4.placePV.keep" };
bool g4.forceAuxEdgeVisible = true;
vector<string> g4.forceAuxEdgeVisible.drop  = {};
vector<string> g4.forceAuxEdgeVisible.keep  = {};
vector<string> g4.forceAuxEdgeVisible.order = { "g4.forceAuxEdgeVisible.drop",
                                                "g4.forceAuxEdgeVisible.keep" };

// Uncomment to enable debug printout on a per event or per track basis.
//vector<int> g4.steppingActionEventList = { 0, 1 };
//vector<int> g4.steppingActionTrackList = { 1 };
//vector<int> g4.strawSDEventList        = { 0, 1, 2, 3 };
//vector<int> g4.itgaslayerSDEventList   = { 0, 1, 2, 3 };
//vector<int> g4.trackingActionEventList = { 0, 1, 2, 3, 4, 5};

// Uncomment to suppress TrackingAction track end timing printout
//bool g4.printTrackTiming = false;

// Some G4 controls which does not allow it to consume all the memory
// or to spend all the time tracking one bad particle
int g4.particlesSizeLimit = 100000;

// Enable saving of trajectories for G4 graphics on a per track basis.
// Only save trajectories for tracks with momentum above this cut.
double g4.saveTrajectoryMomentumCut = 50.;

// Control saving of PointTrajectory information - deprecated.
int    g4.pointTrajectoryMinSteps    =  5;

// Control saving of MCTrajectory information - replacement for PointTrajectory
double g4.mcTrajectoryMomentumCut = 50.;
int    g4.mcTrajectoryMinSteps    =  5;

// Do not stack neutrinos
vector<int> g4.stackingActionDropPDG = { 12, -12, 14, -14, 16, -16 };

// current G4 stepper choices are shown below, extend Mu2eWorld.cc if more are needed
// G4ClassicalRK4
// G4ImplicitEuler
// G4ExplicitEuler
// G4SimpleRunge
// G4SimpleHeum
// G4HelixImplicitEuler
// G4HelixSimpleRunge
string g4.stepper = "G4ClassicalRK4";

// Enable the Mu2e written version of the decay of muonic atoms.
bool g4.doMuMinusConversionAtRest = false;

// Define the value of B(pi-> e nu).
// The allowed values are: { PDG, All, None, nnnnnn } where nnnnnn is any numerical value in the range [0,1]
string g4.PiENuPolicy          = PDG;
int    g4.PiENuPolicyVerbosity = 0;

// List of PDG ids of particles for which to switch off decay.
vector<int> g4.noDecay = {};

// Control printout of element and material lists.
bool g4.printElements  = false;
bool g4.printMaterials = false;

// make detector volume structure visible where enabled
bool g4.forceAuxEdgeVisible = true;

//
//
// End notes:
//
// 1) Sources of information:
//
//
//
// This tells emacs to view this file in c++ mode.
// Local Variables:
// mode:c++
// End:
