#
# Read Tracker digis and run the track trigger prototype 
#
#  > mu2e --config TrkFilters/fcl/ReadDigis.fcl --source "your digis file" --TFile ReadDigis.root --nevts=100
#
#include "fcl/minimalMessageService.fcl"
#include "fcl/standardProducers.fcl"
#include "fcl/standardServices.fcl"
#include "TrkFilters/fcl/prolog.fcl"
#include "TrkDiag/fcl/prolog.fcl"

process_name : ReadDigis

source :
{
  module_type : RootInput
}
# we don't need any simulation services for this job
services : @local::Services.Reco
# timing information
services.TimeTracker : {
  dbOutput : {
    filename : "ReadDigis.db"
    overwrite : true
    }
}
# setup modules needed to filter tracks
physics :
{
  producers : {
    @table::Tracking.TrkTrigger.producers
  }
  filters : {
    @table::Tracking.filters
  }
  analyzers : {
    TrkTriggerDiag : {
      module_type : TrkTriggerDiag
    }
  }
}

# overwrite some defaults for trigger
physics.producers.HelixFinder.UpdateStereoHits : false
physics.producers.HelixFinder.UseHitMVA : false
# create a trigger test path.  Note that physics.trigger_paths and physics.end_paths are not used, art will
# create those automatically from all the defined paths

physics.TCTrigPath : [ @sequence::Tracking.Trigger.TCFilterSequence ]

physics.PHTrigPath : [ @sequence::Tracking.Trigger.PosHelixFilterSequence ]

physics.DeMSeedTrigPath : [ @sequence::Tracking.Trigger.DeMSeedFilterSequence ]

#physics.DeMKalTrigPath : [ @sequence::Tracking.Trigger.DeMKalFilterSequence ]
physics.UeMSeedTrigPath : [ @sequence::Tracking.Trigger.UeMSeedFilterSequence ] 

# analysis path: this is for monitoring only
physics.ReadDigisEndPath : [ TrkTriggerDiag ]

