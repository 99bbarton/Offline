# -*- mode: tcl -*-
#
# Define sequences for track based triggers.  The sequences for hit preparation
# and the tracking modules configuration must preceede these and are defined elsewhere
# original author: Dave Brown (LBNL) Mar. 7 2017
#
BEGIN_PROLOG
# define the filter modules used for track-based trigger
# filter to require a minimum # of hits in a time slot
TrkFilters : {
    filters : {
	# filters for track hit clustering
	TCFilter : {
	    module_type : TimeClusterFilter
	    TimeClusterCollection : "TTtimeClusterFinder"
	}
	CPRTCFilter : {
	    module_type : TimeClusterFilter
	    TimeClusterCollection : "TTCalTimePeakFinder"
	    MinNHits              : 1  #just check if there are TimeClusters
	}
	# filters for either positive or negative helicity tracks near the CE energy
	PosHelixFilter : {
	    module_type : HelixFilter
	    HelixSeedCollection : "TThelixFinder:Positive"
	}
	NegHelixFilter : {
	    module_type : HelixFilter
	    HelixSeedCollection : "TThelixFinder:Negative"
	}
	CPRPosHelixFilter : {
	    module_type : HelixFilter
	    HelixSeedCollection : "TTCalHelixFinderDem"
	    MinNHits            : 10    #don't apply any cut
	    MinMomentum         : 0.   #don't apply any cut
	    MaxMomentum         : 500. #don't apply any cut
	}
	CPRNegHelixFilter : {
	    module_type : HelixFilter
	    HelixSeedCollection : "TTCalHelixFinderDep"
	    MinNHits            : 10    #don't apply any cut
	    MinMomentum         : 0.   #don't apply any cut
	    MaxMomentum         : 500. #don't apply any cut
	}
	# filters for CE candidates (downstream eminus near 100 MeV/c)
	DeMSeedFilter : {
	    module_type : SeedFilter
	    KalSeedCollection : "TTKSFDeM"
	}
	CPRDeMSeedFilter : {
	    module_type : SeedFilter
	    KalSeedCollection : "TTCalSeedFitDem"    
	    MinNHits          : 15
	    MinMomentum       : 70.      #don't apply cut
	    MaxMomentum       : 200.     #don't apply cut
	    MaxChi2DOF        : 20.      #don't apply cut
	    MaxMomErr         : 10.      #don't apply cut
	}
	DeMKalFilter : {
	    module_type : SeedFilter
	    KalSeedCollection : "TTKFFDeM"
	}
	# filters for downstream positrons (mu- -> e+ conversion) 
	DePSeedFilter : {
	    module_type : SeedFilter
	    KalSeedCollection : "TTKSFDeP"
	}
	CPRDePSeedFilter : {
	    module_type : SeedFilter
	    KalSeedCollection : "TTCalSeedFitDep"    
	    MinNHits          : 15
	    MinMomentum       : 70.      #don't apply cut
	    MaxMomentum       : 200.     #don't apply cut
	    MaxChi2DOF        : 20.      #don't apply cut
	    MaxMomErr         : 10.      #don't apply cut
	}

	DePKalFilter : {
	    module_type : SeedFilter
	    KalSeedCollection : "TTKFFDeP"
	}
	# Other filters FIXME!!
	# calibration filters
	# reflecting cosmic filters
	# low-momentum electron filters
	# low-field running filters
	#  Prescaling filters

	#follow the prescaler filters for Tpr Track sequences
	TCEventPrescale : {
	    module_type : PrescaleEvent
	    nPrescale : 1
	}
	TCPrescale : {
	    module_type : PrescaleEvent
	    nPrescale : 1000
	    useFilteredEvents : true
	}

	PosHelixEventPrescale : {
	    module_type : PrescaleEvent
	    nPrescale : 1
	}
	PosHelixPrescale : {
	    module_type : PrescaleEvent
	    useFilteredEvents : true
	    nPrescale         : 300
	}
	
	TPRDeMSeedEventPrescale: {
	    module_type : PrescaleEvent
	    nPrescale         : @local::TPRDeMSeedFilter_evt_sf 
	}
	
	TPRDeMSeedPrescale : {
	    module_type : PrescaleEvent
	    nPrescale         : @local::TPRDeMSeedFilter_sf
	    useFilteredEvents : true
	}

	TPRDePSeedEventPrescale: {
	    module_type : PrescaleEvent
	    nPrescale         : @local::TPRDePSeedFilter_evt_sf
	}
	
	TPRDePSeedPrescale : {
	    module_type : PrescaleEvent
	    nPrescale         : @local::TPRDePSeedFilter_sf
	    useFilteredEvents : true
	}
	
	#follow the prescaler filters for Tpr Track sequences
	CPRDeMSeedEventPrescale: {
	    module_type : PrescaleEvent
	    nPrescale         : @local::CPRDeMSeedFilter_evt_sf
	}
	
	CPRDeMSeedPrescale : {
	    module_type : PrescaleEvent
	    nPrescale         : @local::CPRDeMSeedFilter_sf
	    useFilteredEvents : true
	}

	CPRDePSeedEventPrescale: {
	    module_type : PrescaleEvent
	    nPrescale         : @local::CPRDePSeedFilter_evt_sf
	}
	
	CPRDePSeedPrescale : {
	    module_type : PrescaleEvent
	    nPrescale         : @local::CPRDePSeedFilter_sf
	    useFilteredEvents : true
	}
	
    }

    # sequences for different trigger paths.  Early triggers are prescaled
    sequences : {
	TCFilter            : [ TCEventPrescale, @sequence::TrkHitRecoTrigger.sequences.TTprepareHits, 
				TTtimeClusterFinder, TCFilter,  TCPrescale  ]
	PosHelixFilter      : [ PosHelixEventPrescale, @sequence::TrkHitRecoTrigger.sequences.TTprepareHits, 
				TTtimeClusterFinder, TCFilter, TThelixFinder, PosHelixFilter, PosHelixPrescale   ]
	TPRDeMSeedFilter    : [ TPRDeMSeedEventPrescale, @sequence::TrkHitRecoTrigger.sequences.TTprepareHits, 
				TTtimeClusterFinder, TCFilter, TThelixFinder, PosHelixFilter, TTKSFDeM, DeMSeedFilter, TPRDeMSeedPrescale ]
	TPRDePSeedFilter    : [ TPRDePSeedEventPrescale, @sequence::TrkHitRecoTrigger.sequences.TTprepareHits, 
				TTtimeClusterFinder, TCFilter, TThelixFinder, NegHelixFilter, TTKSFDeP, DePSeedFilter, TPRDePSeedPrescale ]
		
	#calo-seeded tracking
	CPRDeMSeedFilter : [ CPRDeMSeedEventPrescale, @sequence::CaloClusterFast.Reco, @sequence::TrkHitRecoTrigger.sequences.TTprepareHits,
			     TTCalTimePeakFinder, CPRTCFilter, TTCalHelixFinderDem, CPRPosHelixFilter,
			     TTCalSeedFitDem, CPRDeMSeedFilter, CPRDeMSeedPrescale ]
	CPRDePSeedFilter : [ CPRDePSeedEventPrescale, @sequence::CaloClusterFast.Reco, @sequence::TrkHitRecoTrigger.sequences.TTprepareHits, 
			     TTCalTimePeakFinder, CPRTCFilter, TTCalHelixFinderDep, CPRNegHelixFilter, 
			     TTCalSeedFitDep, CPRDePSeedFilter, CPRDePSeedPrescale ]

	#kalman filter included
	DeMKalFilter     : [ @sequence::TrkHitRecoTrigger.sequences.TTprepareHits, 
			     TTtimeClusterFinder, TCFilter, TThelixFinder, PosHelixFilter, 
			     TTKSFDeM, DeMSeedFilter, TTKFFDeM, DeMKalFilter ]
	# add sequences for upstream, calibration, ...  FIXME!
    }
}
END_PROLOG
