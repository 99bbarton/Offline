#ifndef MCDataProducts_CaloShowerStepMC_hh
#define MCDataProducts_CaloShowerStepMC_hh

//
// Compress information of the shower generated in the crystal / readout in the calorimeter
// A CaloShowerStepMC records the position, time and energy of the fraction of an electromagnetic shower 
// generated by a SimParticle in a small longitudinal slice of a crystal (simple, right). 
//
// The Particle Id refers to the type of particle leaving the energy deposit, not the Particle originating the shower
//
// Original author Bertrand Echenard
//

#include <iostream>
#include "MCDataProducts/inc/SimParticle.hh"
#include "CLHEP/Vector/ThreeVector.h"
#include "CLHEP/Matrix/SymMatrix.h"




namespace mu2e {


   class CaloShowerStepMC {


       public:
	 
	  CaloShowerStepMC(): _volumeId(-1),_sim(),_nCompress(0),_time(0),_energy(0),_pos(),_covPos() {}
	  
	  CaloShowerStepMC(int volumeId, art::Ptr<SimParticle> const& sim, int nCompress,  
	                   double time, double energy, CLHEP::Hep3Vector& pos, CLHEP::HepSymMatrix& covPos): 
	    _volumeId(volumeId),
	    _sim(sim),
	    _nCompress(nCompress),
	    _time(time),
	    _energy(energy), 
	    _pos(pos), 
	    _covPos(covPos)	  
	    {}


	  int                            volumeId()               const {return _volumeId;}
	  art::Ptr<SimParticle> const&   simParticle()            const {return _sim;}
	  int                            nCompress()              const {return _nCompress;}
	  double                         time()                   const {return _time;}
	  double                         energy()                 const {return _energy;}
	  CLHEP::Hep3Vector   const&     position()               const {return _pos;}	  
	  CLHEP::HepSymMatrix const&     covPosition()            const {return _covPos;}	  

          void print( std::ostream& ost ) const { ost<<"Calo Shower content    volumeId = "<<_volumeId<<"  pid="<<_sim->pdgId()
	                                             <<"  edep="<<_energy<<"  time="<<_time<<" position = "<<_pos<<std::endl;}


       private:
       
	    int                     _volumeId;      // volume_id : either crystal_id or readout_id
	    art::Ptr<SimParticle>   _sim;           // pdg id code of particle leaving energy
	    int                     _nCompress;     // number of StepPointMC compressed inside this ShowerStep
	    double                  _time;          // time of first stepPointMC
	    double                  _energy;        // total energy deposited
	    CLHEP::Hep3Vector       _pos;           // position in the crystal frame
	    CLHEP::HepSymMatrix     _covPos;        // position covariance matrix
   };

} 

#endif
