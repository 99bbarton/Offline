
  Still under construction

           Release notes for Mu2e Offline software, v0_2_8

  $Id: v0_2_8.txt,v 1.18 2010/11/18 07:27:54 kutschke Exp $
  $Author: kutschke $
  $Date: 2010/11/18 07:27:54 $

28) November 17, 2010 kutschke
    Enable the storing of trajectories as data products.

    New files:
     ToyDP/inc/PointTrajectory.hh
     ToyDP/inc/PointTrajectoryCollection.hh
     Mu2eG4/inc/addPointTrajectories.hh
     Mu2eG4/src/addPointTrajectories.cc

    Modified files:
     Mu2eG4/inc/TrackingAction.hh
     Mu2eG4/src/G4_plugin.cc
     Mu2eG4/src/TrackingAction.cc
     ToyDP/src/classes.h
     ToyDP/src/classes_def.xml

27) November 16, 2010 kutschke
    Remove _volumeInfoList from Mu2eWorld and add equivalent functionality
    to G4HelperService.

26) November 15, 2010 kutschke
    Move some functions from the .hh to a newly created .cc.
    Refactor the .hh: add the findOrCreateList method.
      Mu2eG4/inc/AntiLeakRegistry.hh
      Mu2eG4/src/AntiLeakRegistry.cc 

    Create new Service to hold the AntiLeakRegistry.  It will also
    hold other things in the future.
      Mu2eG4/inc/G4Helper.hh 
      Mu2eG4/src/G4Helper_plugin.cc
 
    Remove anti leak registry from here:
      Mu2eG4/inc/Mu2eG4RunManager.hh

    Use anti-leak registry from the G4HelperService.
    Remove data members _visAttributes and  _stepLimits that are now obsolete.
       Mu2eG4/inc/Mu2eWorld.hh
       Mu2eG4/src/Mu2eWorld.cc

    Add GeometryService and ToyDP as link time dependencies. They should have been 
    there all along but got away with it until G4HelperService was created.
       Mu2eG4/src/SConscript

    Add G4HelperService
       Mu2eG4/test/beamline_01.py
       Mu2eG4/test/beamline_02.py
       Mu2eG4/test/g4test_01.py
       Mu2eG4/test/g4test_02.py
       Mu2eG4/test/g4test_03.py
       Mu2eG4/test/g4test_04.py
       Mu2eG4/test/replayAll.py
       Mu2eG4/test/replayWithSkip.py
       Mu2eG4/test/runCosmic.py
       Mu2eG4/test/runCosmicGraf.py
       Mu2eG4/test/transportOnly.py
       Mu2eG4/test/transportOnlyAndRoot.py  

25) November 15, 2010 genser

    applied surface check and config file driven visibility attributes
    to the new components in:
      Mu2eG4/src/constructCalorimeter.cc

24) November 15, 2010 genser

    replaced GeomHandle<Calorimeter> with Calorimeter const &
      HitMakers/src/MakeCaloCrystalHits_plugin.cc
      Mu2eG4/src/addCalorimeterHits.cc
      Mu2eUtilities/inc/sort_functors.hh

23) November 12, 2010 genser

    added makeSH and CaloCrystalHitsMaker to Mu2eG4/test/runCosmic.py

22) November 12, 2010 genser

    rewrote creation of CaloCrystalHitMCTruthCollection;
    added setEnergyDep to CaloCrystalHitMCTruth;
    introduced sort_functors.hh; 
    replaced roId() with id() in CaloHits and CaloHitsMCTruth
      Mu2eG4/src/addCalorimeterHits.cc
      Mu2eG4/src/ReadBack0_plugin.cc
      Mu2eG4/src/ReadBack.cc
      HitMakers/src/MakeCaloCrystalHits_plugin.cc
      ToyDP/inc/CaloCrystalHit.hh
      ToyDP/src/CaloCrystalHit.cc
      ToyDP/inc/CaloHitMCTruth.hh
      ToyDP/inc/CaloHit.hh
      ToyDP/inc/CaloCrystalHitMCTruth.hh
      ToyDP/src/CaloCrystalHitMCTruth.cc
      Mu2eUtilities/inc/sort_functors.hh

21) November 11, 2010 kutschke
    Removed some modifiers that are no longer needed.
      GeneralUtilities/inc/MapVector.hh
     
20) November 11, 2010 kutschke
    Created the AntiLeakRegistry class. Instantiated an object of that type
    in Mu2eG4RunManager and added an accessor for it.  This will be used to
    hold all G4 objects whose lifetime we need to manage ( ie things that would
    otherwise cause memory leaks ).
    Mu2eG4/inc/AntiLeakRegistry.hh
    Mu2eG4/inc/Mu2eG4RunManager.hh

19) November 11, 2010 genser

    Moved creation of CaloCrystalHitMCTruthCollection from
    MakeCaloCrystalHits_plugin to addCalorimeterHits;
    Added maximumEenergy cut and improved energy reconstruction algorithm;
    Changed handling of direct RO hits, added comments
    Simplified MakeCaloCrystalHits_plugin produce as it only creates one colletion now;
    Modified calorimetric histograms;
    Changed Id() to id() in CaloCrystalHit & CaloCrystalHitMCTruth;
    Added two functions to CaloCrystalHit; 
    Removed RO related info and functions from CaloCrystalHitMCTruth
      HitMakers/src/MakeCaloCrystalHits_plugin.cc
      Mu2eG4/inc/addCalorimeterHits.hh
      Mu2eG4/src/G4_plugin.cc
      Mu2eG4/src/ReadBack.cc
      Mu2eG4/src/addCalorimeterHits.cc
      ToyDP/inc/CaloCrystalHit.hh
      ToyDP/inc/CaloCrystalHitMCTruth.hh
      ToyDP/src/CaloCrystalHit.cc
      ToyDP/src/CaloCrystalHitMCTruth.cc
      ToyDP/src/CaloHitMCTruth.cc
      Mu2eG4/test/transportOnly.py
      Mu2eG4/test/g4test_03.py



18) November 10, 2010 kutschke
    The G4 internal run and event number match those of the framework event.
    Also removed some commented out obsolete code. 
      Mu2eG4/inc/Mu2eG4RunManager.hh
      Mu2eG4/src/Mu2eG4RunManager.cc
      Mu2eG4/src/G4_plugin.cc

17) November 10, 2010 kutschke
    Changes to match the switch from 0 based indices in item 16.

    The hit makers all reference the track that created them.  Fix indexing.
      Mu2eG4/src/CaloCrystalSD.cc 
      Mu2eG4/src/StrawSD.cc 
      Mu2eG4/src/VirtualDetectorSD.cc

    This class explicity wants to look for the first SimParticle in the event.
    So it needs to know about the switch to 1 based indexing.
    Analyses/src/RPC_plugin.cc


16) November 10, 2010 kutschke
    One big change and two small changes to: 
      Mu2eG4/src/TrackingAction.cc
      Mu2eG4/inc/TrackingAction.hh

    The big change:
       - In SimParticleCollection, IDs start at 1, not 0.
       - This matches G4's usage.  So an ID seen from the framework is the
         same as the G4 internal ID.

    The small changes:
       - Accumulate the map of SimParticles in a transient local map and copy to
         the SimParticleCollection at the end of the event.  This 
         anticipates the change of SimParticleCollection to something
         optimized for reading and persistency.
       - Add a dummy StoppingCode to the SimParticles.

    GeneralUtilities/inc/MapVector.hh 
       - Add a new insert method to support the filling of the SimParticleCollection
         from the transient local representation.

15) November 10, 2010 kutschke
    Define a new enum class to hold a code that describes why G4 stopped
    tracking a particle, decay, ranged out, capture, and so on.  Just
    a place holder for now.
      ToyDP/inc/StoppingCode.hh 
      ToyDP/src/StoppingCode.cc

    Add an instance of StoppingCode as a data member to SimParticle.
     ToyDP/inc/SimParticle.hh 
     ToyDP/src/classes_def.xml

14) November 9, 2010 onoratog
    Mu2eG4/inc/ConvElecUtilities.hh and Mu2eG4/src/ConvElecUtilities.cc have been 
    corrected to increase speed. 
    The trivial accessors have been moved to the .hh file, and the access to the simulated particle
    does not loop over all simParticles, asking for the trackId, but is given by a bare pointer
    to the particle itself. The reason of this change is the new type for SimParticleCollection (now it is a map).


13) November 9, 2010 kutschke
    With the changes in 12, there are problems building RootAnalyzer.
    I modified Offline/SConstruct to remove RootAnalyzer from the build.


12) November 9, 2010 kutschke
    Change the key_type in MapVector to a new class GeneralUtilities/inc/MapVectorKey.hh
    The purpose of this change is to cause compile time errors when SimParticleCollection
    is used in a way that will produce incorrect results. This also requires the appropriate
    changes to classes_def.xml and classes.h.  A side effect is that, in the classes 
    SimParticle and StepPointMC the trackId data members, and their accessors, and input 
    arguments must change to this new type.  A next order side effect is that code that gets 
    trackIds from these classes must change variables to use this new type. The bulk of the 
    changes are of this last type.

    Much of the code that accesses this information in the event contains the line:

    typedef SimParticleCollection::key_type key_type;

    Perfer to use this, rather than using MapVectorKey directly, so that any future changes will
    require less maintenance.

    There was a lot of code like:  
      if ( sim.parentId() > -1 ) ..

    Prefer instead to use:
      if ( sim.hasParent() ) ...

    This makes the code more clear and, if all of the code had been written this way, about 
    half of the changes below would not have been more required.

    New file:
      GeneralUtilities/inc/MapVectorKey.hh
     
    Change key type and persistency info:
      GeneralUtilities/inc/MapVector.hh
      ToyDP/src/classes.h
      ToyDP/src/classes_def.xml

    Change type of data members and types returned by accessors.  These now return their
    information as type MapVectorKey, so that it can be used directly in operator [].
       ToyDP/inc/SimParticle.hh
       ToyDP/inc/StepPointMC.hh

    This is the code that fills the SimParticleCollection from G4.
       Mu2eG4/src/TrackingAction.cc

    These are analysis codes that needed to be changed to use the new system:
       Analyses/src/CEL_plugin.cc
       Analyses/src/Histforpabs_plugin.cc
       Analyses/src/RPC_plugin.cc
       HitMakers/src/ReadStrawHit_plugin.cc
       HoughTransform/src/HoughTest_plugin.cc
       HoughTransform/src/HoughTuner_plugin.cc
       Mu2eG4/inc/ConvElecUtilities.hh
       Mu2eG4/inc/StepPointG4.hh
       Mu2eG4/src/CosmicTuple.cc
       Mu2eG4/src/ReadBack.cc
       Mu2eG4/src/ReadVirtualDetector_plugin.cc
       Mu2eG4/src/StepPointG4.cc
       RootAnalyzer/src/Analyzer.C
       RootAnalyzer/src/Analyzer.h

11) November 9, 2010 kutschke
    Remove some debug printout from some SConscript files:
     GeometryService/src/SConscript
     ConditionsService/src/SConscript
     Mu2eG4/src/SConscript
     Mu2eReflection/src/SConscript

10) November 8, 2010 kutschke
    GeneralUtilities/inc/MapVector.hh
      Add the findOrNull methods ( const and non-const):
      These are needed since the combination of calling has(id) and then at(id)
      does the lookup twice.  Also, I cannot return a std::pair<bool,SimParticle&>.
      So go with the traditional pointer return.  This was needed by CosmicTuple.

9) November 8, 2010 kutschke
   Rewrite loops over SimParticles to be correct with the new SimParticleCollection class.
     Mu2eG4/src/ConvElecUtilities.cc
     Analyses/src/CEL_plugin.cc
     Analyses/src/Histforpabs_plugin.cc
     Analyses/src/RPC_plugin.cc
     KalmanTests/src/KalmanT01_plugin.cc
     Mu2eG4/src/ReadVirtualDetector_plugin.cc
     Mu2eG4/src/CosmicTuple.cc


8) November 8, 2010 kutschke
   Switch SimParticleCollection to be a MapVector

     ToyDP/inc/SimParticleCollection.hh
       - redefine the type .

     Mu2eG4/src/G4_plugin.cc
       - Pass data product reference at the start of the event, not the end.

     Mu2eG4/inc/TrackingAction.hh
     Mu2eG4/src/TrackingAction.cc
       - Major rewrite.  No longer need a transient map.  Fill the data product
         directly during the course of the event.
       - Add consistency check that will be run at the end of the event
         if debugging is enabled.

     Mu2eG4/src/ReadBack.cc
       - A few syntax changes needed for the new type.
 
7) November 8, 2010 kutschke
   ToyDP/inc/SimParticle.hh
     - Remove superfluous include

6) November 8, 2010 kutschke
   If I want to create a data product of type mu2e::MapVector<T>
   I must add lines for std::pair<uint32_t,T> and std::map<uint32_t,T> to both:
      ToyDP/src/classes.h
      ToyDP/src/classes_def.xml
   for each concrete class T that might be added to the event.  This was done for
   T=SimParticle, in preparation for step 7.

5) November 8, 2010 kutschke
   GeneralUtilities/inc/MapVector.hh
   The version committed today is the first properly working version.
   The three big changes were that swap was missing a template parameter in its argument list,
   that erase was missing a return statement and that one of the insert methods required a
   templated argument type:

   template <class InputIterator>
   iterator insert ( InputIterator position, const value_type& value ){

   Also fixed a lot of typos.

4) November 5, 2010 kutschke
   GeneralUtilities/inc/MapVector.hh
   GeneralUtilities/test/testMapVector1.cc
     First versions.  Not yet working and not used by any code.

3) November 5, 2010 kutschke
   Create printout to be used to check that the beamline behaviour is unchanged when it is
   supposed to be unchanged.  
    Mu2eG4/src/ReadVirtualDetector_plugin.cc
      - Add optional printout that can be enabled at run time.
    Mu2eG4/test/beamline_02.py 
      - New file. The same as beamline_01.py but with no graphics and with printout.
    Mu2eG4/test/beamline_02.py 
      - Default event generator is the G4BeamlineGenerator.
    Mu2eG4/test/beamline_geom.txt
      - Since beamline_genconfig.txt defaults to G4BL input.  Make this default too.
      - Also change the settings for the particle gun.

2) November 5, 2010 kutschke
   The data member _hallOriginInMu2e was incorrectly redefined in the method constructSteel.
   All that is needed is to use a local data member.
   The error was introduced when constructSteel was first created.  
      Mu2eG4/src/Mu2eWorld.cc

1) November 4 2010, onoratog

   FoilParticleGenerator now has three different enum types.
   They identify the random generator algorithms for foil extraction,
   position extraction and time extraction. 
   Moreover each different random extraction has its own method, which
   is called in a case statement within the method "generatePositionAndTime". 
   The random algorithms to be used are required in the c'tor, now.
   Generators that use the FPG class have been adapted to the new
   syntax.

