 Still under construction

           Release notes for Mu2e Offline software, v4_1_2

 4) January 20, 2014 kutschke
    The previous few changes left the geometry file variables that control mcTrajectory and pointTrajectory saving in a mixed up state.
    This has been cleaned up.  The variables that now are used are:

    double g4.saveTrajectoryMomentumCut = 50.;
      - If a track has a starting mometum above this cut, G4 will save the 3-position of every point on the trajectory.
      - This controls G4 graphics.
      - This indirectly controls saving of PointTrajectories because these are copied from the G4 graphics buffer.
      - previously g4.pointTrajectoryMomentumCut was used for this purpose - the name has been changed since pointTrajectory
        objects will soon go away but we want to still be able to control G4 graphics.

    int g4.pointTrajectoryMinSteps  =  5;
      - A new variable. PointTrajectories are saved if they have at least this many steps..
      - This will soon become obsolete - it was renamed to make it easy to find and remove when the time comes.

    double g4.mcTrajectoryMomentumCut = 50.;
    int    g4.mcTrajectoryMinSteps    =  5;
       - These strictly control the saving of MCTrajectory objects.  They do not control G4 graphics.
       - These will stay for the long term.

    The defaults have been set that no default behaviour changes.

    Files changed:
       Mu2eG4/src/StudyTrackingAction.cc
       Mu2eG4/inc/StudyTrackingAction.hh
       Mu2eG4/src/G4_module.cc
       Mu2eG4/src/TrackingAction.cc
       Mu2eG4/inc/TrackingAction.hh
       Mu2eG4/test/geom_01.txt
 
 3) January 17, 2014 kutschke
    The old style PointTrajectoryCollection data product now
    obeys the following parameter from the geometry file:

     int g4.mcTrajectoryMinSteps = 5;

    Files changed:

      Mu2eG4/src/G4_module.cc
      Mu2eG4/inc/addPointTrajectories.hh
      Mu2eG4/src/addPointTrajectories.cc

 2) January 17, 2014 kutschke
    New class that will supercede PointTrajectoryCollection.
    For now, keep the PointTrajectoryCollection objects too.
      MCDataProducts/inc/MCTrajectory.hh
      MCDataProducts/inc/MCTrajectoryCollection.hh

    The genreflex stuff for the new class:
      MCDataProducts/src/classes_def.xml
      MCDataProducts/src/classes.h

    Code to create the new data product:
       Mu2eG4/src/G4_module.cc
       Mu2eG4/inc/SteppingAction.hh
       Mu2eG4/inc/TrackingAction.hh
       Mu2eG4/src/SteppingAction.cc
       Mu2eG4/src/TrackingAction.cc

    There is a new geometry file parameter:

     int g4.mcTrajectoryMinSteps = 5;

    Only MCTrajectories with more than this many steps are stored.

    The existing parameter geometry file parameter:

      double g4.pointTrajectoryMomentumCut = 50.

    also controls which MCTrajectory objects are written to the
    data products.  Only objects for SimParticles born with more
    than this momentum are written.

    Yeah, the names are weird.  But the g4.PointTrajectory names will
    get renamed to g4.MCTrajectory once we get rid of PointTrajectory.

    Readback the data product, put it into an ntuple and
    draw some event pictures.  Uses the output file from
    g4test_03.fcl
       Analyses/test/readMCTrajectories.cint
       Analyses/src/ReadMCTrajectories_module.cc
       Analyses/test/readMCTrajectories.fcl

 1) January 17, 2014 kutschke
    Add helper class to read .fcl file and turn it into a parameter set.
      GeneralUtilities/inc/ParameterSetFromFile.hh
      GeneralUtilities/src/ParameterSetFromFile.cc

    Code to test it:
       Sandbox/src/StandAloneParameterSet_module.cc
       Sandbox/test/standAlonePSet.fcl
       Sandbox/test/example.fcl
