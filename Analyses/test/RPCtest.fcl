# Configuration file for Radiative Pi Capture
#  - 100 events default, no visualization
#  - creates a root file in the home directory
#
# $Id: RPCtest.fcl,v 1.2 2011/05/22 17:55:25 mf Exp $
# $Author: mf $
# $Date: 2011/05/22 17:55:25 $
#
# Original author Rob Kutschke

#include "messageService.fcl"

#include "fcl/minimalMessageService.fcl"
#include "fcl/diagnostics.fcl"
#include "fcl/standardProducers.fcl"

# Give this process a name.
process_name : RadiativePiTest

# Read events from a file (made by Mu2eG4 example g4test_03.py)
source :
{
  module_type : EmptySource
  maxEvents   : 10000000
  # maxEvents :  1000000
  # maxEvents :   100000
  # maxEvents :        1
}

services :
{
  message : @local::mf_debugging

  # Adjust configuration of message logger:
  # Enable debug printout from the module instance "hitinspect",
  # and Print unlimited messages with categories ToyHitInfo and GEOM and g4run
  message.debugModules : [hitinspect]
  message.categories.ToyHitInfo.limit = -1
  message.categories.GEOM.limit = -1
  message.categories.GEOM.g4run = -1
    
  TFileService :
  {
    fileName      : "radiativePiTest.root"
    closeFileFase : false
  }

  RandomNumberGenerator : { }

  user :
  {
    GeometryService :
    {
      inputFile : "Mu2eG4/test/geom_01.txt"
    }

    ConditionsService :
    {
      conditionsfile : "Mu2eG4/test/conditions_01.txt"
    }
  }

} # close of services block

physics :
{
  producers:
  {
    # Make some generated tracks and add them to the event.
    generate:
    {
      module_type   : EventGenerator
      inputfile     : "Analyses/test/RPCconfig.txt"
      seed          : [7789]
    }
    # Run G4 and add its hits to the event.
    g4run:
    {
      module_type          : G4
      generatorModuleLabel : generate
      # visMacro           : "Mu2eG4/test/visyz.mac"
      stepsSizeLimit       : 10000                   # StepPoint
      particlesSizeLimit   : 10000                   # SimParticle
      seed                 : [9877]
    }
    # Save state of random numbers to the event.
    randomsaver:
    {
      module_type   : RandomNumberSaver
    }
  }

  analyzers:
  {
    # Look at the hits from G4.
    checkhits:
    {
      module_type   : RPC
      g4ModuleLabel : g4run
      minimumEnergy : 0.001
      maxFullPrint  : @local::maxFullPrint
    }
  }

  p1 : [generate, g4run, randomsaver]
  e1 : [checkhitso]


  trigger_paths  : [p1]
  end_paths      : [e1]

}



