# -*- mode: tcl -*-
#------------------------------------------------------------------------------
# this example shows how to configure a job to
#
# - generate conversion electron events
# - run simulation+reconstruction chain
# - run particle ID
#
# local submission:
#
#  mu2e -c Analyses/test/genReco.fcl -n 1000 >| results/2014-12-19-Analyses_test_genReco.log &
#------------------------------------------------------------------------------

#include "minimalMessageService.fcl"
#include "standardProducers.fcl"
#include "standardServices.fcl"

# BEGIN_PROLOG
#   muStops      : @local::mergedMuonStops
# END_PROLOG

process_name : GenReco
#------------------------------------------------------------------------------
# define input module
#------------------------------------------------------------------------------
source : {
    module_type : EmptyEvent
}
#------------------------------------------------------------------------------
# define output module
#------------------------------------------------------------------------------
outputs: {
    detectorOutput : {
        module_type : RootOutput
#        SelectEvents: { SelectEvents: [p1] }
        outputCommands:   [ "keep *_*_*_*",
                            "drop mu2e::PhysicalVolumeInfomvstd::pairs_g4run_*_*"
                          ]
        fileName    : "genReco.art"
    }
}
#------------------------------------------------------------------------------
# services  section
#------------------------------------------------------------------------------
services : {

    message               : @local::default_message
    TFileService          : { fileName : "genReco.hist" }
    RandomNumberGenerator : { }

    # Mu2e services
    GeometryService        : { inputFile      : "JobConfig/TDR/geom_MothersToHits.txt" }
    ConditionsService      : { conditionsfile : "Mu2eG4/test/conditions_01.txt"        }
    GlobalConstantsService : { inputFile      : "Mu2eG4/test/globalConstants_01.txt"   }
    G4Helper               : { }
    BTrkHelper             : @local::BTrkHelperDefault
    SeedService            : { @table::automaticSeeds
       baseSeed            :  0
       maxUniqueEngines    :  20
    }
}
#------------------------------------------------------------------------------
# specify modules
#------------------------------------------------------------------------------
physics : {
    producers: {
	generate             : { @table::StoppedParticleReactionGun }
	g4run                : @local::g4run
#------------------------------------------------------------------------------
# hit makers
#------------------------------------------------------------------------------
        protonTimeMap        : @local::protonTimeMap
        muonTimeMap          : @local::muonTimeMap
        makeSD               : @local::makeSD
        makeSH               : @local::makeSHfromSD
	MakeCaloReadoutHits  : @local::MakeCaloReadoutHits
	MakeCaloCrystalHits  : @local::MakeCaloCrystalHitsNew
#------------------------------------------------------------------------------
#  default tracking
#------------------------------------------------------------------------------
	FSHPreStereo         : @local::FSHPreStereo
	MakeStereoHits       : @local::MakeStereoHits
	FlagStrawHits        : @local::FlagStrawHits
	FlagBkgHits          : @local::FlagBkgHits
	TrkPatRec            : @local::TrkPatRecDownstreameMinus
#------------------------------------------------------------------------------
# CalPatRec modules
#------------------------------------------------------------------------------
	MakeCaloProtoCluster : @local::MakeCaloProtoCluster
	MakeCaloCluster      : @local::MakeCaloCluster
	MakeStrawHitPositions: @local::MakeStrawHitPositions
	CalPatRec            : @local::CalPatRec
	MergePatRec          : @local::MergePatRec
#------------------------------------------------------------------------------
# needed for analysis
#------------------------------------------------------------------------------
	CaloMatching         : @local::TrackCaloMatching
	TrkExtrapol          : @local::TrkExtrapol
	ParticleID           : @local::ParticleID
    }

    filters: {
#------------------------------------------------------------------------------
# Andrej's filter
# Reject events with no hits from signal-like tracks in the detectors.
# The filter does not look at the background hits from mixed events.
#------------------------------------------------------------------------------
	FilterStepPointMomentum: {
            module_type    : FilterStepPointMomentum
            inputs         : [ "g4run:tracker", "g4run:calorimeter", "g4run:calorimeterRO"]
            cutMomentumMin : 10. # MeV/c
        }
    }
#------------------------------------------------------------------------------
# analyzers:
#------------------------------------------------------------------------------
    analyzers: {

#     Read the TrkPatRec output and make diagnostic ntuples.
      RKFDownstreameMinus: {
         module_type: ReadKalFits
         fitterModuleLabel: TrkPatRec
         KalDiag : {
          MCPtrLabel : "makeSH"
          MCStepsLabel : "g4run"
          SimParticleLabel : "g4run"
          SimParticleInstance : ""
          StrawHitMCLabel : "makeSH"
          TimeOffsets :  { inputs : [ "protonTimeMap", "muonTimeMap" ] }
        }
      }

    }
#------------------------------------------------------------------------------
# paths:
#------------------------------------------------------------------------------
    e1 : [ RKFDownstreameMinus ]

    p1 : [generate, g4run
	  , protonTimeMap, muonTimeMap
	  , makeSD, makeSH
	  , MakeCaloReadoutHits, MakeCaloCrystalHits
	  , MakeCaloProtoCluster, MakeCaloCluster
#
	  , FSHPreStereo, MakeStereoHits, FlagStrawHits, FlagBkgHits, TrkPatRec
#
	  , TrkExtrapol, CaloMatching, ParticleID
	 ]

    trigger_paths  : [p1]

# to disable writing out the DST file, replace [detectorOutput] with []
    out : [detectorOutput]
#    out : []
    end_paths      : [e1, out]
}
#------------------------------------------------------------------------------
# redefinitions
#------------------------------------------------------------------------------
# 1. only for interactive submission
#------------------------------------------------------------------------------

# print per event timing for ::event entry points
# services.Timing: { }
# print
services.scheduler.wantSummary: true

# Apply the time offsets at the digitization stage
# physics.producers.makeSD.TimeOffsets               : { inputs : [ "protonTimeMap", "muonTimeMap" ] }
# physics.producers.CaloReadoutHitsMaker.TimeOffsets : { inputs : [ "protonTimeMap", "muonTimeMap" ] }

