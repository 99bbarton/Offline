#!/usr/bin/env python
#
# Script to build the files found in this directory.
#
# $ Id: SConscript,v 1.7 2012/08/24 20:19:31 gandr Exp $
# $ Author: gandr $
# $ Date: 2012/08/24 20:19:31 $
#
# Original author Rob Kutschke.
#
# Notes:
#
# 1) The classes built by this code are not part of any art data products.  Therefore art does not need to
#    know about the dictionary information - therefore there is no need for a separate _dict.so.  That information
#    is still needed but it can be put into the same .so as the main body of the compiled code. If we try
#    to separate the information into two libraries, there is dependency loop that can't be broken.  This is the
#    only mu2e code for which this is an issue since the objects defined here are TObjects, while no other Mu2e
#    classes are TObjects.  The _map file is not needed at all so we won't make it.
#

import os
Import('env')
Import('mu2e_helper')

helper=mu2e_helper();

rootlibs      = env['ROOTLIBS']
extrarootlibs = [ 'Reflex', 'Geom', 'EG']

# Only need the _dict file, not the map file.
env.DictionarySource([ helper.dict_tmp_name() ],
                     ['classes.h','classes_def.xml'],
                      parse_flags=[ '-I#/RecoDataProducts/inc/ -I#/MCDataProducts/inc/' ])

# _dict file, plus all cxx sources, must be compiled into the main library.  See note 1.
source_files = [ Glob('*.cxx',strings=True), helper.dict_tmp_name() ]

if source_files:
    env.SharedLibrary( helper.prefixed_libname(),
                       source_files,
                       LIBS=[ rootlibs, extrarootlibs ],
                       parse_flags=[ '-I#/RecoDataProducts/inc/ -I#/MCDataProducts/inc/' ]
                       )

# This tells emacs to view this file in python mode.
# Local Variables:
# mode:python
# End:
