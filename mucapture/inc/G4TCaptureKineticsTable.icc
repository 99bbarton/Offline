// ------------------------------------------------------------
//      GEANT 4 template class implementation file
//
//      History: first implementation, Kevin Lynch, February 12 2010
// ----------------------------------------------------------------


#ifndef G4TCAPTUREKINETICSTABLE_ICC
#error Do not include G4TCaptureKineticsTable.icc directly!
#else

#include "Randomize.hh"
#include <algorithm>

template<class T>
G4TCaptureKineticsTable<T>::G4TCaptureKineticsTable(T const* p) :
  particle(p), totalRate(0) {}

template<class T>
G4TCaptureKineticsTable<T>::~G4TCaptureKineticsTable(){
  typename G4TCaptureKineticsChannelVector::iterator 
    b = channels.begin(), e = channels.end();
  while( b!=e ){
    delete *b;
    ++b;
  }
  channels.clear();
}

template<class T> G4TCaptureKineticsTable<T>* 
G4TCaptureKineticsTable<T>::Clone(T const* p) const {
  G4TCaptureKineticsTable<T>* table = new G4TCaptureKineticsTable<T>(p);
  const_iterator i;
  for(i = channels.begin(); i!=channels.end(); ++i){
    if( (*i)->IsCloneable() ){
      G4TCaptureKineticsChannel<T> *chan = (*i)->Clone(p);
      table->Insert(chan);
    }
  }
  return table;
}

template<class T>
void G4TCaptureKineticsTable<T>::Insert(G4TCaptureKineticsChannel<T>* aChannel){
  G4cout << "Inserting Capture Channel: " << aChannel->GetChannelName() << '\n';
  if( !aChannel )
    G4cout << "Invalid channel : null pointer\n";
  G4double const r = aChannel->GetRate();
  G4cout << "Channel rate: " << r << '\n';
  totalRate += r;
  G4cout << "Total rate: " << totalRate << '\n';
  G4double const theBR = r/totalRate;
  // renormalize the BRs of the existing channels
  G4cout << "Insert a branching ratio of: " << theBR << '\n';
  for( std::size_t i=0; i!=channels.size(); ++i){
    BRs[i] = channels[i]->GetRate()/totalRate;
    G4cout << "Existing BR " << i << " of: " << channels.size() 
	   << ": " << BRs[i] << '\n';
  }
  // insert the new channel
  //  for (i = channels.begin(); i!= channels.end(); ++i) {
  if( channels.size() == 0 ){
    G4cout << "Inserting first channel!\n";
    channels.push_back( aChannel );
    BRs.push_back(1.);
  } else {
    bool stuffed = false;
    for( std::size_t i = 0; i!=channels.size();++i){
      G4cout << "Is theBR (" << theBR << ") > channel " << i << ' '
      	     << channels[i]->GetRate()/totalRate << '\n';
      if (theBR > channels[i]->GetRate()/totalRate) {
	G4cout << " Yes!\n";
	// 
	channels.insert(channels.begin()+i,aChannel);
	stuffed = true;
	break;
      } else {
	G4cout << " No!\n";
      }    
    }
    if( !stuffed ){
      G4cout << "Last channel standing!\n";
      channels.push_back(aChannel);
    }
    BRs.push_back(1.);
  }
  // normalize again...
  G4cout << "Channels: " << channels.size() << '\n';
  for( std::size_t i=0; i!=channels.size(); ++i){
    BRs[i] = channels[i]->GetRate()/totalRate;
    G4cout << "Final BR " << i << " of: " << BRs[i] << '\n';
  }
  G4cout << "Done channel insertion.\n";
}


template<class T>
G4TCaptureKineticsChannel<T>* G4TCaptureKineticsTable<T>::SelectAChannel() const {
  if( channels.size()==0 )
    return 0;


  // FIXME
#ifdef G4VERBOSE
//   if (verboseLevel>0) {
//     for( std::size_t j=0; j!=BRs.size(); ++j)
//       G4cout << "channel: " << j << " BR: " << BRs[j] << '\n';
//   }
#endif
  while (1) {
    G4double sumBR = 0.0;
    G4double r= G4UniformRand();
    // select decay channel
    for (std::size_t i = 0; i!= channels.size(); ++i) {
      sumBR += BRs[i];
      if (r < sumBR)
        return channels[i];
    }
  }
  return 0;
}


template<class T>
void G4TCaptureKineticsTable<T>::swap(G4TCaptureKineticsTable<T>& rhs){
  std::swap(particle, rhs.particle);
  std::swap(channels, rhs.channels);
  std::swap(BRs, rhs.BRs);
  std::swap(totalRate, rhs.totalRate);
}

#endif
