BEGIN_PROLOG
# Normal reco seqence module: this produces a hit for every digi, and uses
# flags to keep track of which hits to use
# Reconstruct hits: this produces StrawHits and ComboHits
makeSH : {
  module_type : StrawHitReco
  FilterHits : false
  WriteStrawHitCollection : true
}
# combine hits in a panel
makePH : {
  module_type : CombineStrawHits
  TestFlag : true
  TestRadius : true
  ComboHitCollection : "makeSH"
}
# combine panel hits in a station
makeSTH : {
  module_type : MakeStereoHits
  TestFlag : true
  MVATool : { MVAWeights : "HitMakers/test/StereoMVA.weights.xml" }
  ComboHitCollection : "makePH"
}
# flag hits from low-energy electrons (Compton electrons, delta rays, ...)
# First, configure the clusters
# Original 2-level clusterer
TLTClusterer : { 
    MaxNIterations : 10
    TimeDifference : 25.0
    MaxDistance : 100.0
    HitDistance : 5.0
    SeedDistance : 25.0
    MaxTimeDifference : 40.0
    BackgroundMask : []
    SignalMask : ["TimeSelection", "EnergySelection","RadiusSelection"]
}
# Bertrand's faster version
TNTClusterer : { 
    MaxNIterations : 10
    TimeDifference : 25.0
    MaxDistance : 100.0
    HitDistance : 5.0
    SeedDistance : 25.0
    MaxTimeDifference : 40.0
    BackgroundMask : []
    SignalMask : ["TimeSelection", "EnergySelection","RadiusSelection"]
}
# Now configure the module
FlagBkgHits : {
  module_type : FlagBkgHits
  ComboHitCollection : "makePH"
  StrawHitCollection : "makeSH"
  BkgMVA : { MVAWeights : "TrkHitReco/data/BkgMVAPanel.weights.xml" }
  MVANames : [ "HitRho", "HitRhoSpread", "ClusterRho", "ZMin", "ZMax", "ZGap", "NPlanes", "PlaneFraction","NHits" ] 
  TLTClusterer : { @table::TLTClusterer
		    TestFlag : true }
  TNTClusterer : { @table::TNTClusterer
		    TestFlag : true}
  # use TNTClusterer
  Clusterer : 2
  FilterOutput : false
  FlagComboHits : true
  FlagStrawHits : true
  BkgMVA : {
    MVAWeights : "TrkHitReco/data/BkgMVAPanel.weights.xml"
  }
}
SflagBkgHits : {
  @table::FlagBkgHits
  ComboHitCollection : "makeSTH"
}

# now trigger-specific versions; these make deep copies
TTmakeSH : {
  module_type : StrawHitReco
  FilterHits : true
  WriteStrawHitCollection : true
}
# combine hits in a panel
TTmakePH : {
  module_type : CombineStrawHits
  TestFlag : false
  TestRadius : true
  ComboHitCollection : "TTmakeSH"
}
# stereo version: defer the radius test
TTSmakePH : {
  @table::TTmakePH
  TestRadius : false
}
# combine panel hits in a station
TTmakeSTH : {
  @table::makeSTH
  TestFlag : false
  ComboHitCollection : "TTSmakePH"
}
TTflagBkgHits : {
  module_type : FlagBkgHits
  ComboHitCollection : "TTmakePH"
  StrawHitCollection : "TTmakeSH"
  BkgMVA : { MVAWeights : "TrkHitReco/data/BkgMVAPanel.weights.xml" }
  MVANames : [ "HitRho", "HitRhoSpread", "ClusterRho", "ZMin", "ZMax", "ZGap", "NPlanes", "PlaneFraction","NHits" ] 
  TLTClusterer : { @table::TLTClusterer 
		  TestFlag : false}
  TNTClusterer : { @table::TNTClusterer
		  TestFlag : false}
  # use TNTClusterer
  Clusterer : 2
  FilterOutput : true
  FlagComboHits : false
  FlagStrawHits : true #false??
  ComboHitCollection : "TTmakePH"
  BkgMVA : {
    MVAWeights : "TrkHitReco/data/BkgMVAPanel.weights.xml"
  }
}
# stereo versions
TTSflagBkgHits : {
  @table::TTflagBkgHits
  ComboHitCollection : TTSmakePH
}
# Legacy: don't use these in any new sequences!
MakeStrawHitPositions : {
  module_type             : MakeStrawHitPositions
  StrawHitCollectionLabel : "makeSH"
  StrawHitFlagCollectionLabel : "FSHPreStereo"
}

FlagStrawHits  : {
  module_type : FlagStrawHits
  maximumEnergy : 0.0035
  UseCaloCluster           : false
  UseCaloClusterXYPosition : false
  CaloClusterMinE          : 50.
  CaloClusterMinSize       : 2
  CaloClusterMinDt         : -40
  CaloClusterMaxDt         : 40
  pitchAngle               : 0.67   # mean pitch for CE
  beta                     : 1.
  dtOffset                 : @local::TrackCaloMatching.DtOffset
}


# combine together
TrkHitReco : {
    producers : { 
	# normal reco
	makeSH            : { @table::makeSH              }
	makePH            : { @table::makePH            }
	makeSTH            : { @table::makeSTH            }
	FlagBkgHits		  : { @table::FlagBkgHits            }
	SflagBkgHits		  : { @table::SflagBkgHits            }
	# track trigger modules
	TTmakeSH            : { @table::TTmakeSH              }
	TTmakePH            : { @table::TTmakePH            }
	TTmakeSTH            : { @table::TTmakeSTH            }
	TTflagBkgHits		  : { @table::TTflagBkgHits            }
	#legacy: don't use these!
	makeSHP  : { @table::MakeStrawHitPositions}
	FlagStrawHits : { @table::FlagStrawHits}
    }
# sequences
# production sequence to prepare hits for tracking
  PrepareHits : [ makeSH, makePH, FlagBkgHits ]
  SPrepareHits : [ makeSH, makePH, makeSTH, SflagBkgHits ]
  TTprepareHits : [ TTmakeSH, TTmakePH,TTflagBkgHits ]
  TTSprepareHits : [ TTmakeSH, TTSmakePH, TTmakeSTH ,TTSflagBkgHits ]
}

END_PROLOG
