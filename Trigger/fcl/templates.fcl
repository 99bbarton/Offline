# -*- mode: tcl -*-
#------------------------------------------------------------------------------
# this file includes all the prolog needed to run the reconstruction 
# at the trigger level and the filters used to make the trigger decision
#------------------------------------------------------------------------------
#include "CalPatRec/fcl/prolog.fcl"
#include "TrkPatRec/fcl/prolog_trigger.fcl"
#include "CalPatRec/fcl/prolog_trigger.fcl"
#include "CaloCluster/fcl/prolog_trigger.fcl"
#include "TrkHitReco/fcl/prolog_trigger.fcl"
#include "TrkFilters/fcl/prolog_trigger.fcl"
#include "CaloFilters/fcl/prolog_trigger.fcl"

Trigger : {
    producers : {
	@table::CaloFilters.producers
	@table::CaloClusterTrigger.producers
	@table::TrkHitRecoTrigger.producers
	@table::TrkHitReco.producers
	@table::TprTrigger.producers
	@table::CprTrigger.producers
    }

    filters : {
	@table::CprTrigger.filters
	@table::CaloFilters.filters
	@table::TrkFilters.filters

	#used to select 1 event out of N
	UnbiasedFilter : {
	    module_type : PrescaleEvent
	    nPrescale         : @local::unbiased_evt_sf
	}

	#prescaler for the standard strawDigi occupancy filter
	SDCountEventPrescale : {
	    module_type : PrescaleEvent
	    nPrescale         : @local::sDCount_evt_sf
	}
	
	SDCountPrescale      : {
	    module_type : PrescaleEvent
	    nPrescale         : @local::sDCount_sf
	    useFilteredEvents : true
	}

	#prescaler for the strawDigi large-occupancy filter
	LargeSDCountEventPrescale : {
	    module_type : PrescaleEvent
	    nPrescale         : @local::largeSDCount_evt_sf
	}
	
	LargeSDCountPrescale      : {
	    module_type : PrescaleEvent
	    nPrescale         : @local::largeSDCount_sf
	    useFilteredEvents : true
	}

	#filters based on the strawDigi occupancy:

	# LargeSDCountFilter: we need this filter to select strange events 
	#                     where we had lot of hits. That is a good handle
	#                     for spotting strange behaviour of the tracker
	LargeSDCountFilter     : {
	    module_type : DigiFilter
	    StrawDigiCollection : makeSD
	    CaloDigiCollection  : notUsed
	    UseStrawDigi        : true
	    UseCaloDigi         : false
	    MinNStrawDigi       : 10000 
	    MaxNStrawDigi       : 1000000 
	    MinNCaloDigi        : -1
	    MaxNCaloDigi        : -1
	    MaxCaloEnergy       : -1
	}

	# CDCountFilter     : it's a minimum bias filter. It allows to select
	#                     events based on the number of strawDigi
	SDCountFilter          : {
	    module_type : DigiFilter
	    StrawDigiCollection : makeSD
	    CaloDigiCollection  : notUSed
	    UseStrawDigi        : true
	    UseCaloDigi         : false
	    MinNStrawDigi       : 500   
	    MaxNStrawDigi       : 10000
	    MinNCaloDigi        : -1
	    MaxNCaloDigi        : -1
	    MaxCaloEnergy       : -1
	}

	#prescaler for the standard strawDigi occupancy filter
	CDCountEventPrescale : {
	    module_type : PrescaleEvent
	    nPrescale         : @local::cDCount_evt_sf
	}
	
	CDCountPrescale      : {
	    module_type : PrescaleEvent
	    nPrescale         : @local::cDCount_sf
	    useFilteredEvents : true
	}

	#prescaler for the strawDigi large-occupancy filter
	LargeCDCountEventPrescale : {
	    module_type : PrescaleEvent
	    nPrescale         : @local::largeCDCount_evt_sf
	}
	
	LargeCDCountPrescale      : {
	    module_type : PrescaleEvent
	    nPrescale         : @local::largeCDCount_sf
	    useFilteredEvents : true
	}

	#filters based on the strawDigi occupancy:

	# LargeCDCountFilter: we need this filter to select strange events 
	#                     where we had lot of hits. That is a good handle
	#                     for spotting strange behaviour of the tracker
	LargeCDCountFilter     : {
	    module_type : DigiFilter
	    StrawDigiCollection : notUsed
	    CaloDigiCollection  : CaloDigiFromShower
	    UseStrawDigi        : false
	    UseCaloDigi         : false
	    MinNStrawDigi       : 5000 
	    MaxNStrawDigi       : 1000000 
	    MinNCaloDigi        : -1
	    MaxNCaloDigi        : -1
	    MaxCaloEnergy       : -1
	}

	# CDCountFilter     : it's a minimum bias filter. It allows to select
	#                     events based on the number of strawDigi
	CDCountFilter          : {
	    module_type : DigiFilter
	    StrawDigiCollection : notUsed
	    CaloDigiCollection  : CaloDigiFromShower
	    UseStrawDigi        : false
	    UseCaloDigi         : true
	    MinNStrawDigi       : -1    
	    MaxNStrawDigi       : -1
	    MinNCaloDigi        : 200
	    MaxNCaloDigi        : 5000
	    MaxCaloEnergy       : -1
	}
      }
    
    analyzers  : { 
	ReadTriggerInfo : { 
	    module_type : ReadTriggerInfo
	}
    }
    
    paths : {
	#calorimeter based filters. It includes: CE, and calibrations
	@table::CaloFilters.sequences
	
	#tracking filters. It includes: TrkPatRec, CalPatRec
	@table::TrkFilters.sequences

	#unbiased filter. It selects the events based on their event id
	unbiased           : [ UnbiasedFilter ]

	#minimum bias filters. So far, a filter based on the StrawDigi occupancy
	minimumbiasSdCount : [ SDCountEventPrescale, SDCountFilter, SDCountPrescale]

	#filter to select events with large occupancy in the tracker
	largeSdCount       : [ LargeSDCountEventPrescale, LargeSDCountFilter, LargeSDCountPrescale]
	
	#minimum bias filters. So far, a filter based on the StrawDigi occupancy
	minimumbiasCdCount : [ CDCountEventPrescale, CDCountFilter, CDCountPrescale]

	#filter to select events with large occupancy in the tracker
	largeCdCount       : [ LargeCDCountEventPrescale, LargeCDCountFilter, LargeCDCountPrescale]
    }
    
    outputs: {
	
	triggerOutput : { 
	    module_type: RootOutput
	    fileName: "filteredOutput.root"
	    SelectEvents : [ unbiased_path, 
			     minimumbiasSdCount_path,
			     largeSdCount_path,
			     caloOnly_path,
			     tprDeMSeed_path, tprDePSeed_path, cprDeMSeed_path, cprDePSeed_path ]
#	    Compressionlevel: 0
	    
	    outputCommands: [ "keep *_*_*_*",
			      "drop *_daq_*_*" ]
	}

	rootoutUnbiased : { 
	    module_type: RootOutput
	    fileName: "driver_unbiased.root"
	    SelectEvents : [ unbiased_path ]
	    compressionLevel: 0
	    
	    outputCommands: [ "keep *_*_*_*",
			      "drop *_daq_*_*" ]
	}
	
	rootoutCaloOnly : {
	    module_type: RootOutput
	    fileName: "driver_calo_only.root"
	    SelectEvents : [ caloOnly_path ]
#	    compressionLevel: 0
	    
	    outputCommands: [ "keep *_*_*_*",
			      "drop *_daq_*_*" ]
	}

	rootoutTrkDem : {
	    module_type: RootOutput
	    fileName: "driver_trk_dem.root"
	    SelectEvents : [ tprDeMSeed_path, cprDeMSeed_path ]
	    compressionLevel: 0
	    
	    outputCommands: [ "keep *_*_*_*",
			      "drop *_daq_*_*" ]
	}

	rootoutTrkDep : {
	    module_type: RootOutput
	    fileName: "driver_trk_dep.root"
	    SelectEvents : [ tprDeP_path, cprDePSeed_path ]
	    compressionLevel: 0
	    
	    outputCommands: [ "keep *_*_*_*",
			      "drop *_daq_*_*" ]
	}
	

    }
}