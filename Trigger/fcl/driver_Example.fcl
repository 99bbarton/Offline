# -*- mode: tcl -*-
# FHiCL document used to run the "driver" executable. To learn more
#  about the FHiCL language, please look at
#  cdcvs.fnal.gov/redmine/documents/327 , the "FHiCL Quick Start Guide"

#include "fcl/minimalMessageService.fcl"
#include "fcl/standardServices.fcl"
#include "fcl/standardProducers.fcl"
#include "TrkDiag/fcl/prolog.fcl"

BEGIN_PROLOG
#prescale factor for the unbiased trigger
UnbiasedFilters_evt_sf  : 500
#prescale factor for the calorimeter-only trigger
CaloOnly_evt_sf         : 1
CaloOnly_sf             : 1
#prescale factor fot the tracker-only track triggers
# downstream e-
TPRDeMSeedFilter_evt_sf : 1
TPRDeMSeedFilter_sf     : 1
# downstream e+
TPRDePSeedFilter_evt_sf : 1
TPRDePSeedFilter_sf     : 1
#prescale factor fot the calo-seeded track triggers
# downstream e-
CPRDeMSeedFilter_evt_sf : 1
CPRDeMSeedFilter_sf     : 1
# downstream e+
CPRDePSeedFilter_evt_sf : 1
CPRDePSeedFilter_sf     : 1
END_PROLOG

#include "Trigger/fcl/templates.fcl"


events_to_generate: 5
#events_to_generate: 25


run_number: 101

fragment_receiver: {

    # Parameters defining and configuring the fragment generator to be used
    generator: Mu2eReceiver
    ring_0_roc_count: 1
    ring_0_timing_enabled: false
    debug_print: false
    verbose: false
    raw_output_enable: false
    raw_output_file: "mu2eReceiver.bin"

    load_sim_file: true
    use_detector_emulator: true

    fragment_id: 0
    board_id: 0
}

event_builder: {
    expected_fragments_per_event: 1
    use_art: true
    print_event_store_stats: false
    verbose: false
    events_expected_in_SimpleQueueReader: @local::events_to_generate

    max_fragment_size_bytes: 522705344
    buffer_count: 20
    end_of_data_wait_s: 0

    # 24 Cores Total (mu2edaq01)
    # art_analyzer_count: 1
    #  art_analyzer_count: 18
}

######################################################################
# The ART code
######################################################################

services : @local::Services.Reco

services : {
    message               : @local::default_message
    TFileService          : { fileName : "trig.root" }

    RandomNumberGenerator : { }

    TimeTracker : {
	#	dbOutput : {
	#	    filename : "ReadDigis.db"
	#	    overwrite : true
	#	}
    }

    GeometryService        : { inputFile      : "Mu2eG4/geom/geom_common.txt"          }
    ConditionsService      : { conditionsfile : "Mu2eG4/test/conditions_01.txt"        }
    GlobalConstantsService : { inputFile      : "Mu2eG4/test/globalConstants_01.txt"   }
    BTrkHelper             : @local::BTrkHelperDefault
    SeedService            : { @table::automaticSeeds
	baseSeed         :  0
	maxUniqueEngines :  20
    }    
}


producers    : { @table::Trigger.producers }
filters      : { @table::Trigger.filters   }
analyzers    : { @table::Trigger.analyzers }
paths        : { @table::Trigger.paths     }
outputs      : { @table::Trigger.outputs   }

physics:
{
    
    producers : { @table::producers 

	makeSD:
	{
	    module_type: Mu2eProducer
	    diagLevel: 0
	    parseCAL: 0
	    parseTRK: 1
	}
	
	CaloDigiFromShower:
	{
	    module_type: Mu2eProducer
	    diagLevel: 0
	    parseCAL: 1
	    parseTRK: 0
	}
	
	
    }
    
    filters   : { @table::filters }
    
    analyzers : {  
	
	ReadTriggerInfo : { @table::analyzers.ReadTriggerInfo
	    nFilters      : 25
	    SelecEvents   : [ unbiased_path, 
			      minimumbiasSdCount_path,
			      largeSdCount_path,
			      caloOnly_path,
			      tprDeMSeed_path, tprDePSeed_path, cprDeMSeed_path, cprDePSeed_path ]
	}
	
    }
    
    
#    prod_sequence : [ makeSD, CaloDigiFromShower ]
    
    #unbiased trigger path
    unbiased_path                : [ @sequence::paths.unbiased                       ]
    
    #minimum bias filters
    minimumbiasSdCount_path      : [ @sequence::paths.minimumbiasSdCount             ]

    #path for selecting events with large ammount of strawDigis
    largeSdCount_path            : [ @sequence::paths.largeSdCount                   ]
    
    #path for the calorimeter only trigger
    calo_only_path               : [ CaloDigiFromShower, @sequence::paths.caloOnly   ]

    #paths for TrkPatRec downstream e- and e+
    tpr_dem_path   : [ makeSD,  @sequence::paths.tprDeMSeed                          ]
    tpr_dep_path   : [ makeSD,  @sequence::paths.tprDePSeed                          ]

    #paths for CalPatRec downstream e- and e+
    cpr_dem_path   : [ makeSD, CaloDigiFromShower, @sequence::paths.cprDeMSeed       ]
    cpr_dep_path   : [ makeSD, CaloDigiFromShower, @sequence::paths.cprDePSeed       ]
    
    

    e2: [ ReadTriggerInfo ]

    end_paths: [ e2 ]

}

outputs:
{
    @table::outputs
    
    out1:
    {
	module_type: FileDumperOutput
	wantProductFriendlyClassName: true
    }

}

source:
{
    module_type: OfflineFragmentReader
    waiting_time: 900
    resume_after_timeout: true
}

services.scheduler.wantSummary: true

process_name: Driver

