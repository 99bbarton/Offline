# -*- mode:tcl -*-
#------------------------------------------------------------------------------
# performs the calorimeter and track reconstruciton
#------------------------------------------------------------------------------
#  > mu2e --config CaloFilters/fcl/runCaloOnlyFilter.fcl --source "your digis file" --TFile CaloOnlyFilter.root --nevts=100
#include "fcl/minimalMessageService.fcl"
#include "fcl/standardServices.fcl"
#include "fcl/standardProducers.fcl"

BEGIN_PROLOG
#prescale factor for the calorimeter-only trigger
CaloOnly_evt_sf         : 1
CaloOnly_sf             : 1
#prescale factor fot the tracker-only track triggers
# downstream e-
TPRDeMSeedFilter_evt_sf : 1
TPRDeMSeedFilter_sf     : 1
# downstream e+
TPRDePSeedFilter_evt_sf : 1
TPRDePSeedFilter_sf     : 1
#prescale factor fot the calo-seeded track triggers
# downstream e-
CPRDeMSeedFilter_evt_sf : 1
CPRDeMSeedFilter_sf     : 1
# downstream e+
CPRDePSeedFilter_evt_sf : 1
CPRDePSeedFilter_sf     : 1
END_PROLOG

#include "Trigger/fcl/templates.fcl"

process_name : testTrigger

source :
{
    module_type : RootInput
}
# we don't need any simulation services for this job
services : @local::Services.Reco

services : {
    message               : @local::default_message
    TFileService          : { fileName : "globalTrigger.root" }

    RandomNumberGenerator : { }
    #   Timing                : { }

    GeometryService        : { inputFile      : "Mu2eG4/geom/geom_common.txt"          }
    ConditionsService      : { conditionsfile : "Mu2eG4/test/conditions_01.txt"        }
    GlobalConstantsService : { inputFile      : "Mu2eG4/test/globalConstants_01.txt"   }
    G4Helper               : { }
    BTrkHelper             : @local::BTrkHelperDefault
    SeedService            : { @table::automaticSeeds
	baseSeed         :  0
	maxUniqueEngines :  20
    }
    
}

# timing information
services.TimeTracker : {
    dbOutput : {
	filename : ""
	overwrite : true
    }
}

services.scheduler.wantSummary: true

producers    : { @table::Trigger.producers }
filters      : { @table::Trigger.filters   }
paths        : { @table::Trigger.paths     }


physics : {
    producers: { @table::producers }

    filters  : { @table::filters }

    #path for the calorimeter only trigger
    #    calo_only_path : [ @sequence::paths.calo_only_with_digifetch ]
    calo_only_path : [ FetchCaloDigis,  @sequence::paths.calo_only]

    #paths for TrkPatRec downstream e- and e+
    tpr_dem_path   : [ TPRFetchDigis, @sequence::paths.DeMSeedFilter    ]
    tpr_dep_path   : [ TPRFetchDigis, @sequence::paths.DePSeedFilter    ]

    #paths for CalPatRec downstream e- and e+
    cpr_dem_path   : [ CPRFetchDigis, @sequence::paths.CPRDeMSeedFilter ]
    cpr_dep_path   : [ CPRFetchDigis, @sequence::paths.CPRDePSeedFilter ]
    
    out           : [     ]
    end_paths     : [ out ]
}



