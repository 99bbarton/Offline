# -*- mode:tcl -*-
#------------------------------------------------------------------------------
# performs the calorimeter and track reconstruciton
#------------------------------------------------------------------------------
#  > mu2e --config CaloFilters/fcl/runGlobalFilter.fcl --source "your digis file" --TFile globalFilter.root --nevts=100
#include "fcl/minimalMessageService.fcl"
#include "fcl/standardServices.fcl"
#include "fcl/standardProducers.fcl"

BEGIN_PROLOG
#prescale factor for the unbiased trigger
UnbiasedFilters_evt_sf  : 500
#prescale factors for the strawDigi count filter
SDCountFilter_evt_sf    : 500
SDCountFilter_sf        : 1
#prescale factors for the "large" strawDigi counter filter
LargeSDCountFilter_evt_sf    : 500
LargeSDCountFilter_sf        : 1
#prescale factor for the calorimeter-only trigger
CaloOnly_evt_sf         : 1
CaloOnly_sf             : 1
#prescale factor for the calorimeter cosmic muon calibration
CaloCosmicMuon_evt_sf         : 1
CaloCosmicMuon_sf             : 1
#prescale factor fot the tracker-only track triggers
# downstream e-
TPRDeMSeedFilter_evt_sf : 1
TPRDeMSeedFilter_sf     : 1
# downstream e+
TPRDePSeedFilter_evt_sf : 1
TPRDePSeedFilter_sf     : 1
#prescale factor fot the calo-seeded track triggers
# downstream e-
CPRDeMSeedFilter_evt_sf : 1
CPRDeMSeedFilter_sf     : 1
# downstream e+
CPRDePSeedFilter_evt_sf : 1
CPRDePSeedFilter_sf     : 1
END_PROLOG

#include "Trigger/fcl/templates.fcl"

process_name : globalTrigger

source :
{
    module_type : RootInput
}
# we don't need any simulation services for this job
services : @local::Services.Reco

services : {
    message               : @local::default_message
    TFileService          : { fileName : "globalTrigger.root" }

    RandomNumberGenerator : { }
    #   Timing                : { }

    GeometryService        : { inputFile      : "Mu2eG4/geom/geom_common.txt"          }
    ConditionsService      : { conditionsfile : "Mu2eG4/test/conditions_01.txt"        }
    GlobalConstantsService : { inputFile      : "Mu2eG4/test/globalConstants_01.txt"   }
    G4Helper               : { }
    BTrkHelper             : @local::BTrkHelperDefault
    SeedService            : { @table::automaticSeeds
	baseSeed         :  0
	maxUniqueEngines :  20
    }
    
}

# timing information
services.TimeTracker : {
    dbOutput : {
	filename : ""
#	filename : "runGlobalTrigger.db" #uncomment to create the .db output
	overwrite : true
    }
}

services.scheduler.wantSummary: true

producers    : { @table::Trigger.producers }
filters      : { @table::Trigger.filters   }
analyzers    : { @table::Trigger.analyzers }
paths        : { @table::Trigger.paths     }
outputs      : { @table::Trigger.outputs   }

physics : {
    producers : { @table::producers }

    filters   : { @table::filters }
 
    analyzers : {  

	ReadTriggerInfo : { @table::analyzers.ReadTriggerInfo
	    nFilters      : 35
	    SelecEvents   : [ unbiased_path, 
			      minimumbias_sd_count_pat,
			      large_sd_count_path,
			      calo_only_path,
			      tpr_dem_path, tpr_dep_path, cpr_dem_path, cpr_dep_path ]
	}
	
    }

    #unbiased trigger path
    unbiased_path             : [ @sequence::paths.unbiased                         ]
    
    #minimum bias filters
    minimumbias_sd_count_path : [ @sequence::paths.minimumbias_sd_count             ]

    #path for selecting events with large ammount of strawDigis
    large_sd_count_path       : [ @sequence::paths.large_sd_count                   ]

    #path for the calorimeter only trigger
    calo_only_path            : [ FetchCaloDigis, @sequence::paths.calo_only        ]

    #path for calorimeter cosmic muon calibration
    calo_cosmic_muon_path     : [ FetchCaloDigis, @sequence::paths.calo_cosmic_muon ]

    #paths for TrkPatRec downstream e- and e+
    tpr_dem_path              : [ TPRFetchDigis, @sequence::paths.TPRDeMSeedFilter  ]
    tpr_dep_path              : [ TPRFetchDigis, @sequence::paths.TPRDePSeedFilter  ]

    #paths for CalPatRec downstream e- and e+
    cpr_dem_path              : [ CPRFetchDigis, @sequence::paths.CPRDeMSeedFilter  ]
    cpr_dep_path              : [ CPRFetchDigis, @sequence::paths.CPRDePSeedFilter  ]
    
    # out           : [ ReadTriggerInfo,
    # 		      rootoutUnbiased, 
    # 		      rootoutCaloOnly, 
    # 		      rootoutTrkDem, 
    # 		      rootoutTrkDep
    # 		     ]
    out           : [ ReadTriggerInfo ]
    end_paths     : [ out ]
}

outputs : {
    @table::outputs
}



