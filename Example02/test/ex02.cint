//
// Root script to make some plots directly from the event data, using
// the Toy cylindrical detector.  It also shows how to project a histogram
// from the event data and write it to a file.
// 
// $Id: ex02.cint,v 1.3 2011/05/02 14:29:42 kutschke Exp $
// $Author: kutschke $
// $Date: 2011/05/02 14:29:42 $
//
// Original author Rob Kutschke
//

{

  // With this you can reinvoke the script without exiting root.
  gROOT->Reset();

  // Get rid of grey background on print out.
  gROOT->SetStyle("Plain");

  // Open the input file that contains Mu2e event data.
  TFile* file = new TFile("ex02outputodd.root");

  // Fill a pointer to the event tree.
  TTree* event; file->GetObject("Events",event);

  // Define some aliases for convenience.
  // Be careful about defining short aliases in long scripts!
  event->SetAlias("hx","mu2eToyHits_ex02hitmaker__Ex02.obj._position.dx");
  event->SetAlias("hy","mu2eToyHits_ex02hitmaker__Ex02.obj._position.dy");
  event->SetAlias("hz","mu2eToyHits_ex02hitmaker__Ex02.obj._position.dz");
  event->SetAlias("ph","mu2eToyHits_ex02hitmaker__Ex02.obj._pulseheight");

  // Open window on the screen.
  TCanvas*c = new TCanvas("c", "Test", 0, 0, 900, 900 );

  // Open a postscript file (may be multi-page).
  c->Print("ex02.ps[");

  // Split the window into 4 regions.
  c->Divide(2,2);

  // Make a y vs x scatter plot.
  c->cd(1);
  event->Draw( "hy:hx","","");

  // Make an r vs z scatter plot.
  c->cd(2);
  event->Draw( "sqrt(hx*hx+hy*hy):hz","","");

  // Redefine marker from a point to a blue triangle.
  event->SetMarkerStyle(kOpenTriangleUp);
  event->SetMarkerSize(0.5);
  event->SetMarkerColor(kBlue);

  // Make a y vs x scatter plot for just the first event.
  // Define the axes ourselves.
  c->cd(3);
  TH1F* frame;
  frame = c_3->DrawFrame( -50., -50., 50., 50. );
  frame->SetTitle("Y vs X for event 0");
  event->Draw( "hy:hx","","PSAME",1,0);

  // Make a r vs z scatter plot for just the first event.
  c->cd(4);
  frame = c_4->DrawFrame( -50., -50., 50., 50. );
  frame->SetTitle("R vs Z for event 0");
  event->Draw( "sqrt(hx*hx+hy*hy):hz","","pSAME",1,0);

  // Flush page to and issue continuation prompt.
  c->Update();
  cerr << "Double click in the Canvas to continue:" ;

  // Print this page to the postscript file.
  c->Print("ex02.ps");

  // Wait for response before continuing.
  gPad->WaitPrimitive();

  // Get ready for page 2.
  c->cd(0);
  c->Clear();

  c->Divide(2,2);

  // Y vs X for 2 more event.
  c->cd(1);
  frame = c_1->DrawFrame( -50., -50., 50., 50. );
  frame->SetTitle("Y vs X for events 1(blue) and 2(red)");
  event->SetMarkerColor(kBlue);
  event->Draw( "hy:hx","","PSAME",1,1);
  event->SetMarkerColor(kRed);
  event->Draw( "hy:hx","","PSAME",1,2);

  // R vs Z for 2 more event.
  c->cd(2);
  frame = c_2->DrawFrame( -50., -50., 50., 50. );
  frame->SetTitle("R vs Z for events 1(blue) and 2(red)");
  event->SetMarkerColor(kBlue);
  event->Draw( "sqrt(hx*hx+hy*hy):hz","","pSAME",1,1);
  event->SetMarkerColor(kRed);
  event->Draw( "sqrt(hx*hx+hy*hy):hz","","pSAME",1,2);

  // Y vs X for 2 more event.
  c->cd(3);
  frame = c_3->DrawFrame( -50., -50., 50., 50. );
  frame->SetTitle("Y vs X for events 3(blue) and 4(red)");
  event->SetMarkerColor(kBlue);
  event->Draw( "hy:hx","","PSAME",1,3);
  event->SetMarkerColor(kRed);
  event->Draw( "hy:hx","","PSAME",1,4);

  // R vs Z for 2 more event.
  c->cd(4);
  frame = c_4->DrawFrame( -50., -50., 50., 50. );
  frame->SetTitle("R vs Z for events 3(blue) and 4(red)");
  event->SetMarkerColor(kBlue);
  event->Draw( "sqrt(hx*hx+hy*hy):hz","","pSAME",1,3);
  event->SetMarkerColor(kRed);
  event->Draw( "sqrt(hx*hx+hy*hy):hz","","pSAME",1,4);

  // Flush page to and issue continuation prompt.
  c->Update();
  cerr << "Double click in Canvas to continue:" ;

  // Add this page to the printed output.
  c->Print("ex02.ps");

  // Wait for response before continuing.
  gPad->WaitPrimitive();

  // Get ready for page 3.
  c->cd(0);
  c->Clear();

  c->Divide(1,2);

  // Histogram of the pulseheight within each event.
  // Let root automatically choose the axes.
  c->cd(1);
  event->Draw( "ph","","");

  c->cd(2);
  // The next step is to make another plot of the pulse height 
  // but with some changes.
  //  1) Create a histogram with user defined axes.
  //  2) Fill (project) the histogram from the tree.
  //  3) Plot a copy of the histogram
  //  4) Save the histogram to a new file.
  // Due to the way root works, the first step is to open
  // the output file.

  // Open an output root file to hold any newly created objects.
  TFile* outfile = new TFile("ex02Projection.root","NEW");

  //  Create the histogram in the output file.
  TH1F* hist_ph = new TH1F( "hist_ph",
                            "Pulse Height;(arbitrary units);(y-axis units)",
                            100, 0., 20. );

  // Fill the histogram from the tree.
  event->Project( "hist_ph", "ph");

  // Draw a copy of the histogram.
  hist_ph->DrawCopy("H9");

  // Add this page to the postscript file.
  c->Update();
  c->Print("ex02.ps");

  // Close the postscript file.
  c->Print("ex02.ps]");

  // Close the output file.
  outfile->Write();
  outfile->Close();

 }
