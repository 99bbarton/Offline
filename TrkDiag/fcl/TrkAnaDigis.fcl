#
#  This script runs the TrackAnalsys module to create a prototype track-based analysis TTree.  For example:
#  > mu2e --config TrkDiag/test/TrkAna.fcl --source-list (your files) --TFile TrkAna.root --nevts=100
# will process 100 events from (your files).  Note that background mixing requires different scripts
# for interactive and grid processing
#
# David Brown (LBNL) 13 July 2016
#
#include "fcl/minimalMessageService.fcl"
#include "fcl/standardProducers.fcl"
#include "fcl/standardServices.fcl"
#include "TrkDiag/fcl/prolog.fcl"

process_name : TrkAna

source : { module_type : RootInput }

services : @local::Services.Reco

physics :
{
  producers : @local::TrkAna.producers
  analyzers : @local::TrkAna.analyzers

  # For other diagnostic trees (e.g. SHD (StrawHitDiag) or HD (HelixDiag)) comment out the above line
  # and comment in the below line
  # analyzers : { @table::TrkAna.analyzers
  # 	      	  @table::TrkDiag.analyzers
  #  		}
  # Then add the modules to TrkAnaEndPath below e.g.
  # physics.TrkAnaEndPath : [ @sequence::TrkAna.EndSequence, SHD, HD ]
  #
  # A list of diagnostic trees can be found in TrkDiag/fcl/prolog.fcl
}

physics.TrkAnaTriggerPath : [ @sequence::TrkAna.TrkCaloRecoSequence ]
physics.TrkAnaEndPath : [ @sequence::TrkAna.EndSequence ]

# You can add detailed (hit) information to the TTree by setting diagLevel to 2
physics.analyzers.TrkAna.diagLevel : 1

# update labels to read compressed output from MDC2018
physics.producers.CrvCoincidenceClusterSummarizer.crvWaveformsModuleLabel : "compressDigiMCs"
physics.producers.CrvCoincidenceClusterSummarizer.timeOffsets.inputs : [ "compressDigiMCs:protonTimeMap", "compressDigiMCs:muonTimeMap" ]