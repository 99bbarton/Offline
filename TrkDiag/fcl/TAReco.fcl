#
#  This script runs the TrackAnalsys module to create a prototype track-based analysis TTree.  For example:
#  > mu2e --config TrkDiag/test/TrkAnaDigis.fcl --source-list (your files) --TFile TrkAna.root --nevts=100
# will process 100 events from (your files).
#
# David Brown (LBNL) 13 July 2016
#
#include "fcl/minimalMessageService.fcl"
#include "fcl/standardProducers.fcl"
#include "fcl/standardServices.fcl"
#include "TrkDiag/fcl/prolog.fcl"
#include "JobConfig/reco/prolog.fcl"

process_name : TrkAnaDigis

source : { module_type : RootInput }

services : @local::Services.Reco

physics :
{
  producers : {
    @table::Reconstruction.producers
    TrkQualDeM : @local::TrkQualDeM
  }
  filters : @local::Reconstruction.filters
  analyzers: {
    @table::Reconstruction.analyzers
    @table::TrkAna.analyzers
  }
#  RecoPath : [ @sequence::Reconstruction.RecoPath ]
  RecoPath : [ @sequence::Reconstruction.RecoPath, TrkQualDeM ]
  EndPath : [ RecoCheck, TrkAnaReco  ]
}
# use TrkPatRec
physics.producers.KSFDeM.SeedCollection : "HelixFindere:Positive"
physics.producers.KSFDeP.SeedCollection : "HelixFindere:Negative"
physics.producers.KSFDmuM.SeedCollection : "HelixFinderMu:Positive"
physics.producers.KSFDmuP.SeedCollection : "HelixFinderMu:Negative"

#physics.producers.SelectRecoMC.debugLevel : 1

services.TFileService.fileName: "nts.owner.trkanareco.version.sequencer.root"
physics.producers.CrvCoincidenceClusterMatchMC.crvWaveformsModuleLabel : "compressDigiMCs"
physics.producers.CrvCoincidenceClusterMatchMC.timeOffsets.inputs : [ "compressDigiMCs:protonTimeMap", "compressDigiMCs:muonTimeMap" ]

#include "JobConfig/reco/epilog.fcl"
#
#physics.producers.SelectRecoMC.debugLevel : 3

