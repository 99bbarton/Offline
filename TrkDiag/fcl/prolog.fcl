#include "CRVResponse/fcl/prolog.fcl"
#include "CaloMC/fcl/prolog.fcl"
#include "CaloReco/fcl/prolog.fcl"
#include "CaloCluster/fcl/prolog.fcl"
#include "TrkHitReco/fcl/prolog.fcl"
#include "TrkPatRec/fcl/prolog.fcl"
#include "TrkDiag/fcl/KalDiag.fcl"

BEGIN_PROLOG

# prolog which should be elsewhere, FIXME
  pidPathBins: [ 0., 50., 100., 150., 200., 250., 300., 1.e12 ]

  TrkCaloDiag : {
    PIDdt : {
      signalHypothesis: {
	inputFile: "ConditionsService/data/v5_7_2/pid_ele_dt.tbl"
      }
      backgroundHypothesis: {
	inputFile: "ConditionsService/data/v5_7_2/pid_muo_dt.tbl"
      }
    }
    PIDEp : {
      signalHypothesis: {
	inputFile: "ConditionsService/data/v5_7_2/pid_ele_ep_vs_path.tbl"
	pathBinBoundaries: @local::pidPathBins
      }
      backgroundHypothesis: {
	inputFile: "ConditionsService/data/v5_7_2/pid_muo_ep_vs_path.tbl"
	pathBinBoundaries: @local::pidPathBins
      }
    }
    caloMatchingRoot : "TrackCaloMatchingTRF"
  }

  CrvRecoSequence : [ CrvRecoPulses, CrvCoincidence, CrvCoincidenceClusterFinder, CrvCoincidenceClusterMatchMC ]
#Generic ReadKalFits config.  These only work for CD3
  ReadKalFits : {
    module_type: ReadKalFits
    fitterModuleLabel: KFFDeM
    KalDiag : @local::KalDiagReadMDC # configure KalDiag to read MDC2018 data files
    TrkCaloDiag : @local::TrkCaloDiag
    eventWeightModules : [ ]
  }
  ReadKalFitsMix : @local::ReadKalFits
  ReadKalFitsMix.eventWeightModules : [ protonBunchSummarizer  ]
  ReadKalFitsMix.beamWeightModule : protonBunchSummarizer
# Diagnostic modules    
  BD : {
	module_type : BkgDiag
	StrawDigiMCCollection : "compressDigiMCs"
	ComboHitCollection : "makePH"
	StrawHitFlagCollection : "FlagBkgHits:ComboHits"
	UseFlagCollection : true
	TimeOffsets : {
	  inputs : [ @sequence::DigiCompression.TimeMaps ]
	}
  }
  
  TRD : {
    module_type : TrkRecoDiag
    StrawDigiMCCollection : "compressDigiMCs"
    VDStepPointMCCollection : "compressDigiMCs:virtualdetector"
    TimeOffsets : {
      inputs : [ @sequence::DigiCompression.TimeMaps ]
    }
  }

  SHD : {
	module_type : StrawHitDiag
	StrawDigiMCCollection : "compressDigiMCs"
	ComboHitFlag : false
	StrawHitFlagCollection : "FlagBkgHits:StrawHits"
	TimeOffsets : {
	  inputs : [ @sequence::DigiCompression.TimeMaps ]
	}
  }


# reco path
  TCD : {
	module_type : TimeClusterDiag
	StrawDigiMCCollection : "compressDigiMCs"
	ComboHitCollection : "makePH"
	UseFlagCollection : true
	StrawHitFlagCollection : "FlagBkgHits:ComboHits"
	HitSelectionBits	    : ["EnergySelection","TimeSelection","RadiusSelection"]
	HitBackgroundBits	    : ["Background"]
	TimeOffsets         :  { inputs : [ @sequence::DigiCompression.TimeMaps ] }
        ClusterMVA : { MVAWeights : "TrkPatRec/test/TimeCluster.weights.xml" }
        ClusterCaloMVA : { MVAWeights : "TrkPatRec/test/TimeClusterCalo.weights.xml" }
	PlotTimeSpectra : false
	VDStepPointMCCollection : "compressDigiMCs:virtualdetector"
        T0Calculator : { CaloT0Offset : @local::TrackCaloMatching.DtOffset }
    }

  HD : {
	module_type : HelixDiag
	StrawDigiMCCollection : "compressDigiMCs"
	VDStepPointMCCollection : "compressDigiMCs:virtualdetector"
	HelixSeedCollection : "HelixFinder:Positive"
	ComboHitCollection : "makePH"
	UseFlagCollection : true
	StrawHitFlagCollection : "FlagBkgHits:ComboHits"
	PlotHelices : false
	InclusivePlotFlagBits : ["HitsOK"]
	TimeOffsets         :  { inputs : [ @sequence::DigiCompression.TimeMaps ] }
  }

  CHD : {
	module_type : ComboHitDiag
	StrawDigiMCCollection : "compressDigiMCs"
	ComboHitCollection : "makePH"
	UseFlagCollection : true
	StrawHitFlagCollection : "FlagBkgHits:ComboHits"
	TimeOffsets : {
	  inputs : [ @sequence::DigiCompression.TimeMaps ]
	}
  }

# track trigger path
  TTTCD : {
	@table::TCD
	UseFlagCollection : false
	StrawHitFlagCollection : none
	ComboHitCollection : TTflagBkgHits
	TimeClusterCollection : TTtimeClusterFinder
  }

  TTHD : {
	@table::HD
	ComboHitCollection : TTflagBkgHits
	HelixSeedCollection : "TThelixFinder:Positive"
	UseFlagCollection : false
	StrawHitFlagCollection : none
  }

  TTCHD : {
	@table::CHD
	UseStrawHitFlagCollection : false
	ComboHitCollection : TTflagBkgHits
  }

# Prototype track analysis config.
  TrackAnalysis : {
    module_type : TrackAnalysis
    KalFinalTagRoot : KFF
    TrkQualTagRoot : TrkQual
#   KalDiag : @local::KalDiagReadCD3 # configure KalDiag to read CD3 Beam Sim Particles
    KalDiag : @local::KalDiagReadMDC # configure KalDiag to read MDC2018 data
    # change this if reading cosmic data or generating inline
    TrkCaloDiag : @local::TrkCaloDiag
    CrvCoincidenceModuleLabel : "CrvCoincidenceClusterFinder"
    CrvCoincidenceMCModuleLabel : "CrvCoincidenceClusterMatchMC"
    # want to keep track of the mean beam intensity that was assumed in the simulation
    MeanBeamIntensity : "protonBunchIntensity:MeanIntensity"
    PBIWeightTag : "PBIWeight"
  }
# TrkCaloIntersection by default looks for merged tracks; repoint to the tracker-found tracks
  TrackCaloMatching : { @table::TrackCaloMatching 
    producers : { @table::TrackCaloMatching.producers 
      TrackCaloIntersectionTRFDem : { @table::TrackCaloMatching.producers.TrackCaloIntersectionDem
	fitterModuleLabel : KFFDeM
      }
      TrackCaloMatchingTRFDem : { @table::TrackCaloMatching.producers.TrackCaloMatchingDem
	fitterModuleLabel : KFFDeM
	trkToCaloExtrapolModuleLabel: TrackCaloIntersectionTRFDem
      }
      TrackCaloIntersectionTRFDep: { @table::TrackCaloMatching.producers.TrackCaloIntersectionDep
	fitterModuleLabel : KFFDeP
      }
      TrackCaloMatchingTRFDep : { @table::TrackCaloMatching.producers.TrackCaloMatchingDep
	fitterModuleLabel : KFFDeP
	trkToCaloExtrapolModuleLabel: TrackCaloIntersectionTRFDep
      }
    }
  }
  
  TrackCaloMatching.matching_dem_TRF : [ TrackCaloIntersectionTRFDem, TrackCaloMatchingTRFDem ]
  TrackCaloMatching.matching_dep_TRF : [ TrackCaloIntersectionTRFDep, TrackCaloMatchingTRFDep ]

  # Track qulaity module
  TrkQual : {
  	  module_type : TrackQuality
  	  TrkQualMVA : { MVAWeights : "TrkDiag/test/TrkQualCalo.weights.xml" }
  }
  TrkQualDeM		       : @local::TrkQual
  TrkQualDeM.KalSeedCollection : "KFFDeM"
  TrkQualUeM		       : @local::TrkQual
  TrkQualUeM.KalSeedCollection : "KFFUeM"
  TrkQualDmuM		       : @local::TrkQual
  TrkQualDmuM.KalSeedCollection : "KFFDmuM"
  TrkQualDeP		       : @local::TrkQual
  TrkQualDeP.KalSeedCollection : "KFFDeP"
  TrkQualUeP		       : @local::TrkQual
  TrkQualUeP.KalSeedCollection : "KFFUeP"
  TrkQualDmuP		       : @local::TrkQual
  TrkQualDmuP.KalSeedCollection : "KFFDmuP"

  TrkDiag : {
    analyzers : {
      TCD : @local::TCD
      CHD : @local::CHD
      SHD : @local::SHD
      HD : @local::HD
      TRD : @local::TRD
      RKF : @local::ReadKalFits
      TTCHD : @local::TTTCD
      TTTCD : @local::TTTCD
      TTHD : @local::TTHD
      BD : @local::BD
    }
  }

# aggregate the prolog to produce the stanard analysis chain
  TrkAna : {

    producers : {
      @table::TrkHitReco.producers
      @table::Tracking.producers
      @table::CaloReco.producers
      @table::CaloCluster.producers
      @table::TrackCaloMatching.producers
      @table::CrvResponsePackage.producers

  # DIO weighting for flat spectrum electrons
      DIOWeight: {
	module_type: DecayInOrbitWeight
	weightingScheme : pol58
	inputModule : compressDigiMCs
	verbosityLevel: 1
      }
      # converts ProtonBunchIntensity object to EventWeight object
      PBIWeight : { 
        module_type : PBIWeight
      	PBITag : "protonBunchIntensity"
	meanPBITag : "protonBunchIntensity:MeanIntensity"
      }
      #Example configuration of RMCWeightModule
      RMCWeight : { 
        module_type : RMCWeight
        kinematic_endpoint : 100
        internalConversion : 1
        verbosityLevel : 0
      }
      dioLLWeight : { module_type : BinnedSpectrumWeight
      		      genParticleTag : "compressDigiMCs"
		      genParticlePdgId : 11
		      genParticleGenId : dioTail
		      spectrumFileName : "ConditionsService/data/czarnecki_szafron_Al_2016.tbl"
		      BinCenter : false
      }

      TrkQualDeM : @local::TrkQualDeM
      TrkQualUeM : @local::TrkQualUeM
      TrkQualDeP : @local::TrkQualDeP
      TrkQualUeP : @local::TrkQualUeP
      TrkQualDmuM : @local::TrkQualDmuM
      TrkQualDmuP : @local::TrkQualDmuP
    }
    analyzers : {
      genCountLogger: { module_type: GenEventCountReader }
      TrkAnaNeg: {
        @table::TrackAnalysis
        TrkParticle : 11
      }
      TrkAnaPos: {
        @table::TrackAnalysis
        TrkParticle : -11
      }
    }
  
    # diagnostic Reco sequences starting from digis
    EventWeightSequence : [ PBIWeight ]

    TrkQualSequence : [ TrkQualDeM, TrkQualUeM, TrkQualDmuM,
    		      	TrkQualDeP, TrkQualUeP, TrkQualDmuP ]

    TrkRecoSequence : [ @sequence::TrkHitReco.PrepareHits,
		     @sequence::Tracking.TPRDeM,
		     @sequence::Tracking.TPRUeM,
		     @sequence::Tracking.TPRDmuM,
                     @sequence::Tracking.TPRDeP,
                     @sequence::Tracking.TPRUeP,
                     @sequence::Tracking.TPRDmuP ]

    CaloRecoSequence : [ @sequence::CaloReco.Reco,
			 @sequence::CaloCluster.Reco ]

    CrvRecoSequence : [ CrvRecoPulses, CrvCoincidence, CrvCoincidenceClusterFinder, CrvCoincidenceClusterMatchMC ]

    EndSequence : [ TrkAnaNeg, TrkAnaPos ]

  }
TrkCaloMatchSequence : [ @sequence::TrackCaloMatching.matching_dem_TRF, 
                         @sequence::TrackCaloMatching.matching_dep_TRF ]
  # aggregate these for convenience
TrkAna.TrkCaloRecoSequence : [ @sequence::TrkAna.EventWeightSequence,
			    @sequence::TrkAna.CaloRecoSequence,
			    @sequence::TrkAna.TrkRecoSequence,
			    @sequence::TrkAna.TrkQualSequence,
		            @sequence::TrkCaloMatchSequence ]
TrkAna.TrkCaloCrvRecoSequence : [ @sequence::TrkAna.TrkCaloRecoSequence,
				 @sequence::TrkAna.CrvRecoSequence ]


# Analysis from reco output: beta protype!
# DeM only for now
  DeM : { input : "KFFDeM" branch : "de" }
  UeM : { input : "KFFUeM" branch : "ue" }
  DmuM : { input : "KFFDmuM" branch : "dm" }
  DeP : { input : "KFFDeP" branch : "de" }
  UeP : { input : "KFFUeP" branch : "ue" }
  DmuP : { input : "KFFDmuP" branch : "dm" }

  TrackAnalysisReco : {
    module_type : TrackAnalysisReco
    DeTrkQualTag : "TrkQualDeM"
    RecoCountTag : "SelectRecoMC"
    CaloCrystalHitMapTag : "SelectRecoMC"
    MeanBeamIntensity : "protonBunchIntensity:MeanIntensity"
    PBIWeightTag : "PBIWeight"
    CrvCoincidenceModuleLabel : "SelectRecoMC"
    CrvCoincidenceMCModuleLabel : "compressRecoMCs"
    FillMCInfo : true
    ProcessEmptyEvents : false
    AnalyzeCRV : false
    PrimaryParticleTag : "compressRecoMCs"
    KalSeedMCAssns : "SelectRecoMC"
    CaloClusterMCAssns : "SelectRecoMC"
    InfoMCStructHelper : {
      SimParticleCollectionTag : "compressRecoMCs"
      TimeMaps : [ @sequence::RecoCompression.TimeMaps ]
      MinGoodMomFraction : 0.9
    }
  }

TrkAnaReco : {

   producers: {
      PBIWeight : { @table::TrkAna.producers.PBIWeight
      		    PBITag : "SelectRecoMC" }
      TrkQualDeM : @local::TrkAna.producers.TrkQualDeM
      TrkQualUeM : @local::TrkAna.producers.TrkQualUeM
      TrkQualDeP : @local::TrkAna.producers.TrkQualDeP
      TrkQualUeP : @local::TrkAna.producers.TrkQualUeP
      TrkQualDmuM : @local::TrkAna.producers.TrkQualDmuM
      TrkQualDmuP : @local::TrkAna.producers.TrkQualDmuP
   }

   analyzers : {
      TrkAnaNeg : { @table::TrackAnalysisReco 
      		    candidate : @local::DeM
		    supplements : [ @local::UeM, @local::DmuM ]
		  }
      TrkAnaPos : { @table::TrackAnalysisReco
      		    candidate : @local::DeP
		    supplements : [ @local::UeP, @local::DmuP ]
		    DeTrkQualTag : "TrkQualDeP" 
		  }

      genCountLogger : @local::TrkAna.analyzers.genCountLogger
   }

   TrigSequence : [ PBIWeight, TrkQualDeM, TrkQualDeP  ]
   EndSequence : [ TrkAnaNeg, TrkAnaPos, genCountLogger ]
}

END_PROLOG
