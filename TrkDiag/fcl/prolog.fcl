BEGIN_PROLOG
# Note that KalDiag must be configured differently depending on whether you are
# reading data generated inline, or are reading data output through Read
  KalDiag : {
    MCPtrLabel	      : makeSH
    StrawHitMCLabel     : makeSH
    TimeOffsets         :  { inputs : [ "protonTimeMap", "muonTimeMap" ] }
  }
# If running KalDiag directly on G4 use KalDiagDirect
  KalDiagDirect			  : @local::KalDiag
  KalDiagDirect.MCStepsLabel        : g4run
  KalDiagDirect.SimParticleLabel    : g4run
  KalDiagDirect.SimParticleInstance : "" 
# Production samples use Read, which requires the following setup
  KalDiagRead			  : @local::KalDiag
  KalDiagRead.MCStepsLabel        : detectorFilter
  KalDiagRead.SimParticleLabel    : detectorFilter
# TDR samples gave an instance name to the sim particle collection, CD3 and beyond won't
  KalDiagReadTDR : @local::KalDiagRead
  KalDiagReadTDR.SimParticleInstance : "s0"
# CD3 beam data have no instance labels
  KalDiagReadCD3 : @local::KalDiagRead
  KalDiagReadCD3.SimParticleInstance : ""
# CD3 Cosmic data have different filter module labels
  KalDiagReadCD3Cosmics			  : @local::KalDiagReadCD3
  KalDiagReadCD3Cosmics.MCStepsLabel        : cosmicFilter
  KalDiagReadCD3Cosmics.SimParticleLabel    : cosmicFilter

# prolog which should be elsewhere, FIXME
  pidPathBins: [ 0., 50., 100., 150., 200., 250., 300., 1.e12 ]
  CaloSim : {
    producers: {
      MakeCaloReadoutHits  : @local::MakeCaloReadoutHits
    }
    MakeHits : [ MakeCaloReadoutHits ]
  }
  CaloReco : {
    producers : {
      MakeCaloCrystalHits  : @local::MakeCaloCrystalHitsNew
      MakeCaloProtoCluster : @local::MakeCaloProtoCluster
      MakeCaloCluster      : @local::MakeCaloCluster
    }
    MakeClusters : [ MakeCaloCrystalHits, MakeCaloProtoCluster, MakeCaloCluster ]
  }
  TrkCaloDiag : {
    PIDdt : {
      signalHypothesis: {
	inputFile: "ConditionsService/data/v5_7_2/pid_ele_dt.tbl"
      }
      backgroundHypothesis: {
	inputFile: "ConditionsService/data/v5_7_2/pid_muo_dt.tbl"
      }
    }
    PIDEp : {
      signalHypothesis: {
	inputFile: "ConditionsService/data/v5_7_2/pid_ele_ep_vs_path.tbl"
	pathBinBoundaries: @local::pidPathBins
      }
      backgroundHypothesis: {
	inputFile: "ConditionsService/data/v5_7_2/pid_muo_ep_vs_path.tbl"
	pathBinBoundaries: @local::pidPathBins
      }
    }
  }
#Generic ReadKalFits config.  These only work for CD3
  ReadKalFits : {
    module_type: ReadKalFits
    fitterModuleLabel: TRFDownstreameMinus
    KalDiag : @local::KalDiagReadCD3 # configure KalDiag to read CD3 data files
    TrkCaloDiag : @local::TrkCaloDiag
    eventWeightModules : [ ]
  }
  ReadKalFitsMix : @local::ReadKalFits
  ReadKalFitsMix.eventWeightModules : [ protonBunchSummarizer  ]
  ReadKalFitsMix.beamWeightModule : protonBunchSummarizer
# Prototype track analysis config.
  TrackAnalysis : {
    module_type : TrackAnalysis
    DownstreameMinusTrackTag : "TRFDownstreameMinus:DownstreameMinus" # instance key needed for CD3
    UpstreameMinusTrackTag : "TRFUpstreameMinus:UpstreameMinus" # instance key needed for CD3
    DownstreammuMinusTrackTag : "TRFDownstreammuMinus:DownstreammuMinus" # instance key needed for CD3
    KalDiag : @local::KalDiagReadCD3 # configure KalDiag to read CD3 data files
    TrkCaloDiag : @local::TrkCaloDiag
    eventWeightModules : [ ]
  }

# aggregate some existing prolog: THIS DOESN'T WORK as reco prolog is also sourcing TrkDiag prolog FIXME!!!
#  analysisProduces : {
#    @table::EventMixing.producers
#    @table::Tracking.producers
#    @table::CaloSim.producers
#    @table::CaloReco.producers
#    @table::TrackCaloMatching.producers
#  }

END_PROLOG

