#include "CRVResponse/fcl/prolog.fcl"
#include "CaloMC/fcl/prolog.fcl"
#include "CaloReco/fcl/prolog.fcl"
#include "CaloCluster/fcl/prolog.fcl"
#include "TrkHitReco/fcl/prolog.fcl"
#include "TrkPatRec/fcl/prolog.fcl"
#include "TrkDiag/fcl/KalDiag.fcl"

BEGIN_PROLOG

# prolog which should be elsewhere, FIXME
  pidPathBins: [ 0., 50., 100., 150., 200., 250., 300., 1.e12 ]

  TrkCaloDiag : {
    PIDdt : {
      signalHypothesis: {
	inputFile: "ConditionsService/data/v5_7_2/pid_ele_dt.tbl"
      }
      backgroundHypothesis: {
	inputFile: "ConditionsService/data/v5_7_2/pid_muo_dt.tbl"
      }
    }
    PIDEp : {
      signalHypothesis: {
	inputFile: "ConditionsService/data/v5_7_2/pid_ele_ep_vs_path.tbl"
	pathBinBoundaries: @local::pidPathBins
      }
      backgroundHypothesis: {
	inputFile: "ConditionsService/data/v5_7_2/pid_muo_ep_vs_path.tbl"
	pathBinBoundaries: @local::pidPathBins
      }
    }
    caloMatchingRoot : "TrackCaloMatchingTRF"
  }

  CrvRecoSequence : [ CrvRecoPulses, CrvCoincidence, CrvCoincidenceClusterFinder, CrvCoincidenceClusterSummarizer ]
#Generic ReadKalFits config.  These only work for CD3
  ReadKalFits : {
    module_type: ReadKalFits
    fitterModuleLabel: KFFDeM
    KalDiag : @local::KalDiagReadMDC # configure KalDiag to read MDC2018 data files
    TrkCaloDiag : @local::TrkCaloDiag
    eventWeightModules : [ ]
  }
  ReadKalFitsMix : @local::ReadKalFits
  ReadKalFitsMix.eventWeightModules : [ protonBunchSummarizer  ]
  ReadKalFitsMix.beamWeightModule : protonBunchSummarizer
# Diagnostic modules    
  BD : {
	module_type : BkgDiag
	StrawDigiMCCollection : "compressDigiMCs"
	ComboHitCollection : "makePH"
	StrawHitFlagCollection : "FlagBkgHits:ComboHits"
	UseFlagCollection : true
	TimeOffsets : {
	  inputs : [ "compressDigiMCs:protonTimeMap", "compressDigiMCs:muonTimeMap" ]
	}
  }
  
  TRD : {
    module_type : TrkRecoDiag
    StrawDigiMCCollection : "compressDigiMCs"
    VDStepPointMCCollection : "compressDigiMCs:virtualdetector"
    TimeOffsets : {
      inputs : [ "compressDigiMCs:protonTimeMap", "compressDigiMCs:muonTimeMap" ] 
    }
  }

  SHD : {
	module_type : StrawHitDiag
	StrawDigiMCCollection : "compressDigiMCs"
	ComboHitFlag : false
	StrawHitFlagCollection : "FlagBkgHits:StrawHits"
	TimeOffsets : {
	  inputs : [ "compressDigiMCs:protonTimeMap", "compressDigiMCs:muonTimeMap" ] 
	}
  }


# reco path
  TCD : {
	module_type : TimeClusterDiag
	StrawDigiMCCollection : "compressDigiMCs"
	ComboHitCollection : "makePH"
	MinimumCEHits : 1
	UseFlagCollection : true
	MinNHits : 1
	//TestFlag : true
	StrawHitFlagCollection : "FlagBkgHits:ComboHits"
	HitSelectionBits	    : ["EnergySelection","TimeSelection","RadiusSelection"]
	HitBackgroundBits	    : ["Background"]
	TimeOffsets         :  { inputs : [ "compressDigiMCs:protonTimeMap", "compressDigiMCs:muonTimeMap" ] }
	PeakCleanMVA : { MVAWeights : "TrkPatRec/test/TimePeak.weights.xml" }
	PlotTimeSpectra : true
	TimeClusterCollection : TimeClusterFinder //S. Middleton
      }

  HD : {
	module_type : HelixDiag
	StrawDigiMCCollection : "compressDigiMCs"
	VDStepPointMCCollection : "compressDigiMCs:virtualdetector"
	HelixSeedCollection : "HelixFinder:Positive"
	ComboHitCollection : "makePH"
	UseFlagCollection : true
	StrawHitFlagCollection : "FlagBkgHits:ComboHits"
	PlotHelices : true
	SaveHelixFlag : ["HitsOK"]
	TimeOffsets         :  { inputs : [ "compressDigiMCs:protonTimeMap", "compressDigiMCs:muonTimeMap" ] }
  }

  CHD : {
	module_type : ComboHitDiag
	StrawDigiMCCollection : "compressDigiMCs"
	ComboHitCollection : "makePH"
	UseFlagCollection : true
	StrawHitFlagCollection : "FlagBkgHits:ComboHits"
	TimeOffsets : {
	  inputs : [ "compressDigiMCs:protonTimeMap", "compressDigiMCs:muonTimeMap" ]
	}
  }
  
  CosmicAnalysis : {
	module_type : CosmicAnalyzer
	ComboHitCollection : "makePH"
	TimeClusterCollection : TimeClusterFinderCosmics
        CosmicTrackSeedCollection : CosmicTrackFinder
	StrawDigiMCCollection : "compressDigiMCs"
	TimeOffsets : {
	  inputs : [ "compressDigiMCs:protonTimeMap", "compressDigiMCs:muonTimeMap" ]
	}
  }

CosmicFitDisplay : {
	module_type : CosmicFitDisplay
	ComboHitCollection : "makeSH"
        _chtag : "makeSH"
        _tctag : TimeClusterFinderCosmics
        _sttag : StraightTrackFinder
        doDisplay            : true
	TimeClusterCollection : TimeClusterFinderCosmics
        StraightTrackSeedCollection : StraightTrackFinder
        
  }

CosmicMuonInfo : {
	module_type : CosmicMuonInfo
	strawDigisTag   : "makeSD"
	strawHitsTag    : "makeSH"
	panelHitsTag    : "makePH"
	strawDigiMCsTag : "compressDigiMCs"
	caloDigisTag    : "CaloDigiFromShower"
	diagLevel       : 0
	filterCuts      : {
	pmin          : 200. # MeV/c set low 
	pmax          : 1000000. # MeV/c currnetly not using 
	minStrawDigis :   10  # Minimum number of digis made by the primary muon
	minPlanes     :    3  # Minimum number of planes hit by the muon track
	minBackground :    0  # Make > 0 to select events with background digis
	maxBackground : 9999  # Make a small number to limit digis not from the muon
	  }
}
        
        
 

# track trigger path
  TTTCD : {
	@table::TCD
	UseFlagCollection : false
	StrawHitFlagCollection : none
	ComboHitCollection : TTflagBkgHits
	TimeClusterCollection : TTtimeClusterFinder
  }

  TTHD : {
	@table::HD
	ComboHitCollection : TTflagBkgHits
	HelixSeedCollection : "TThelixFinder:Positive"
	UseFlagCollection : false
	StrawHitFlagCollection : none
  }

  TTCHD : {
	@table::CHD
	UseStrawHitFlagCollection : false
	ComboHitCollection : TTflagBkgHits
  }

# Prototype track analysis config.
  TrackAnalysis : {
    module_type : TrackAnalysis
    KalFinalTagRoot : KFF
#   KalDiag : @local::KalDiagReadCD3 # configure KalDiag to read CD3 Beam Sim Particles
    KalDiag : @local::KalDiagReadMDC # configure KalDiag to read MDC2018 data
    # change this if reading cosmic data or generating inline
    TrkCaloDiag : @local::TrkCaloDiag
    
    CrvCoincidenceModuleLabel : "CrvCoincidenceClusterSummarizer"
    # want to keep track of the mean beam intensity that was assumed in the simulation
    MeanBeamIntensity : "protonBunchIntensity:MeanIntensity"
    PBIWeightTag : "PBIWeight"
  }

# TrkCaloIntersection by default looks for merged tracks; repoint to the tracker-found tracks
  TrackCaloMatching : { @table::TrackCaloMatching 
    producers : { @table::TrackCaloMatching.producers 
      TrackCaloIntersectionTRFDem : { @table::TrackCaloMatching.producers.TrackCaloIntersectionDem
	fitterModuleLabel : KFFDeM
      }
      TrackCaloMatchingTRFDem : { @table::TrackCaloMatching.producers.TrackCaloMatchingDem
	fitterModuleLabel : KFFDeM
	trkToCaloExtrapolModuleLabel: TrackCaloIntersectionTRFDem
      }
      TrackCaloIntersectionTRFDep: { @table::TrackCaloMatching.producers.TrackCaloIntersectionDep
	fitterModuleLabel : KFFDeP
      }
      TrackCaloMatchingTRFDep : { @table::TrackCaloMatching.producers.TrackCaloMatchingDep
	fitterModuleLabel : KFFDeP
	trkToCaloExtrapolModuleLabel: TrackCaloIntersectionTRFDep
      }
    }
  }
  
  TrackCaloMatching.matching_dem_TRF : [ TrackCaloIntersectionTRFDem, TrackCaloMatchingTRFDem ]
  TrackCaloMatching.matching_dep_TRF : [ TrackCaloIntersectionTRFDep, TrackCaloMatchingTRFDep ]

  TrkDiag : {
    analyzers : {
      TCD : @local::TCD
      CHD : @local::CHD
      CosmicAnalysis : @local::CosmicAnalysis
      CosmicFitDisplay : @local::CosmicFitDisplay
      SHD : @local::SHD
      HD : @local::HD
      TRD : @local::TRD
      RKF : @local::ReadKalFits
      TTCHD : @local::TTTCD
      TTTCD : @local::TTTCD
      TTHD : @local::TTHD
      BD : @local::BD
    }
     filters : {
	CosmicMuonInfo: @local::CosmicMuonInfo
     }
  }

# aggregate the prolog to produce the stanard analysis chain
  TrkAna : {
    
    producers : {
      @table::TrkHitReco.producers
      @table::Tracking.producers
      @table::CaloReco.producers
      @table::CaloCluster.producers
      @table::TrackCaloMatching.producers
      @table::CrvResponsePackage.producers
  # DIO weighting for flat spectrum electrons
      DIOWeight: {
	module_type: DecayInOrbitWeight
	inputModule: compressDigiMCs
	verbosityLevel: 1
      }
      # converts ProtonBunchIntensity object to EventWeight object
      PBIWeight : { module_type : PBIWeight
      	PBITag : "protonBunchIntensity"
	meanPBITag : "protonBunchIntensity:MeanIntensity"
      }
    }
    analyzers : {
      genCountLogger: { module_type: GenEventCountReader }
      TrkAnaNeg: {
        @table::TrackAnalysis
        TrkParticle : 11
      }
      TrkAnaPos: {
        @table::TrackAnalysis
        TrkParticle : -11
      }
     
    }
  
    # diagnostic Reco sequences starting from digis
    EventWeightSequence : [ PBIWeight ]
    TrkRecoSequence : [ @sequence::TrkHitReco.PrepareHits,
		     @sequence::Tracking.FindHelices,
		     @sequence::Tracking.TPRDeM,
		     @sequence::Tracking.TPRUeM,
		     @sequence::Tracking.TPRDmuM,
                     @sequence::Tracking.TPRDeP,
                     @sequence::Tracking.TPRUeP,
                     @sequence::Tracking.TPRDmuP ]

    CaloRecoSequence : [ @sequence::CaloReco.Reco,
			 @sequence::CaloCluster.Reco ]

    CrvRecoSequence : [ CrvRecoPulses, CrvCoincidence, CrvCoincidenceClusterFinder, CrvCoincidenceClusterSummarizer ]

    EndSequence : [ TrkAnaNeg, TrkAnaPos ]//added

  }
TrkCaloMatchSequence : [ @sequence::TrackCaloMatching.matching_dem_TRF, 
                         @sequence::TrackCaloMatching.matching_dep_TRF ]
  # aggregate these for convenience
TrkAna.TrkCaloRecoSequence : [ @sequence::TrkAna.EventWeightSequence,
			    @sequence::TrkAna.TrkRecoSequence,
			    @sequence::TrkAna.CaloRecoSequence,
		            @sequence::TrkCaloMatchSequence ]
TrkAna.TrkCaloCrvRecoSequence : [ @sequence::TrkAna.TrkCaloRecoSequence,
				 @sequence::TrkAna.CrvRecoSequence ]

END_PROLOG
