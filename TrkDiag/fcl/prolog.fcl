#include "standardProducers.fcl"
# the following should be included in this file, but the use of KalDiag in reco introduces
# a dependency loop, FIXME!
#include "TrkDiag/fcl/KalDiag.fcl"
BEGIN_PROLOG
# prolog which should be elsewhere, FIXME
  pidPathBins: [ 0., 50., 100., 150., 200., 250., 300., 1.e12 ]
  CaloSim : {
    producers: {
      MakeCaloReadoutHits  : @local::MakeCaloReadoutHits
    }
    MakeHits : [ MakeCaloReadoutHits ]
  }
  CaloReco : {
    producers : {
      MakeCaloCrystalHits  : @local::MakeCaloCrystalHitsNew
      MakeCaloProtoCluster : @local::MakeCaloProtoCluster
      MakeCaloCluster      : @local::MakeCaloCluster
    }
    MakeClusters : [ MakeCaloCrystalHits, MakeCaloProtoCluster, MakeCaloCluster ]
  }
  TrkCaloDiag : {
    PIDdt : {
      signalHypothesis: {
	inputFile: "ConditionsService/data/v5_7_2/pid_ele_dt.tbl"
      }
      backgroundHypothesis: {
	inputFile: "ConditionsService/data/v5_7_2/pid_muo_dt.tbl"
      }
    }
    PIDEp : {
      signalHypothesis: {
	inputFile: "ConditionsService/data/v5_7_2/pid_ele_ep_vs_path.tbl"
	pathBinBoundaries: @local::pidPathBins
      }
      backgroundHypothesis: {
	inputFile: "ConditionsService/data/v5_7_2/pid_muo_ep_vs_path.tbl"
	pathBinBoundaries: @local::pidPathBins
      }
    }
    caloMatchingRoot : "TrackCaloMatchingTRF"
  }
#Generic ReadKalFits config.  These only work for CD3
  ReadKalFits : {
    module_type: ReadKalFits
    fitterModuleLabel: KFFDeM
    KalDiag : @local::KalDiagReadCD3 # configure KalDiag to read CD3 data files
    TrkCaloDiag : @local::TrkCaloDiag
    eventWeightModules : [ ]
  }
  ReadKalFitsMix : @local::ReadKalFits
  ReadKalFitsMix.eventWeightModules : [ protonBunchSummarizer  ]
  ReadKalFitsMix.beamWeightModule : protonBunchSummarizer
# Prototype track analysis config.
  TrackAnalysis : {
    module_type : TrackAnalysis
    DownstreameMinusTrackTag : "TRFDownstreameMinus:DownstreameMinus" # instance key needed for CD3
    UpstreameMinusTrackTag : "TRFUpstreameMinus:UpstreameMinus" # instance key needed for CD3
    DownstreammuMinusTrackTag : "TRFDownstreammuMinus:DownstreammuMinus" # instance key needed for CD3
    KalDiag : @local::KalDiagReadCD3 # configure KalDiag to read CD3 data files
    TrkCaloDiag : @local::TrkCaloDiag
    eventWeightModules : [ ]
  }

# TrkCaloIntersection by default looks for merged tracks; repoint to the tracker-found tracks
  TrackCaloMatching : { @table::TrackCaloMatching 
    producers : { @table::TrackCaloMatching.producers 
      TrackCaloIntersectionTRFDem : { @table::TrackCaloMatching.producers.TrackCaloIntersectionDem
	fitterModuleLabel : TRFDownstreameMinus
      }
      TrackCaloMatchingTRFDem : { @table::TrackCaloMatching.producers.TrackCaloMatchingDem
	fitterModuleLabel : TRFDownstreameMinus
	trkToCaloExtrapolModuleLabel: TrackCaloIntersectionTRFDem
      }
    }
  }
  
  TrackCaloMatching.matching_dem_TRF : [ TrackCaloIntersectionTRFDem, TrackCaloMatchingTRFDem ]
 
# aggregate the prolog to produce the stanard analysis chain
  TrkAna : {

    filters : {
      @table::EventMixing.filters
    }
    producers : {
      @table::EventMixing.producers
      @table::Tracking.producers
      @table::CaloSim.producers
      @table::CaloReco.producers
      @table::TrackCaloMatching.producers
  # DIO weighting for flat spectrum electrons
      DIOWeight: {
	module_type: DecayInOrbitWeight
	inputModule: generate
	verbosityLevel: 1
      }
    }
    analyzers : {
      genCountLogger: { module_type: GenEventCountReader }
      TrkAna: {
	@table::TrackAnalysis
	# note that these weights will only be applied if the module which
	# produces them is run
	beamWeightTag : protonBunchSummarizer
	generatorWeightTag : DIOWeight
      }
    }
  
    # separate out the sime and reco parts of the sequence
    SimSequence	: [ @sequence::EventMixing.TimeMaps,
		    @sequence::Tracking.DigiSim,
		    @sequence::CaloSim.MakeHits ]
    RecoSequence : [ @sequence::CaloReco.MakeClusters,
		     @sequence::Tracking.TPRDownstreameMinus,
		     @sequence::Tracking.TPRUpstreameMinus,
		     @sequence::Tracking.TPRDownstreammuMinus,
		     @sequence::TrackCaloMatching.matching_dem_TRF ]
    EndSequence : [ TrkAna, genCountLogger ]

  }
  # aggregate these for convenience
  TrkAna.SimAndRecoSequence : [ @sequence::TrkAna.SimSequence, @sequence::TrkAna.RecoSequence ]
  TrkAna.SimAndRecoMixSequence : [ @sequence::EventMixing.CD3Mixers,
    @sequence::TrkAna.SimSequence, @sequence::TrkAna.RecoSequence ]

END_PROLOG



