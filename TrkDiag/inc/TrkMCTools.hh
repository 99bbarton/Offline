//
// Namespace for collecting tools used in MC truth evaluation
// Original author: Dave Brown (LBN) 8/10/2016
//
#ifndef TrkDiag_TrkMCTools_hh
#define TrkDiag_TrkMCTools_hh
#include "MCDataProducts/inc/StrawDigiMC.hh"

namespace mu2e {
  namespace TrkMCTools {
// find the StepPointMC associated with the threshold crossing.
    art::Ptr<StepPointMC> const& threshStep(StrawDigiMC const& mcdigi) {
      static art::Ptr<StepPointMC> null;
      // use TDC channel 0 unless it doesn't exist
      StrawDigi::TDCChannel itdc = StrawDigi::zero;
      if(!mcdigi.hasTDC(StrawDigi::one)) itdc = StrawDigi::one;
      if(mcdigi.hasTDC(itdc))
	return mcdigi.stepPointMC(itdc);
      else
	return null;
    }
// determine if a hit was generated by signal (conversion electron)
    bool CEDigi(StrawDigiMC const& mcdigi) {
      bool conversion(false);
      art::Ptr<StepPointMC> const& spmcp = threshStep(mcdigi);
      if(spmcp.isNonnull()){
	art::Ptr<SimParticle> const& spp = spmcp->simParticle();
	int gid(-1);
	if(spp->genParticle().isNonnull())
	  gid = spp->genParticle()->generatorId().id();
      // a conversion electron is an electron from the CE generator.  The momentum requirement
      // removes cases where the CE loses a catastrophic amount of energy (ie albedo backsplash
      // from the calorimeter).
	conversion = (spp->pdgId() == 11 && gid == 2 && spmcp->momentum().mag()>90.0);
      }
      return conversion;
    }
  }
}

#endif
