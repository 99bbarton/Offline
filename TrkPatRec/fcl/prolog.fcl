# -*- mode: tcl -*-
#------------------------------------------------------------------------------
# this file is included by fcl/standardProducers.fcl inside the PROLOG section
#------------------------------------------------------------------------------
#include "TrkPatRec/fcl/Particle.fcl"
#include "TrkPatRec/fcl/PanelAmbigResolver.fcl"
BEGIN_PROLOG

PreloadDigiProducts : {
  module_type                 : PreloadDigiProducts
}

# this should go in a general file FIXME!!
FitDir : {
  downstream : 0
  upstream : 1
}
# Hit Filters; these should be in the same package as the modules FIXME!
FSHPreStereo  : {
  module_type : FlagStrawHits
  StrawHitPositionCollectionLabel : ""
  maximumEnergy : 0.01
}

FlagStrawHits  : {
  module_type : FlagStrawHits
  maximumEnergy : 0.0035
}

FlagBkgHits : {
  module_type : FlagBkgHits
  UseBkgMVA : true
  BkgMVA : { MVAWeights : "TrkFilters/data/BkgMVA.weights.xml" }
  MinActiveHits : 3
  MinStereoHits : 0
  MinNPlanes : 2
  MVANames : [ "HitRho", "HitRhoSpread", "ClusterRho", "ZMin", "ZMax", "ZGap", "NPlanes", "PlaneFraction","NHits" ] 
  BkgMVACut : 0.5
  debugLevel : 1
  TLTClusterer : { 
    MaxNIterations : 10
    TimeDifference : 25.0
    MaxDistance : 100.0
    HitDistance : 5.0
    SeedDistance : 25.0
    MaxTimeDifference : 40.0
    BackgroundMask : []
    SignalMask : ["TimeSelection", "EnergySelection"]
  }
}


# time clustering is the 1st stage of track finding 
TimeClusterFinder : {
  module_type               : TimeClusterFinder
  HitSelectionBits	    : ["EnergySelection","TimeSelection","RadiusSelection"]
  HitBackgroundBits	    : ["Background"]
  PeakCleanMVA : { MVAWeights : "TrkPatRec/test/TimePeak.weights.xml" }
  StrawHitFlagCollection    : "FlagBkgHits"
}

RobustHelixFinder : {
  module_type		: RobustHelixFinder
  # Input hits are reqiured to have at least one of these
  HitSelectionBits	    : ["Stereo","TimeDivision"]
  # MVA parameters for outlier filtering
  HelixStereoHitMVA : { MVAWeights : "TrkPatRec/test/HelixStereoHitMVA.weights.xml" }
  HelixNonStereoHitMVA : { MVAWeights : "TrkPatRec/test/HelixNonStereoHitMVA.weights.xml" }
  CenterRadiusCorrection : []
  RadiusCorrection : []
}

# we need both positive and negative helicity helix finders
PosHelixFinder : {
  @table::RobustHelixFinder
  RobustHelixFit : {
    Helicity		: 1
  }
}

NegHelixFinder : {
  @table::RobustHelixFinder
  RobustHelixFit : {
    Helicity		: -1
  }
}

# pattern recognition internals
# Kalman fit configuration for the seed fit (least squares configuration of Kalman fit)
KFSeed : {
  MaxIterations                   : 3
  fieldCorrection	      	  : false
  materialCorrection              : false
  seedsmear       		  : 10000
  maxhitchi                       : 5.0
  # interate the fit twice: once at the physical size of the straw, once at its RMS
  hiterr                          : [ 5.0, 1.44 ]
  ambiguityStrategy       	  : [ 0  , 0    ]
  t0Tolerance			  : [ 5.0, 5.0  ]
  weedhits			  : [ true, true ]
  UnWeed			  : true
  ResolveAfterWeeding		  : false
  AddMaterial			  : [ false, false ]
  initT0			  : false
  updateT0			  : false
}

# Kalman fit configuration for the final track fit.  This also runs the simulated annealing
KFFinal : {
  materialCorrection          : true
  fieldCorrection	      : true
  initT0		      : false
  ResolveAfterWeeding	      : false
  hiterr                      : [ 5.0, 1.5, 0.5, 0.25, 0.125, 0.05, 0.0, 0.0, 0.0]
  t0Tolerance                 : [ 2.0, 1.0, 1.0, 1.0 , 0.5  , 0.5 , 0.2, 0.2, 0.1]
# specific choices for ambiguity resolution
  weedhits		      : @local::PanelAmbig.Weed
  UnWeed		      : true
  AddMaterial		      : [ false, false, false, true, false, false, false, true, true ]
  PanelAmbigResolver          : @local::PanelAmbig.Resolver
  ambiguityStrategy           : @local::PanelAmbig.Strategy
# Extend downstream to the calorimeter by default
  DownstreamExtent	      : 3
}

# Seed fit; this is really a least-squares fit, but uses the Kalman infrastructure
KalSeedFit : {
  module_type                 : KalSeedFit
  KalFit		      : @local::KFSeed
  ParameterErrors	      : [10.0,0.05,0.001,10.0,0.05]
#  ParameterErrors	      : [1.0,1.0,1.0,1.0,1.0]
}
# Final Kalman fit, including material and magnetic inhomogeneity effects
KalFinalFit : {
  module_type                 : KalFinalFit
  KalFit		      : @local::KFFinal
  GoodKallSeedFitBits	      : ["SeedOK"]
  AddHitSelectionBits	      : []
  AddHitBackgroundBits	      : []
}

# seed Fit configuration for specific particles
#  First, downstream electrons
KSFDeM			      : @local::KalSeedFit
KSFDeM.SeedCollectionTag      : "PosHelixFinder"
KSFDeM.fitparticle	      : @local::Particle.eminus
KSFDeM.fitdirection	      : @local::FitDir.downstream 
# upstream electrons
KSFUeM			      : @local::KalSeedFit
KSFUeM.SeedCollectionTag      : "NegHelixFinder"
KSFUeM.fitparticle	      : @local::Particle.eminus
KSFUeM.fitdirection	      : @local::FitDir.upstream 
#  downstream positrons
KSFDeP			      : @local::KalSeedFit
KSFDeP.SeedCollectionTag      : "NegHelixFinder"
KSFDeP.fitparticle	      : @local::Particle.eplus
KSFDeP.fitdirection	      : @local::FitDir.downstream 
# upstream positrons
KSFUeP			      : @local::KalSeedFit
KSFUeP.SeedCollectionTag      : "PosHelixFinder"
KSFUeP.fitparticle	      : @local::Particle.eplus
KSFUeP.fitdirection	      : @local::FitDir.upstream 
# downstream mu minus
KSFDmuM			      : @local::KalSeedFit
KSFDmuM.SeedCollectionTag     : "PosHelixFinder"
KSFDmuM.fitparticle	      : @local::Particle.muminus
KSFDmuM.fitdirection	      : @local::FitDir.downstream 
# upstream mu minus
KSFUmuM			      : @local::KalSeedFit
KSFUmuM.SeedCollectionTag     : "NegHelixFinder"
KSFUmuM.fitparticle	      : @local::Particle.muminus
KSFUmuM.fitdirection	      : @local::FitDir.upstream 
# downstream mu plus
KSFDmuP			      : @local::KalSeedFit
KSFDmuP.SeedCollectionTag     : "NegHelixFinder"
KSFDmuP.fitparticle	      : @local::Particle.muplus
KSFDmuP.fitdirection	      : @local::FitDir.downstream 
# upstream mu plus
KSFUmuP			      : @local::KalSeedFit
KSFUmuP.SeedCollectionTag     : "PosHelixFinder"
KSFUmuP.fitparticle	      : @local::Particle.muplus
KSFUmuP.fitdirection	      : @local::FitDir.upstream 
# downstream pi minus
KSFDpiM			      : @local::KalSeedFit
KSFDpiM.SeedCollectionTag     : "PosHelixFinder"
KSFDpiM.fitparticle	      : @local::Particle.piminus
KSFDpiM.fitdirection	      : @local::FitDir.downstream 
# upstream pi minus
KSFUpiM			      : @local::KalSeedFit
KSFUpiM.SeedCollectionTag     : "NegHelixFinder"
KSFUpiM.fitparticle	      : @local::Particle.piminus
KSFUpiM.fitdirection	      : @local::FitDir.upstream 
# downstream pi plus
KSFDpiP			      : @local::KalSeedFit
KSFDpiP.SeedCollectionTag     : "NegHelixFinder"
KSFDpiP.fitparticle	      : @local::Particle.piplus
KSFDpiP.fitdirection	      : @local::FitDir.downstream 
# upstream pi plus
KSFUpiP			      : @local::KalSeedFit
KSFUpiP.SeedCollectionTag     : "PosHelixFinder"
KSFUpiP.fitparticle	      : @local::Particle.piplus
KSFUpiP.fitdirection	      : @local::FitDir.upstream

# Final Fit configuration for specific particles
#  First, downstream electrons
KFFDeM			      : @local::KalFinalFit
KFFDeM.SeedCollectionTag      : "KSFDeM"
KFFDeM.fitparticle	      : @local::Particle.eminus
KFFDeM.fitdirection	      : @local::FitDir.downstream 
# upstream electrons
KFFUeM			      : @local::KalFinalFit
KFFUeM.SeedCollectionTag      : "KSFUeM"
KFFUeM.fitparticle	      : @local::Particle.eminus
KFFUeM.fitdirection	      : @local::FitDir.upstream 
#  downstream positrons
KFFDeP			      : @local::KalFinalFit
KFFDeP.SeedCollectionTag      : "KSFDeP"
KFFDeP.fitparticle	      : @local::Particle.eplus
KFFDeP.fitdirection	      : @local::FitDir.downstream 
# upstream positrons
KFFUeP			      : @local::KalFinalFit
KFFUeP.SeedCollectionTag      : "KSFUeP"
KFFUeP.fitparticle	      : @local::Particle.eplus
KFFUeP.fitdirection	      : @local::FitDir.upstream 
# downstream mu minus
KFFDmuM			      : @local::KalFinalFit
KFFDmuM.SeedCollectionTag     : "KSFDmuM"
KFFDmuM.fitparticle	      : @local::Particle.muminus
KFFDmuM.fitdirection	      : @local::FitDir.downstream 
# upstream mu minus
KFFUmuM			      : @local::KalFinalFit
KFFUmuM.SeedCollectionTag     : "KSFUmuM"
KFFUmuM.fitparticle	      : @local::Particle.muminus
KFFUmuM.fitdirection	      : @local::FitDir.upstream 
# downstream mu plus
KFFDmuP			      : @local::KalFinalFit
KFFDmuP.SeedCollectionTag     : "KSFDmuP"
KFFDmuP.fitparticle	      : @local::Particle.muplus
KFFDmuP.fitdirection	      : @local::FitDir.downstream 
# upstream mu plus
KFFUmuP			      : @local::KalFinalFit
KFFUmuP.SeedCollectionTag     : "KSFUmuP"
KFFUmuP.fitparticle	      : @local::Particle.muplus
KFFUmuP.fitdirection	      : @local::FitDir.upstream 
# downstream pi minus
KFFDpiM			      : @local::KalFinalFit
KFFDpiM.SeedCollectionTag     : "KSFDpiM"
KFFDpiM.fitparticle	      : @local::Particle.piminus
KFFDpiM.fitdirection	      : @local::FitDir.downstream 
# upstream pi minus
KFFUpiM			      : @local::KalFinalFit
KFFUpiM.SeedCollectionTag     : "KSFUpiM"
KFFUpiM.fitparticle	      : @local::Particle.piminus
KFFUpiM.fitdirection	      : @local::FitDir.upstream 
# downstream pi plus
KFFDpiP			      : @local::KalFinalFit
KFFDpiP.SeedCollectionTag     : "KSFDpiP"
KFFDpiP.fitparticle	      : @local::Particle.piplus
KFFDpiP.fitdirection	      : @local::FitDir.downstream 
# upstream pi plus
KFFUpiP			      : @local::KalFinalFit
KFFUpiP.SeedCollectionTag     : "KSFUpiP"
KFFUpiP.fitparticle	      : @local::Particle.piplus
KFFUpiP.fitdirection	      : @local::FitDir.upstream

# Declare a table with all the modules needed for track reconstruction
Tracking : {
  producers : {
    preloadDigis    : @local::PreloadDigiProducts
    makeSD	    : @local::makeSD
    makeSH	    : @local::makeSHfromSD
    FSHPreStereo    : @local::FSHPreStereo
    MakeStrawHitPositions  : @local::MakeStrawHitPositions
    MakeStereoHits  : @local::MakeStereoHits
    FlagStrawHits   : @local::FlagStrawHits
    FlagBkgHits	    : @local::FlagBkgHits
    TimeClusterFinder  : @local::TimeClusterFinder
    PosHelixFinder  : @local::PosHelixFinder
    NegHelixFinder  : @local::NegHelixFinder
# now all the different track fits based on these inputs
# First, seed fits
    KSFDeM	  : @local::KSFDeM
    KSFUeM	  : @local::KSFUeM
    KSFDeP	  : @local::KSFDeP
    KSFUeP	  : @local::KSFUeP
    KSFDmuM	  : @local::KSFDmuM
    KSFUmuM	  : @local::KSFUmuM
    KSFDmuP	  : @local::KSFDmuP
    KSFUmuP	  : @local::KSFUmuP
    KSFDpiM	  : @local::KSFDpiM
    KSFUpiM	  : @local::KSFUpiM
    KSFDpiP	  : @local::KSFDpiP
    KSFUpiP	  : @local::KSFUpiP
# Final Kalman fit
    KFFDeM	  : @local::KFFDeM
    KFFUeM	  : @local::KFFUeM
    KFFDeP	  : @local::KFFDeP
    KFFUeP	  : @local::KFFUeP
    KFFDmuM	  : @local::KFFDmuM
    KFFUmuM	  : @local::KFFUmuM
    KFFDmuP	  : @local::KFFDmuP
    KFFUmuP	  : @local::KFFUmuP
    KFFDpiM	  : @local::KFFDpiM
    KFFUpiM	  : @local::KFFUpiM
    KFFDpiP	  : @local::KFFDpiP
    KFFUpiP	  : @local::KFFUpiP
  }
# simulation sequence to create digis.  Currently just one module, but that might change
  DigiSim : [ makeSD ]
# production sequence to prepare hits for tracking
  PrepareHits : [ makeSH, FSHPreStereo, MakeStrawHitPositions, MakeStereoHits, FlagStrawHits, FlagBkgHits ]
# define standard outputs 
  Output : {
    Digis : [ "keep mu2e::StrawDigis_*_*_*" ]
    Hits : [ "keep mu2e::StrawHitFlagDetailmu2e::BitMaps_FlagBkgHits_*_*",
	 "keep mu2e::StrawHitPositions_MakeStereoHits_*_*",
	  "keep mu2e::StrawHits_*_*_*"	]

    Tracks : [ "keep mu2e::StrawHitFlagDetailmu2e::BitMaps_*_*_*",
	  "keep mu2e::TrkQualDetailmu2e::MVAStructs_*_*_*",
	  "keep mu2e::KalSeeds_*_*_*",
	   "keep mu2e::HelixSeeds_*_*_*",
	    "keep mu2e::TimeClusters_*_*_*" ]

    MCTracks : ["keep mu2e::GenParticles_*_*_*",
		"keep mu2e::SimParticlesmv_*_*_*" ]
    MCDigis : ["keep mu2e::StrawDigiMCs_makeSD_*_*"]
    MCHits : ["keep mu2e::StrawDigiMCs_makeSH_*_*",
	      "keep mu2e::StepPointMCs_detectorFilter_tracker_*",
	      "keep mu2e::StepPointMCs_detectorFilter_virtualdetector_*"]

  }
}
# production sequences for tracking specific paricles; first electrons
Tracking.TPRDeM  : [ @sequence::Tracking.PrepareHits, TimeClusterFinder, PosHelixFinder, KSFDeM, KFFDeM ]
Tracking.TPRUeM  : [ @sequence::Tracking.PrepareHits, TimeClusterFinder, NegHelixFinder, KSFUeM, KFFUeM ]
Tracking.TPRDeP  : [ @sequence::Tracking.PrepareHits, TimeClusterFinder, NegHelixFinder, KSFDeP, KFFDeP ]
Tracking.TPRUeP  : [ @sequence::Tracking.PrepareHits, TimeClusterFinder, PosHelixFinder, KSFUeP, KFFUeP ]
#muons
Tracking.TPRDmuM  : [ @sequence::Tracking.PrepareHits, TimeClusterFinder, PosHelixFinder, KSFDmuM, KFFDmuM ]
Tracking.TPRUmuM  : [ @sequence::Tracking.PrepareHits, TimeClusterFinder, NegHelixFinder, KSFUmuM, KFFUmuM ]
Tracking.TPRDmuP  : [ @sequence::Tracking.PrepareHits, TimeClusterFinder, NegHelixFinder, KSFDmuP, KFFDmuP ]
Tracking.TPRUmuP  : [ @sequence::Tracking.PrepareHits, TimeClusterFinder, PosHelixFinder, KSFUmuP, KFFUmuP ]
#pions
Tracking.TPRDpiM  : [ @sequence::Tracking.PrepareHits, TimeClusterFinder, PosHelixFinder, KSFDpiM, KFFDpiM ]
Tracking.TPRUpiM  : [ @sequence::Tracking.PrepareHits, TimeClusterFinder, NegHelixFinder, KSFUpiM, KFFUpiM ]
Tracking.TPRDpiP  : [ @sequence::Tracking.PrepareHits, TimeClusterFinder, NegHelixFinder, KSFDpiP, KFFDpiP ]
Tracking.TPRUpiP  : [ @sequence::Tracking.PrepareHits, TimeClusterFinder, PosHelixFinder, KSFUpiP, KFFUpiP ]

END_PROLOG
