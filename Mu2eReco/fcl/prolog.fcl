#include "CRVResponse/fcl/prolog.fcl"
#include "CaloMC/fcl/prolog.fcl"
#include "CaloReco/fcl/prolog.fcl"
#include "CaloCluster/fcl/prolog.fcl"

BEGIN_PROLOG

# Note that KalDiag must be configured differently depending on whether you are
# reading data generated inline, or are reading data output through Read
  KalDiag : {
    MCPtrLabel	      : makeSH
    StrawHitMCLabel   : makeSH
    TimeOffsets       :  { inputs : [ "protonTimeMap", "muonTimeMap" ] }
  }

# If running KalDiag directly on G4 use KalDiagDirect
  KalDiagDirect			  : @local::KalDiag
  KalDiagDirect.MCStepsLabel        : g4run
  KalDiagDirect.SimParticleLabel    : g4run
  KalDiagDirect.SimParticleInstance : "" 

# Production samples use Read, which requires the following setup
  KalDiagRead			  : @local::KalDiag
  KalDiagRead.MCStepsLabel        : detectorFilter
  KalDiagRead.SimParticleLabel    : detectorFilter

# TDR samples gave an instance name to the sim particle collection, CD3 and beyond won't
  KalDiagReadTDR : @local::KalDiagRead
  KalDiagReadTDR.SimParticleInstance : "s0"

# CD3 beam data have no instance labels
  KalDiagReadCD3 : @local::KalDiagRead
  KalDiagReadCD3.SimParticleInstance : ""

# CD3 Cosmic data have different filter module labels
  KalDiagReadCD3Cosmics			  : @local::KalDiagReadCD3
  KalDiagReadCD3Cosmics.MCStepsLabel        : cosmicFilter
  KalDiagReadCD3Cosmics.SimParticleLabel    : cosmicFilter

# prolog which should be elsewhere, FIXME
  pidPathBins: [ 0., 50., 100., 150., 200., 250., 300., 1.e12 ]

  TrkCaloDiag : {
    PIDdt : {
      signalHypothesis: {
	inputFile: "ConditionsService/data/v5_7_2/pid_ele_dt.tbl"
      }
      backgroundHypothesis: {
	inputFile: "ConditionsService/data/v5_7_2/pid_muo_dt.tbl"
      }
    }
    PIDEp : {
      signalHypothesis: {
	inputFile: "ConditionsService/data/v5_7_2/pid_ele_ep_vs_path.tbl"
	pathBinBoundaries: @local::pidPathBins
      }
      backgroundHypothesis: {
	inputFile: "ConditionsService/data/v5_7_2/pid_muo_ep_vs_path.tbl"
	pathBinBoundaries: @local::pidPathBins
      }
    }
    caloMatchingRoot : "TrackCaloMatchingTRF"
  }

#Generic ReadKalFits config.  These only work for CD3
  ReadKalFits : {
    module_type: ReadKalFits
    fitterModuleLabel: KFFDeM
    KalDiag : @local::KalDiagReadCD3 # configure KalDiag to read CD3 data files
    TrkCaloDiag : @local::TrkCaloDiag
    eventWeightModules : [ ]
  }
  ReadKalFitsMix : @local::ReadKalFits
  ReadKalFitsMix.eventWeightModules : [ protonBunchSummarizer  ]
  ReadKalFitsMix.beamWeightModule : protonBunchSummarizer
# Diagnostic modules    
  TimeClusterDiag : {
	module_type : TimeClusterDiag
	HitSelectionBits	    : ["EnergySelection","TimeSelection","RadiusSelection"]
	HitBackgroundBits	    : ["Background"]
	TimeOffsets         :  { inputs : [ "protonTimeMap", "muonTimeMap" ] }
	PeakCleanMVA : { MVAWeights : "TrkPatRec/test/TimePeak.weights.xml" }
  }

  HelixDiag : {
	module_type : HelixDiag
	MinimumCEHits : 10
	HelixSeedCollection : "PosHelixFinder"
	StrawHitFlagCollection : "TimeClusterFinder"
	TimeOffsets         :  { inputs : [ "protonTimeMap", "muonTimeMap" ] }
  }

  StrawHitDiag : {
	module_type : StrawHitDiag
	TimeOffsets : {
	  inputs : [ "protonTimeMap", "muonTimeMap" ] 
	}
  }
  
  TrkRecoDiag : {
    module_type : TrkRecoDiag
    TimeOffsets : {
      inputs : [ "protonTimeMap", "muonTimeMap" ] 
    }
  }

# Prototype track analysis config.
  TrackAnalysis : {
    module_type : TrackAnalysis
    DownstreameMinusTrackTag : "KFFDeM"
    UpstreameMinusTrackTag : "KFFUeM"
    DownstreammuMinusTrackTag : "KFFDmuM"
    KalDiag : @local::KalDiagReadCD3 # configure KalDiag to read CD3 Beam Sim Particles
    # change this if reading cosmic data or generating inline
    TrkCaloDiag : @local::TrkCaloDiag
    CrvCoincidenceModuleLabel : "CrvCoincidence"
    # note that these weights will only be applied if the module which
    # produces them is run
    beamWeightTag : protonBunchSummarizer
    generatorWeightTag : DIOWeight
  }

# TrkCaloIntersection by default looks for merged tracks; repoint to the tracker-found tracks
  TrackCaloMatching : { @table::TrackCaloMatching 
    producers : { @table::TrackCaloMatching.producers 
      TrackCaloIntersectionTRFDem : { @table::TrackCaloMatching.producers.TrackCaloIntersectionDem
	fitterModuleLabel : KFFDeM
      }
      TrackCaloMatchingTRFDem : { @table::TrackCaloMatching.producers.TrackCaloMatchingDem
	fitterModuleLabel : KFFDeM
	trkToCaloExtrapolModuleLabel: TrackCaloIntersectionTRFDem
      }
    }
  }
  
  TrackCaloMatching.matching_dem_TRF : [ TrackCaloIntersectionTRFDem, TrackCaloMatchingTRFDem ]


  TrkDiag : {
    analyzers : {
      TimeClusterDiag : @local::TimeClusterDiag
      StrawHitDiag : @local::StrawHitDiag
      HelixDiag : @local::HelixDiag
    }
  }

# aggregate the prolog to produce the stanard analysis chain
  TrkAna : {

    filters : {
      @table::EventMixing.filters
    }
    producers : {
      @table::EventMixing.producers
      @table::Tracking.producers
      @table::CaloDigiMC.producers
      @table::CaloReco.producers
      @table::CaloCluster.producers
      @table::TrackCaloMatching.producers
      @table::CrvResponsePackage.producers
  # DIO weighting for flat spectrum electrons
      DIOWeight: {
	module_type: DecayInOrbitWeight
	inputModule: generate
	verbosityLevel: 1
      }
    }
    analyzers : {
      genCountLogger: { module_type: GenEventCountReader }
      TrkAna: @local::TrackAnalysis
    }
  
    # separate out the sime and reco parts of the sequence
    SimSequence	: [ @sequence::EventMixing.TimeMaps,
		    @sequence::Tracking.DigiSim,
		    @sequence::CaloDigiMC.DigiSim,
                    @sequence::CrvResponsePackage.CrvResponseSequence ]
    RecoSequence : [ @sequence::CaloReco.Reco,
	             @sequence::CaloCluster.Reco, 
		     @sequence::Tracking.TPRDeM,
		     @sequence::Tracking.TPRUeM,
		     @sequence::Tracking.TPRDmuM,
		     @sequence::TrackCaloMatching.matching_dem_TRF ]
    EndSequence : [ TrkAna, genCountLogger ]

  }
  # aggregate these for convenience
  TrkAna.SimAndRecoSequence : [ @sequence::TrkAna.SimSequence, @sequence::TrkAna.RecoSequence ]
  TrkAna.SimAndRecoMixSequence : [ @sequence::EventMixing.CD3Mixers,
                                   @sequence::TrkAna.SimSequence, @sequence::TrkAna.RecoSequence ]


END_PROLOG
