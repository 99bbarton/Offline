# -*-Shell-script-*-
#
# Common functions for satellite release management scripts
#
# Rob Kutschke, 2016

# Files and directories that are managed by the satellite release mechanism.
# This list does not include the the directory/link named "out".
satellite_managed_files="SConstruct .buildopts setup.sh .sconsign.dblite"

# Ensure that MU2E base environment is established
ensure_mu2e_environment() {
  if [ "${MU2E}" = '' ];then
    echo "The environment variable MU2E is not set."
    echo "You must setup the local Mu2e environment before sourcing this script."
    return 1
  fi
}

# Make sure that the scons command is defined.
ensure_scons(){
  # Fixme: is there a way to save the state of +e/-e so that we are not
  # inapproprately forcing -e at the end of this script.
  set +e
  type scons >& /dev/null
  tmp=$?
  set -e
  if [ "${tmp}" != 0 ]; then
    echo "The command scons is not defined."
    echo "Please setup a release of Mu2e Offline and retry."
    unset tmp
    return 1
  fi
}

# The root directory of a release is passed as the first argument.
# Ensure that this release is legal:
#  - If the current environment does not have a base release established
#    then the release passed as an argument is legal
#  - If the current environment does have a base release established
#    then the release passed as an arugment must be the same as the
#    established base release.  Otherwise the release is illegal.
#
ensure_legal_candidate_release() {
  candidate_release=$1
  if [ "${MU2E_BASE_RELEASE}" != '' ];then
    if [ "${MU2E_BASE_RELEASE}"  != "${candidate_release}" ]; then
      echo "You already have a Mu2e base release established:  " ${MU2E_BASE_RELEASE}
      echo "You are trying to create or rebind this satellite release to a different base release: " ${candidate_release}
      echo ""
      echo "This is not permitted."
      echo "Suggest that you create or rebind only when no base release is currently established."
      echo "Stopping now."
      return 1
    fi
  fi
}

scons_clean(){
  if [ -e SConstruct ]; then
    ensure_scons
    read -p "Ready to do clean up with scons -c [y/n]: " var
    if [ "${var}" != 'y' && "$var{}" != 'Y' ]; then
      echo "Retry when you are ready to clean up."
      return 1
    fi
    scons -c -j 8
  fi
}

# Save a copy of each file that will be overwritten;
# put them into a uniquely named directory.
backup_managed_files(){
  oldDir="backup-"`date "+%F-%R:%S-%Z"`
  if [ -e ${oldDir} ]; then
    echo "There is already a directory named " ${oldDir}
    echo "Not sure how this happend.  Stopping now."
    return 1
  fi
  mkdir -p ${oldDir}
  for stuff in ${satellite_managed_files}; do
    if [ -e ${stuff} ];then
      mv ${stuff} ${oldDir}
    fi
  done
}

#  Is there a file name "out" in the current directory?
#  If so,
#    - is it a directory
#    - is it a link to a file that is a directory?
#    - other
#
#  The echo'ed strings are the return value of the function.
check_legal_out(){

  if [ ! -e out ]; then
     echo "is-absent"
  elif [ -d out -a ! -L out ]; then
     echo "is-dir"
  elif [ -d out -a -L out ];  then
     echo "is-symlink-to-dir"
  else
     echo "other"
  fi
}

# Ensure that the current working directory does not contain any of the
# files that are managed by the satellite release mechanism.
ensure_no_satellite_release_managed_files(){
  stuff_to_delete=""
  for stuff in ${satellite_managed_files}
  do
  if [ -e ${stuff} ];then
    stuff_to_delete=${stuff_to_delete}" "${stuff}
  fi
  done

  bad_files=0
  if [ "${stuff_to_delete}" != "" ]; then
    echo ""
    echo "Error: Your working directory contains files that will be overwritten by"
    echo "       the new satellite release.  The files are:"
    echo ""
    echo "   " ${stuff_to_delete}
    bad_files=1
  fi

  out_status=$(check_legal_out)
  if [ "${out_status}" == "other" ]; then
     echo ""
     echo "Error: this directory contains a file named \"out\" which is neither a"
     echo "       directory nor a symlink to one."
     bad_files=1
  fi

  if [ "${bad_files}" == "1" ]; then
    echo ""
    echo "Please move or delete these files/directories and retry."
    echo ""
    echo "You may find this  script useful: cleanSatelliteRelease"
    echo "Stopping now."
    unset bad_files;
    return 1;
  fi

}

# Decide how to establish the output directory.
#   1) If you are running in an environment that sees a standard
#      data disk, create an output directory on that disk.  Also make a
#      sym link, named "out" from the current working directory to the
#      output directory.
#   2) Otherwise make a local output directory named "out".
#
# In either case, if the output directory already exists, then you will
# be prompted to continue or abort.
#
decide_output_dir(){

  # Default is to assume that we see the standard data disk
  outputDirBase="${MU2E_DATA_USERS:-/mu2e/data/users}"
  outputDir="${outputDirBase}/"`/bin/pwd | sed -e 's|^.*/'$(whoami)'/|'$(whoami)/'|'`"/out"

  # If the standard data disk is missing then the output directory will be ./out.
  if [ ! -d ${outputDirBase} ]; then
    outputDirBase=""
    outputDir="out"
  fi

  # Decide if we need to create the output directory
  createOutputDir=1
  if [ -e  "${outputDir}" ]; then
    echo " "
    echo "The output directory already exists: " ${outputDir}
    if [ -L "${outputDir}" ]; then
       echo "It is a symlink to:                  " $(readlink ${outputDir})
    fi
    echo ""
    echo "You have two choices: "
    echo "   1) Continue: be aware that new output files may overwrite old files"
    echo "   2) Abort this script: you can mv or rm that directory and rerun this script"
    echo ""
    echo -n "Enter c to continue anything else to abort: "
    read answer
    if [[ "${answer}" != "c" && "${answer}" != "C" ]]; then
      return 1
    fi
    createOutputDir=0
  fi
}


# Write the setup.sh file in the user directory
write_setup() {

cat >> setup.sh <<EOF
#! /bin/bash
#
# This script was written by the satellite release manager
# Normally you should not edit it.
#

# Connect to the base release.
source ${candidate_base_release}/${setupname}
retstat=\$?

if [[ "\$retstat" != "0" ]]; then
  return \$retstat;
fi

# Add the satellite release to the two important path variables.
export PATH="\`pwd\`/bin/:\${PATH}"
export LD_LIBRARY_PATH="\`pwd\`/lib/:\${LD_LIBRARY_PATH}"

EOF
}

# Create the managed files for this release.
# There is one argument.  If it's value is "yes" then
# this script will create an output directory; if it is "no"
# then this script will not create an output directory.
create_files(){

  manage_out_directory=$1

  ln -s ${candidate_base_release}/SConstruct .
  if [ -e "${candidate_base_release}/.buildopts" ]; then
    ln -s ${candidate_base_release}/.buildopts .
  fi
  write_setup

  # Have we been asked to manage the directory/symlink named "out"
  # or to leave it alone.
  if [ "${manage_out_directory}" != "yes" ]; then return; fi

  # Decide whether the output directory will be local or on a data disk.
  # This defines the shell variables: createOutputDir and outputDir
  decide_output_dir

  if [[ "${createOutputDir}" == "1" ]]; then
    echo "Making directory for output files:" ${outputDir}
    mkdir -p ${outputDir}
  fi

  if [ ! -e "out" ]; then
    ln -s ${outputDir} out
  fi

}
