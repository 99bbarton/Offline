# Configuration file for G4Test03
#
#  - Generate 200 events including one conversion electron plus
#    some number of background processes.
#  - Run these through G4.
#  - No event display.
#  - Form StrawHits from StepPointMC objects
#  - Write event data to an output file
#  - Save state of random numbers to the event-data output file
#
# $Id: kalmanfitv2_it_nosim.fcl,v 1.2 2012/12/04 00:51:27 tassiell Exp $
# $Author: tassiell $
# $Date: 2012/12/04 00:51:27 $

#include "minimalMessageService.fcl"
#include "standardProducers.fcl"
#include "standardServices.fcl"

#include "TrkPatRecI/test/trackerModules.fcl"

# Give this job a name.
process_name : reKALMANFit

# Start form an empty source
source : {
  module_type : RootInput
  fileNames : ["data_it.root"]
  maxEvents : -1
}

services : {



  message               : @local::default_message
  #TFileService          : { fileName : "tfhistv2_dumb.root" }
  TFileService          : { fileName : "tfhistv2.root" }
  RandomNumberGenerator : { }

# Uncomment to enable memory use profiling
# SimpleMemoryCheck :
# {
#   oncePerEventMode : false
#   showMallocInfo   : false
#   ignoreTotal      : 5
# }
#
# Uncomment to enable per module timing
#   Timing :
#   {
#    useJobReport : true
#   }

# Uncomment to enable trace printout to show what the framework calls when.
#  scheduler: { wantTracer : true }


  user : {

    GeometryService   : { inputFile : "Mu2eG4/test/geom_01.txt" }
#    GeometryService   : { inputFile : "Mu2eG4/test/geom_01dumbbell.txt" }
    ConditionsService : { conditionsfile : "Mu2eG4/test/conditions_01_it.txt"  }
    GlobalConstantsService : { inputFile : "Mu2eG4/test/globalConstants_01.txt" }
    G4Helper          : { }
    SeedService       : @local::automaticSeeds
  }

}

physics : {

  producers: {

    # Generate the event
    generate: @local::generate

    # Run G4 and add its output to the event.
    g4run : @local::g4run

   # Form DCHHits (DcH).
    makeDcH : @local::makeDcH

    # Form CaloHits (APD hits)
    CaloReadoutHitsMaker : @local::CaloReadoutHitsMaker

    # Form CaloCrystalHits (reconstruct crystals from APDs)
    CaloCrystalHitsMaker : @local::CaloCrystalHitsMaker

    # Save state of the random number engines.
    randomsaver : @local::randomsaver

    kalmanFit            : @local::kalmanFit
 
  }

  analyzers: {
    #EveDisplay   : { module_type : EveDisplay }    
    #buildDchGeom : { module_type : buildDchGeom }
    #GeomExport   : { module_type : GeomExport }
  }

  # Random saver is currently broken.
  p1 : [kalmanFit]
  e1 : []
#  e1 : [EveDisplay]
#  e1 : [GeomExport]

  trigger_paths  : [p1]
  end_paths      : [e1]

}

// Initialze seeding of random engines: do not put these lines in base .fcl files for grid jobs.
services.user.SeedService.baseSeed         :  0
services.user.SeedService.maxUniqueEngines :  20

#physics.producers.kalmanFit.debuglevel : 1
physics.producers.kalmanFit.doEndCapExtrapol : true
physics.producers.kalmanFit.fitparticle : 11
physics.producers.kalmanFit.fitdirection : 0 
//physics.producers.kalmanFit.KalFit.fieldCorrection : true
//physics.producers.kalmanFit.KalFit.BFieldIntDivTol : 0.1
//physics.producers.kalmanFit.KalFit.BFieldIntTol : 0.001
