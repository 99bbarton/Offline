#!/usr/bin/perl -w
#
# Usage:
#
#     cat hits.txt | fe-i4-trigger-generator  preScaleNumerator preScaleDenominator
#
# Andrei Gaponenko, 2013

use strict;

# 
my $deBuncherPeriod = 68;  # number of BX per microbunch cycle
#my $inTimeStart = 0; # mod period
my $inTimeEnd = 8; # mod period

sub usage() {
    print "Usage:\n\tcat hits.txt|$0  preScaleNumerator preScaleDenominator\n";
    exit 0;
}

die usage() unless $#ARGV == 1;

my $preScaleNumerator = $ARGV[0];
my $preScaleDenominator = $ARGV[1];

die "ERROR: the numerator should be a positive integer, got $preScaleNumerator\n" unless ($preScaleNumerator =~ /^\d+$/)&&($preScaleNumerator > 0);
die "ERROR: the denominator should be a positive integer, got $preScaleDenominator\n" unless ($preScaleDenominator =~ /^\d+$/)&&($preScaleDenominator > 0);
die "ERROR: num > denom does not make sense\n" if ($preScaleNumerator > $preScaleDenominator);

my $lastBX = -1;
my $numHits = 0;
while(my $line = <STDIN>) {
    # print "got line = $line";
    if($line =~ /^BX\s+(\d+)$/) {
	if($numHits) { # lastBX was non-empty

	    my $cycle = $lastBX / $deBuncherPeriod;
	    my $offset =  $lastBX % $deBuncherPeriod;
	    my $inTime =  ($offset <= $inTimeEnd) ? 1 : 0;

	    my $acceptCycle = (($cycle % $preScaleDenominator) < $preScaleNumerator) ? 1 : 0;
	    
	    if($acceptCycle || !$inTime) {
		# print "TRIG $lastBX   ## $inTime   $numHits\n";
		print "TRIG $lastBX\n";
	    }
	}

	$numHits = 0;
	$lastBX = $1;
    }
    else { # this is a data line
	++$numHits;
    }
}

#print "OK\n";
